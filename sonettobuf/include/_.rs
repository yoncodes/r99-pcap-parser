// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRequest {
    #[prost(string, required, tag = "1")]
    pub account_id: ::prost::alloc::string::String,
    #[prost(string, required, tag = "2")]
    pub uuid: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoginReply {
    #[prost(int64, required, tag = "1")]
    pub user_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerCardInfo {
    #[prost(string, repeated, tag = "1")]
    pub show_settings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub progress_setting: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub base_setting: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub hero_cover: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub theme_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub show_achievement: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub critter: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub room_collection: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "9")]
    pub weekwalk_deep_layer_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub explore_collection: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "11")]
    pub rouge_difficulty: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub act128_sss_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub achievement_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub assist_times: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub hero_cover_times: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "16")]
    pub max_faith_hero_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "17")]
    pub total_cost_power: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18")]
    pub skin_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub tower_layer: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub tower_boss_pass_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub hero_max_level_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerCloth {
    #[prost(int32, optional, tag = "1")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub exp: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerClothInfo {
    #[prost(message, repeated, tag = "1")]
    pub clothes: ::prost::alloc::vec::Vec<PlayerCloth>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroSimpleInfo {
    #[prost(int32, required, tag = "1")]
    pub hero_id: i32,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub ex_skill_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub skin: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInfo {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub exp: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub birthday: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "8")]
    pub show_heros: ::prost::alloc::vec::Vec<HeroSimpleInfo>,
    #[prost(int64, optional, tag = "9")]
    pub register_time: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "10")]
    pub hero_rare_nn_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub hero_rare_n_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub hero_rare_r_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub hero_rare_sr_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub hero_rare_ssr_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub last_episode_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "16")]
    pub last_login_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "17")]
    pub last_logout_time: ::core::option::Option<i64>,
    #[prost(int32, repeated, packed = "false", tag = "18")]
    pub character_age: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, optional, tag = "19")]
    pub show_achievement: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "20")]
    pub bg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub total_login_days: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimplePlayerInfo {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub is_online: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub zone_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub datetime: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientStatBaseInfoReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientStatBaseInfoRequest {
    #[prost(string, optional, tag = "1")]
    pub info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatInfoPush {
    #[prost(bool, optional, tag = "1")]
    pub frist_charge: ::core::option::Option<bool>,
    #[prost(int64, optional, tag = "2")]
    pub total_charge_amount: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "3")]
    pub is_first_login: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "4")]
    pub player_info: ::core::option::Option<PlayerInfo>,
    #[prost(string, optional, tag = "5")]
    pub user_tag: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateClientStatBaseInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub account_bind_bonus: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClientStatBaseInfoRequest {
    #[prost(string, optional, tag = "1")]
    pub info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerTimeReply {
    #[prost(uint64, optional, tag = "1")]
    pub server_time: ::core::option::Option<u64>,
    #[prost(int64, optional, tag = "2")]
    pub offset_time: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerTimeRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenInfo {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
    #[prost(bool, required, tag = "2")]
    pub is_open: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateOpenPush {
    #[prost(message, repeated, tag = "1")]
    pub open_infos: ::prost::alloc::vec::Vec<OpenInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClothUpdatePush {
    #[prost(message, optional, tag = "1")]
    pub update_infos: ::core::option::Option<PlayerClothInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePlayerReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePlayerRequest {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAssistBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub assist_bonus: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub has_receive_assist_bonus: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAssistBonusRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClothInfoReply {
    #[prost(message, optional, tag = "1")]
    pub cloth_infos: ::core::option::Option<PlayerClothInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetClothInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOtherPlayerInfoReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
    #[prost(string, optional, tag = "2")]
    pub hero_cover: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOtherPlayerInfoRequest {
    #[prost(int64, optional, tag = "1")]
    pub user_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerInfoReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
    #[prost(message, repeated, tag = "2")]
    pub openinfos: ::prost::alloc::vec::Vec<OpenInfo>,
    #[prost(bool, optional, tag = "3")]
    pub can_rename: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub main_thumbnail: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub ext_rename: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimpleProperty {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub property: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSimplePropertyReply {
    #[prost(message, repeated, tag = "1")]
    pub simple_properties: ::prost::alloc::vec::Vec<SimpleProperty>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSimplePropertyRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMainThumbnailReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMainThumbnailRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerInfoPush {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReceiveAssistBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub assist_bonus: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub has_receive_assist_bonus: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReceiveAssistBonusRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RenameReply {
    #[prost(bool, optional, tag = "1")]
    pub can_rename: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "2")]
    pub ext_rename: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenameRequest {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub step_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServerResultCodePush {
    #[prost(int32, optional, tag = "1")]
    pub result_code: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetBirthdayReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBirthdayRequest {
    #[prost(string, optional, tag = "1")]
    pub birthday: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetCharacterAgeReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub character_age: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetCharacterAgeRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub character_age: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMainSceneSkinReply {
    #[prost(int32, optional, tag = "1")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMainSceneSkinRequest {
    #[prost(int32, optional, tag = "1")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlayerBgReply {
    #[prost(int32, optional, tag = "1")]
    pub bg_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlayerBgRequest {
    #[prost(int32, optional, tag = "1")]
    pub bg_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPortraitReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPortraitRequest {
    #[prost(int32, optional, tag = "1")]
    pub portrait: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetShowHeroUniqueIdsReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetShowHeroUniqueIdsRequest {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub show_hero_unique_ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSignatureReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureRequest {
    #[prost(string, optional, tag = "1")]
    pub signature: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSimplePropertyReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSimplePropertyRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub property: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimplePropertyPush {
    #[prost(message, optional, tag = "1")]
    pub simple_property: ::core::option::Option<SimpleProperty>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseCdKeyReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseCdKeyRequset {
    #[prost(string, optional, tag = "1")]
    pub gift_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyPowerReply {
    #[prost(int32, optional, tag = "1")]
    pub can_buy_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyPowerRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Currency {
    #[prost(uint32, optional, tag = "1")]
    pub currency_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub last_recover_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub expired_time: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurrencyChangePush {
    #[prost(message, repeated, tag = "1")]
    pub change_currency: ::prost::alloc::vec::Vec<Currency>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeDiamondReply {
    #[prost(int32, optional, tag = "1")]
    pub exchange_diamond: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub op_type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeDiamondRequest {
    #[prost(int32, optional, tag = "1")]
    pub exchange_diamond: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub op_type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBuyPowerInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub can_buy_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBuyPowerInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurrencyListReply {
    #[prost(message, repeated, tag = "1")]
    pub currency_list: ::prost::alloc::vec::Vec<Currency>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurrencyListRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub currency_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishGuideReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishGuideRequest {
    #[prost(int32, required, tag = "1")]
    pub guide_id: i32,
    #[prost(int32, required, tag = "2")]
    pub step_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GuideInfo {
    #[prost(int32, required, tag = "1")]
    pub guide_id: i32,
    #[prost(int32, required, tag = "2")]
    pub step_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGuideInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub guide_infos: ::prost::alloc::vec::Vec<GuideInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGuideInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGuidePush {
    #[prost(message, repeated, tag = "1")]
    pub guide_infos: ::prost::alloc::vec::Vec<GuideInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedDotInfo {
    #[prost(int64, required, tag = "1")]
    pub id: i64,
    #[prost(int32, required, tag = "2")]
    pub value: i32,
    #[prost(int32, optional, tag = "3")]
    pub time: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub ext: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedDotGroup {
    #[prost(int32, required, tag = "1")]
    pub define_id: i32,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<RedDotInfo>,
    #[prost(bool, optional, tag = "3")]
    pub replace_all: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRedDotInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub red_dot_infos: ::prost::alloc::vec::Vec<RedDotGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRedDotInfosRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShowRedDotReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShowRedDotRequest {
    #[prost(int32, optional, tag = "1")]
    pub define_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_visible: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRedDotPush {
    #[prost(message, repeated, tag = "1")]
    pub red_dot_infos: ::prost::alloc::vec::Vec<RedDotGroup>,
    #[prost(bool, optional, tag = "2")]
    pub replace_all: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyLevelUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyLevelUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyRankUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyRankUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyStoneUnlockReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub stone_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyStoneUnlockRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub stone_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyStoneUseReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub stone_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestinyStoneUseRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub stone_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroBirthdayInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub birthday_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroDefaultEquipReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub default_equip_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroDefaultEquipRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub default_equip_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroGainPush {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_first: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub duplicate_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SkinInfo {
    #[prost(int32, optional, tag = "1")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub expire_sec: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroAttribute {
    #[prost(int32, optional, tag = "1")]
    pub hp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub attack: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub defense: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub mdefense: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub technic: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub multi_hp_idx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub multi_hp_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroExAttribute {
    #[prost(int32, optional, tag = "1")]
    pub cri: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub recri: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cri_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub cri_def: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub add_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub drop_dmg: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroSpAttribute {
    #[prost(int32, optional, tag = "1")]
    pub revive: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub heal: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub absorb: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub defense_ignore: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub clutch: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub final_add_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub final_drop_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub normal_skill_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub play_add_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub play_drop_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub dizzy_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub sleep_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub petrified_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub frozen_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub disarm_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "16")]
    pub forbid_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "17")]
    pub seal_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18")]
    pub cant_get_exskill_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub del_ex_point_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub stress_up_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub control_resilience: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "22")]
    pub del_ex_point_resilience: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "23")]
    pub stress_up_resilience: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "24")]
    pub charm_resistances: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "25")]
    pub rebound_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "26")]
    pub extra_dmg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "27")]
    pub reuse_dmg: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroEquipAttribute {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub equip_attr: ::core::option::Option<HeroAttribute>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TalentCubeInfo {
    #[prost(int32, optional, tag = "1")]
    pub cube_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub direction: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub pos_x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub pos_y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TalentTemplateInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub talent_cube_infos: ::prost::alloc::vec::Vec<TalentCubeInfo>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroInfo {
    #[prost(int64, required, tag = "1")]
    pub uid: i64,
    #[prost(int64, required, tag = "2")]
    pub user_id: i64,
    #[prost(int32, required, tag = "3")]
    pub hero_id: i32,
    #[prost(int64, optional, tag = "4")]
    pub create_time: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "5")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub exp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub breakthrough: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub faith: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub active_skill_level: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub passive_skill_level: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "13")]
    pub ex_skill_level: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "14")]
    pub voice: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "15")]
    pub voice_heard: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "16")]
    pub skin_info_list: ::prost::alloc::vec::Vec<SkinInfo>,
    #[prost(message, optional, tag = "17")]
    pub base_attr: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "18")]
    pub ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "19")]
    pub sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, repeated, tag = "20")]
    pub equip_attr_list: ::prost::alloc::vec::Vec<HeroEquipAttribute>,
    #[prost(bool, optional, tag = "21")]
    pub is_new: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "22")]
    pub item_unlock: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "23")]
    pub talent: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "24")]
    pub talent_cube_infos: ::prost::alloc::vec::Vec<TalentCubeInfo>,
    #[prost(int64, optional, tag = "25")]
    pub default_equip_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "26")]
    pub duplicate_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "27")]
    pub talent_templates: ::prost::alloc::vec::Vec<TalentTemplateInfo>,
    #[prost(int32, optional, tag = "28")]
    pub use_talent_template_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "29")]
    pub talent_style_unlock: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "30")]
    pub talent_style_red: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "31")]
    pub is_favor: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "32")]
    pub destiny_rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "33")]
    pub destiny_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "34")]
    pub destiny_stone: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "35")]
    pub destiny_stone_unlock: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "36")]
    pub red_dot: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroInfoListReply {
    #[prost(message, repeated, tag = "1")]
    pub heros: ::prost::alloc::vec::Vec<HeroInfo>,
    #[prost(int32, optional, tag = "2")]
    pub touch_count_left: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub all_hero_skin: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "4")]
    pub birthday_infos: ::prost::alloc::vec::Vec<HeroBirthdayInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroInfoListRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroLevelUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroLevelUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub expect_level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroLevelUpUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub new_rank: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroRankUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_rank: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroRankUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroRedDotReadReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub red_dot: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroRedDotReadRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub red_dot_type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroSkinGainPush {
    #[prost(int32, optional, tag = "1")]
    pub skin_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub first_gain: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub get_approach: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTalentStylePercent {
    #[prost(int32, optional, tag = "1")]
    pub style: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub percent: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroTalentStyleStatReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub style_percent_list: ::prost::alloc::vec::Vec<HeroTalentStylePercent>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTalentStyleStatRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTalentUpReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTalentUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTouchReply {
    #[prost(int32, optional, tag = "1")]
    pub touch_count_left: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub success: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroTouchRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub hero_updates: ::prost::alloc::vec::Vec<HeroInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroUpgradeSkillReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroUpgradeSkillRequest {
    #[prost(int32, required, tag = "1")]
    pub hero_id: i32,
    #[prost(int32, required, tag = "2")]
    pub r#type: i32,
    #[prost(int32, optional, tag = "3")]
    pub consume: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemUnlockReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemUnlockRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkHeroFavorReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_favor: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkHeroFavorRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_favor: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutTalentCubeBatchReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub template_info: ::core::option::Option<TalentTemplateInfo>,
    #[prost(int32, optional, tag = "3")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutTalentCubeBatchRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub put_cube_info: ::prost::alloc::vec::Vec<TalentCubeInfo>,
    #[prost(int32, optional, tag = "3")]
    pub template_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutTalentCubeReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub template_info: ::core::option::Option<TalentTemplateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutTalentCubeRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub get_cube_info: ::core::option::Option<TalentCubeInfo>,
    #[prost(message, optional, tag = "3")]
    pub put_cube_info: ::core::option::Option<TalentCubeInfo>,
    #[prost(int32, optional, tag = "4")]
    pub template_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutTalentSchemeReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub template_info: ::core::option::Option<TalentTemplateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutTalentSchemeRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub talent_mould: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub star_mould: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub template_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenameTalentTemplateReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub template_info: ::core::option::Option<TalentTemplateInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenameTalentTemplateRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub template_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeoffAllTalentCubeReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub template_info: ::core::option::Option<TalentTemplateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeoffAllTalentCubeRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub template_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TalentStyleReadReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TalentStyleReadRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnMarkIsNewReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnMarkIsNewRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTalentStyleReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTalentStyleRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockVoiceReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub voice_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockVoiceRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub voice_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseSkinReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseSkinRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseTalentStyleReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub template_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseTalentStyleRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub template_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub style: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseTalentTemplateReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub template_info: ::core::option::Option<TalentTemplateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseTalentTemplateRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub template_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CardEffectEnum {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EffectTypeEnum {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuffInfo {
    #[prost(int32, optional, tag = "1")]
    pub buff_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub duration: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub ex_info: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub from_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "6")]
    pub count: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub act_common_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub layer: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub equip_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub equip_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub equip_lv: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub refine_lv: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PowerInfo {
    #[prost(int32, optional, tag = "1")]
    pub power_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Activity104EquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub equip_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub equip_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonedInfo {
    #[prost(int32, optional, tag = "1")]
    pub summoned_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub from_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnhanceInfoBox {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub can_upgrade_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub upgraded_options: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEntityInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub model_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub entity_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "6")]
    pub user_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "7")]
    pub ex_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub current_hp: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "10")]
    pub attr: ::core::option::Option<HeroAttribute>,
    #[prost(message, repeated, tag = "11")]
    pub buffs: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub skill_group1: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "13")]
    pub skill_group2: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "14")]
    pub passive_skill: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "15")]
    pub ex_skill: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "16")]
    pub shield_value: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "17")]
    pub no_effect_buffs: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(int32, optional, tag = "18")]
    pub expoint_max_add: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub buff_harm_statistic: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "20")]
    pub equip_uid: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "21")]
    pub trial_equip: ::core::option::Option<EquipRecord>,
    #[prost(int32, optional, tag = "22")]
    pub ex_skill_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "23")]
    pub power_infos: ::prost::alloc::vec::Vec<PowerInfo>,
    #[prost(int64, repeated, packed = "false", tag = "24")]
    pub act104_equip_uids: ::prost::alloc::vec::Vec<i64>,
    #[prost(message, repeated, tag = "25")]
    pub trial_act104_equips: ::prost::alloc::vec::Vec<Activity104EquipRecord>,
    #[prost(message, repeated, tag = "26")]
    pub summoned_list: ::prost::alloc::vec::Vec<SummonedInfo>,
    #[prost(message, optional, tag = "27")]
    pub base_attr: ::core::option::Option<HeroAttribute>,
    #[prost(int32, optional, tag = "28")]
    pub ex_skill_point_change: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "29")]
    pub team_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "30")]
    pub enhance_info_box: ::core::option::Option<EnhanceInfoBox>,
    #[prost(int32, optional, tag = "31")]
    pub trial_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "32")]
    pub career: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "33")]
    pub status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "34")]
    pub guard: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "35")]
    pub sub_cd: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MagicCircleInfo {
    #[prost(int32, optional, tag = "1")]
    pub magic_circle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub round: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub create_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardEnchant {
    #[prost(int32, optional, tag = "1")]
    pub enchant_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub duration: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub ex_info: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardExtraInfo {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "2")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub card_effect: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub temp_card: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "5")]
    pub enchants: ::prost::alloc::vec::Vec<CardEnchant>,
    #[prost(enumeration = "CardType", optional, tag = "6")]
    pub card_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(enumeration = "CardStatus", optional, tag = "8")]
    pub status: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "9")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "10")]
    pub extra_info: ::core::option::Option<CardExtraInfo>,
    #[prost(int32, optional, tag = "11")]
    pub energy: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "12")]
    pub extra_infos: ::prost::alloc::vec::Vec<CardExtraInfo>,
    #[prost(int32, optional, tag = "13")]
    pub area_red_or_blue: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub heat_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightStep {
    #[prost(enumeration = "ActType", optional, tag = "1")]
    pub act_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub act_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub act_effect: ::prost::alloc::vec::Vec<ActEffect>,
    #[prost(int32, optional, tag = "6")]
    pub card_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub support_hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AssistBossSkillInfo {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub need_power: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub power_low: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub power_high: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistBossInfo {
    #[prost(message, repeated, tag = "1")]
    pub skills: ::prost::alloc::vec::Vec<AssistBossSkillInfo>,
    #[prost(int32, optional, tag = "2")]
    pub curr_cd: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cd_cfg: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub form_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub round_use_limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub exceed_use_free: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EmitterInfo {
    #[prost(int32, optional, tag = "1")]
    pub energy: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerFinisherSkillInfo {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub need_power: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerFinisherInfo {
    #[prost(message, repeated, tag = "1")]
    pub skills: ::prost::alloc::vec::Vec<PlayerFinisherSkillInfo>,
    #[prost(int32, optional, tag = "2")]
    pub round_use_limit: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CardHeatValue {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub upper_limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub lower_limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub value: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub change_value: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActEffect {
    #[prost(int64, optional, tag = "1")]
    pub target_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub effect_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub effect_num: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub buff: ::core::option::Option<BuffInfo>,
    #[prost(message, optional, tag = "5")]
    pub entity: ::core::option::Option<FightEntityInfo>,
    #[prost(int32, optional, tag = "6")]
    pub config_effect: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub buff_act_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "8")]
    pub reserve_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "9")]
    pub reserve_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "10")]
    pub summoned: ::core::option::Option<SummonedInfo>,
    #[prost(message, optional, tag = "11")]
    pub magic_circle: ::core::option::Option<MagicCircleInfo>,
    #[prost(message, optional, tag = "12")]
    pub card_info: ::core::option::Option<CardInfo>,
    #[prost(message, repeated, tag = "13")]
    pub card_info_list: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "14")]
    pub team_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "15")]
    pub fight_step: ::core::option::Option<FightStep>,
    #[prost(message, optional, tag = "16")]
    pub assist_boss_info: ::core::option::Option<AssistBossInfo>,
    #[prost(int32, optional, tag = "17")]
    pub effect_num1: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "18")]
    pub emitter_info: ::core::option::Option<EmitterInfo>,
    #[prost(message, optional, tag = "19")]
    pub player_finisher_info: ::core::option::Option<PlayerFinisherInfo>,
    #[prost(message, optional, tag = "20")]
    pub power_info: ::core::option::Option<PowerInfo>,
    #[prost(message, optional, tag = "21")]
    pub card_heat_value: ::core::option::Option<CardHeatValue>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeginRoundOper {
    #[prost(int32, optional, tag = "1")]
    pub oper_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub param1: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub param2: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "4")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CardDeckInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardHeatInfo {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<CardHeatValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomData {
    #[prost(enumeration = "CustomDataType", optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub data: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerSkillInfo {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cd: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub need_power: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IndicatorInfo {
    #[prost(int32, optional, tag = "1")]
    pub inticator_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightTeam {
    #[prost(message, repeated, tag = "1")]
    pub entitys: ::prost::alloc::vec::Vec<FightEntityInfo>,
    #[prost(message, repeated, tag = "2")]
    pub sub_entitys: ::prost::alloc::vec::Vec<FightEntityInfo>,
    #[prost(int32, optional, tag = "3")]
    pub power: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub skill_infos: ::prost::alloc::vec::Vec<PlayerSkillInfo>,
    #[prost(message, repeated, tag = "6")]
    pub sp_entitys: ::prost::alloc::vec::Vec<FightEntityInfo>,
    #[prost(message, repeated, tag = "7")]
    pub indicators: ::prost::alloc::vec::Vec<IndicatorInfo>,
    #[prost(string, optional, tag = "8")]
    pub ex_team_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "9")]
    pub assist_boss: ::core::option::Option<FightEntityInfo>,
    #[prost(message, optional, tag = "10")]
    pub assist_boss_info: ::core::option::Option<AssistBossInfo>,
    #[prost(message, optional, tag = "11")]
    pub emitter: ::core::option::Option<FightEntityInfo>,
    #[prost(message, optional, tag = "12")]
    pub emitter_info: ::core::option::Option<EmitterInfo>,
    #[prost(message, optional, tag = "13")]
    pub player_entity: ::core::option::Option<FightEntityInfo>,
    #[prost(message, optional, tag = "14")]
    pub player_finisher_info: ::core::option::Option<PlayerFinisherInfo>,
    #[prost(int32, optional, tag = "15")]
    pub energy: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "16")]
    pub card_heat: ::core::option::Option<CardHeatInfo>,
    #[prost(int32, optional, tag = "17")]
    pub card_deck_size: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightParam {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub value: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fight {
    #[prost(message, optional, tag = "1")]
    pub attacker: ::core::option::Option<FightTeam>,
    #[prost(message, optional, tag = "2")]
    pub defender: ::core::option::Option<FightTeam>,
    #[prost(int32, optional, tag = "3")]
    pub cur_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_round: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub is_finish: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub cur_wave: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "8")]
    pub magic_circle: ::core::option::Option<MagicCircleInfo>,
    #[prost(int32, optional, tag = "9")]
    pub version: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub is_record: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "11")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(enumeration = "FightActType", optional, tag = "12")]
    pub fight_act_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "13")]
    pub last_change_hero_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "14")]
    pub progress: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub progress_max: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "16")]
    pub param: ::prost::alloc::vec::Vec<FightParam>,
    #[prost(message, repeated, tag = "17")]
    pub custom_data: ::prost::alloc::vec::Vec<CustomData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivity104EquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub activity104_equip_records: ::prost::alloc::vec::Vec<Activity104EquipRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEntityDetailInfo {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<FightEntityInfo>,
    #[prost(message, optional, tag = "2")]
    pub ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "3")]
    pub sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, optional, tag = "4")]
    pub add_attr_per: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "5")]
    pub add_ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "6")]
    pub add_sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, optional, tag = "7")]
    pub test_add_attr_per: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "8")]
    pub test_add_ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "9")]
    pub test_add_sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, optional, tag = "10")]
    pub part_attr_base: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "11")]
    pub part_ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "12")]
    pub part_sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, optional, tag = "13")]
    pub test_part_attr_base: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "14")]
    pub test_part_ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "15")]
    pub test_part_sp_attr: ::core::option::Option<HeroSpAttribute>,
    #[prost(message, optional, tag = "16")]
    pub final_attr_base: ::core::option::Option<HeroAttribute>,
    #[prost(message, optional, tag = "17")]
    pub final_ex_attr: ::core::option::Option<HeroExAttribute>,
    #[prost(message, optional, tag = "18")]
    pub final_sp_attr: ::core::option::Option<HeroSpAttribute>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEquip {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub equip_uid: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEquipRecord {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub equip_records: ::prost::alloc::vec::Vec<EquipRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightExPointInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub ex_point: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub power_infos: ::prost::alloc::vec::Vec<PowerInfo>,
    #[prost(int32, optional, tag = "4")]
    pub current_hp: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrialHero {
    #[prost(int32, optional, tag = "1")]
    pub trial_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pos: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "3")]
    pub equip_uid: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "4")]
    pub act104_equip_uid: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightGroup {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub hero_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub sub_hero_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int32, optional, tag = "3")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub equips: ::prost::alloc::vec::Vec<FightEquip>,
    #[prost(message, repeated, tag = "5")]
    pub trial_hero_list: ::prost::alloc::vec::Vec<TrialHero>,
    #[prost(message, repeated, tag = "6")]
    pub activity104_equips: ::prost::alloc::vec::Vec<FightEquip>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub ex_infos: ::prost::alloc::vec::Vec<i32>,
    #[prost(int64, optional, tag = "8")]
    pub assist_user_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "9")]
    pub assist_hero_uid: ::core::option::Option<i64>,
    #[prost(string, repeated, tag = "10")]
    pub extra_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "11")]
    pub assist_boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeroRecord {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub skin: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrialHeroRecord {
    #[prost(int32, optional, tag = "1")]
    pub trial_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pos: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub equip_records: ::prost::alloc::vec::Vec<EquipRecord>,
    #[prost(message, repeated, tag = "4")]
    pub activity104_equip_records: ::prost::alloc::vec::Vec<Activity104EquipRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightGroupRecord {
    #[prost(message, repeated, tag = "1")]
    pub hero_list: ::prost::alloc::vec::Vec<FightHeroRecord>,
    #[prost(message, repeated, tag = "2")]
    pub sub_hero_list: ::prost::alloc::vec::Vec<FightHeroRecord>,
    #[prost(int32, optional, tag = "3")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub equips: ::prost::alloc::vec::Vec<FightEquipRecord>,
    #[prost(message, repeated, tag = "5")]
    pub trial_hero_list: ::prost::alloc::vec::Vec<TrialHeroRecord>,
    #[prost(message, repeated, tag = "6")]
    pub activity104_equips: ::prost::alloc::vec::Vec<FightActivity104EquipRecord>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub ex_infos: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "8")]
    pub version: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "9")]
    pub assist_user_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "10")]
    pub assist_hero_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "11")]
    pub record_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub assist_boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeroSpAttributeInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "2")]
    pub attribute: ::core::option::Option<HeroSpAttribute>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightReason {
    #[prost(enumeration = "FightType", optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub multiplication: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub data: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseCardStatistics {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub use_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightStatistics {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub harm: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub hurt: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub heal: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "5")]
    pub cards: ::prost::alloc::vec::Vec<UseCardStatistics>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub get_buffs: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRecord {
    #[prost(int64, optional, tag = "1")]
    pub fight_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub fight_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "3")]
    pub fight_time: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub fight_result: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub attack_statistics: ::prost::alloc::vec::Vec<FightStatistics>,
    #[prost(message, repeated, tag = "6")]
    pub defense_statistics: ::prost::alloc::vec::Vec<FightStatistics>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRound {
    #[prost(message, repeated, tag = "1")]
    pub fight_step: ::prost::alloc::vec::Vec<FightStep>,
    #[prost(int32, optional, tag = "2")]
    pub act_point: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_finish: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub move_num: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub ex_point_info: ::prost::alloc::vec::Vec<FightExPointInfo>,
    #[prost(message, repeated, tag = "6")]
    pub ai_use_cards: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "7")]
    pub power: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "8")]
    pub skill_infos: ::prost::alloc::vec::Vec<PlayerSkillInfo>,
    #[prost(message, repeated, tag = "9")]
    pub before_cards1: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "10")]
    pub team_a_cards1: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "11")]
    pub before_cards2: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "12")]
    pub team_a_cards2: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "13")]
    pub next_round_begin_step: ::prost::alloc::vec::Vec<FightStep>,
    #[prost(int32, repeated, packed = "false", tag = "14")]
    pub use_card_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "15")]
    pub cur_round: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "16")]
    pub hero_sp_attributes: ::prost::alloc::vec::Vec<FightHeroSpAttributeInfo>,
    #[prost(int64, optional, tag = "17")]
    pub last_change_hero_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseClothSkillRound {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "4")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(int32, optional, tag = "5")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRoundRecord {
    #[prost(message, repeated, tag = "1")]
    pub cloth_skills: ::prost::alloc::vec::Vec<UseClothSkillRound>,
    #[prost(message, repeated, tag = "2")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
    #[prost(message, optional, tag = "3")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(bool, optional, tag = "4")]
    pub new_wave: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveCardOper {
    #[prost(int32, optional, tag = "1")]
    pub from_position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub to_position: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TargetInfo {
    #[prost(int32, optional, tag = "1")]
    pub card_index: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeHeroGroupSelectReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_select: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeHeroGroupSelectRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_select: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroGroupEquip {
    #[prost(int32, optional, tag = "1")]
    pub index: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub equip_uid: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroGroupInfo {
    #[prost(int32, required, tag = "1")]
    pub group_id: i32,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub hero_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub cloth_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub equips: ::prost::alloc::vec::Vec<HeroGroupEquip>,
    #[prost(message, repeated, tag = "6")]
    pub activity104_equips: ::prost::alloc::vec::Vec<HeroGroupEquip>,
    #[prost(int32, optional, tag = "7")]
    pub assist_boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroGourpType {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_select: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub group_info: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroGroupCommonListReply {
    #[prost(message, repeated, tag = "1")]
    pub hero_group_commons: ::prost::alloc::vec::Vec<HeroGroupInfo>,
    #[prost(message, repeated, tag = "2")]
    pub hero_gourp_types: ::prost::alloc::vec::Vec<HeroGourpType>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroGroupCommonListRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroGroupListReply {
    #[prost(message, repeated, tag = "1")]
    pub group_info_list: ::prost::alloc::vec::Vec<HeroGroupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroGroupListRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroGroupSnapshotNo {
    #[prost(int32, optional, tag = "1")]
    pub snapshot_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub hero_group_snapshots: ::prost::alloc::vec::Vec<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroGroupSnapshotListReply {
    #[prost(message, repeated, tag = "1")]
    pub hero_group_snapshots: ::prost::alloc::vec::Vec<HeroGroupSnapshotNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroGroupSnapshotListRequest {
    #[prost(int32, optional, tag = "1")]
    pub snapshot_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupEquipReply {
    #[prost(int32, optional, tag = "1")]
    pub group_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub equip: ::core::option::Option<HeroGroupEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupEquipRequest {
    #[prost(int32, optional, tag = "1")]
    pub group_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub equip: ::core::option::Option<HeroGroupEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupSnapshotReply {
    #[prost(int32, optional, tag = "1")]
    pub snapshot_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub snapshot_sub_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetHeroGroupSnapshotRequest {
    #[prost(int32, optional, tag = "1")]
    pub snapshot_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub snapshot_sub_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupNameReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_select: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupNameRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_select: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupPush {
    #[prost(message, optional, tag = "1")]
    pub group_info: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupReply {
    #[prost(message, optional, tag = "1")]
    pub group_info: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateHeroGroupRequest {
    #[prost(message, required, tag = "1")]
    pub group_info: HeroGroupInfo,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct M2qEntry {
    #[prost(uint32, optional, tag = "1")]
    pub material_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MaterialData {
    #[prost(uint32, optional, tag = "1")]
    pub materil_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub materil_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MaterialChangePush {
    #[prost(message, repeated, tag = "1")]
    pub data_list: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(uint32, optional, tag = "2")]
    pub get_approach: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoUseExpirePowerItemReply {
    #[prost(bool, optional, tag = "1")]
    pub used: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoUseExpirePowerItemRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, optional, tag = "1")]
    pub item_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub last_use_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub last_update_time: ::core::option::Option<u64>,
    #[prost(int64, optional, tag = "5")]
    pub total_gain_count: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PowerItem {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub item_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub expire_time: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InsightItem {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub expire_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetItemListReply {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(message, repeated, tag = "2")]
    pub power_items: ::prost::alloc::vec::Vec<PowerItem>,
    #[prost(message, repeated, tag = "3")]
    pub insight_items: ::prost::alloc::vec::Vec<InsightItem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetItemListRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemChangePush {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(message, repeated, tag = "2")]
    pub power_items: ::prost::alloc::vec::Vec<PowerItem>,
    #[prost(message, repeated, tag = "3")]
    pub insight_items: ::prost::alloc::vec::Vec<InsightItem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkReadSubType21Reply {
    #[prost(int32, optional, tag = "1")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkReadSubType21Request {
    #[prost(int32, optional, tag = "1")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseInsightItemReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseInsightItemRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseItemReply {
    #[prost(message, repeated, tag = "1")]
    pub entry: ::prost::alloc::vec::Vec<M2qEntry>,
    #[prost(uint64, optional, tag = "2")]
    pub target_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseItemRequest {
    #[prost(message, repeated, tag = "1")]
    pub entry: ::prost::alloc::vec::Vec<M2qEntry>,
    #[prost(uint64, optional, tag = "2")]
    pub target_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UsePowerItemInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsePowerItemListReply {
    #[prost(message, repeated, tag = "1")]
    pub use_power_item_info: ::prost::alloc::vec::Vec<UsePowerItemInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsePowerItemListRequest {
    #[prost(message, repeated, tag = "1")]
    pub use_power_item_info: ::prost::alloc::vec::Vec<UsePowerItemInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UsePowerItemReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UsePowerItemRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserChapterTypeNum {
    #[prost(int32, optional, tag = "1")]
    pub chapter_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub today_pass_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub today_total_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserDungeon {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub star: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub challenge_count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub has_record: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub left_return_all_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub today_pass_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub today_total_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserDungeonSpStatus {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub status: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "4")]
    pub refresh_time: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistHeroInfo {
    #[prost(int64, optional, tag = "1")]
    pub hero_uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub user_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub user_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub bg: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub is_friend: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub passive_skill_level: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "13")]
    pub ex_skill_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub talent: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "15")]
    pub talent_cube_infos: ::prost::alloc::vec::Vec<TalentCubeInfo>,
    #[prost(int32, optional, tag = "16")]
    pub balance_level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "17")]
    pub is_open_talent: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "18")]
    pub style: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub destiny_rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub destiny_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub destiny_stone: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistHeroCareerNo {
    #[prost(int32, optional, tag = "1")]
    pub career: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub assist_hero_infos: ::prost::alloc::vec::Vec<AssistHeroInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChapterMapElementUpdatePush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChapterMapUpdatePush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub map_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CoverDungeonRecordReply {
    #[prost(bool, optional, tag = "1")]
    pub is_cover: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CoverDungeonRecordRequest {
    #[prost(bool, optional, tag = "1")]
    pub is_cover: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DungeonBonusInfo {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub bonus: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DungeonInfosPush {
    #[prost(message, repeated, tag = "1")]
    pub dungeon_infos: ::prost::alloc::vec::Vec<UserDungeon>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DungeonLastHeroGroup {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub hero_group_snapshot: ::core::option::Option<HeroGroupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DungeonUpdatePush {
    #[prost(message, optional, tag = "1")]
    pub dungeon_info: ::core::option::Option<UserDungeon>,
    #[prost(message, repeated, tag = "2")]
    pub chapter_type_nums: ::prost::alloc::vec::Vec<UserChapterTypeNum>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndDungeonPush {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub player_exp: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub first_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "5")]
    pub normal_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(int32, optional, tag = "6")]
    pub star: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "7")]
    pub advenced_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(bool, optional, tag = "8")]
    pub update_dungeon_record: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub can_update_dungeon_record: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "10")]
    pub old_record_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub new_record_round: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "12")]
    pub first_pass: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "13")]
    pub addition_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "14")]
    pub time_first_bonus: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(string, optional, tag = "15")]
    pub extra_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "16")]
    pub drop_bonus: ::prost::alloc::vec::Vec<DungeonBonusInfo>,
    #[prost(int64, optional, tag = "17")]
    pub assist_user_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "18")]
    pub assist_nickname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "19")]
    pub total_round: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndDungeonReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndDungeonRequest {
    #[prost(bool, optional, tag = "1")]
    pub is_abort: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroRecommendInfo {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub sub_hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cloth: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "4")]
    pub rate: ::core::option::Option<f32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub levels: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "6")]
    pub assist_boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeHeroRecommendInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<HeroRecommendInfo>,
    #[prost(float, optional, tag = "3")]
    pub rate: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipSpDungeonUpdatePush {
    #[prost(bool, optional, tag = "1")]
    pub is_delete: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "2")]
    pub chapter_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RewardPointInfo {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub reward_point: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_point_reward_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDungeonReply {
    #[prost(message, repeated, tag = "1")]
    pub dungeon_info_list: ::prost::alloc::vec::Vec<UserDungeon>,
    #[prost(message, repeated, tag = "2")]
    pub last_hero_group: ::prost::alloc::vec::Vec<DungeonLastHeroGroup>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub map_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "5")]
    pub reward_point_info: ::prost::alloc::vec::Vec<RewardPointInfo>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub equip_sp_chapters: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "7")]
    pub chapter_type_nums: ::prost::alloc::vec::Vec<UserChapterTypeNum>,
    #[prost(int32, repeated, packed = "false", tag = "8")]
    pub finish_elements: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "9")]
    pub finish_puzzles: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "10")]
    pub dungeon_info_size: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDungeonRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEpisodeHeroRecommendReply {
    #[prost(message, repeated, tag = "1")]
    pub racommends: ::prost::alloc::vec::Vec<EpisodeHeroRecommendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEpisodeHeroRecommendRequest {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainDramaRewardReply {
    #[prost(message, repeated, tag = "1")]
    pub bonus: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMainDramaRewardRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPointRewardReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPointRewardRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPuzzleProgressReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub progress: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPuzzleProgressRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonFinalRewardReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonFinalRewardRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionDungeonInfoPush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub unlock_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub get_reward_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "3")]
    pub get_final_reward: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub open_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionDungeonInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub unlock_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub get_reward_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "3")]
    pub get_final_reward: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub open_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonOpenReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstructionDungeonOpenRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub open_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonRewardReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InstructionDungeonRewardRequest {
    #[prost(int32, optional, tag = "1")]
    pub topic_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MainDramaRewardInfo {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapElementReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapElementRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PuzzleFinishReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PuzzleFinishRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshAssistReply {
    #[prost(int32, optional, tag = "1")]
    pub assist_type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub assist_hero_careers: ::prost::alloc::vec::Vec<AssistHeroCareerNo>,
    #[prost(string, optional, tag = "3")]
    pub ext: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshAssistRequest {
    #[prost(int32, optional, tag = "1")]
    pub assist_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub ext: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RewardPointUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub value: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SavePuzzleProgressReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SavePuzzleProgressRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub progress: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartDungeonReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartDungeonRequest {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub fight_group: ::core::option::Option<FightGroup>,
    #[prost(int32, optional, tag = "4")]
    pub multiplication: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub use_record: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_restart: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_balance: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "8")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoRoundReply {
    #[prost(message, repeated, tag = "1")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
    #[prost(int64, optional, tag = "2")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoRoundRequest {
    #[prost(message, repeated, tag = "1")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
    #[prost(int64, optional, tag = "2")]
    pub to_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginFightReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginFightRequest {
    #[prost(message, optional, tag = "1")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginRoundReply {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeginRoundRequest {
    #[prost(message, repeated, tag = "1")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
    #[prost(bool, optional, tag = "2")]
    pub auto_oper: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub card_group: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "2")]
    pub act_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub move_num: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub before_cards: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "5")]
    pub deal_card_group: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(int32, optional, tag = "6")]
    pub extra_move_act: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub is_gm: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSubHeroExSkillReply {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeSubHeroExSkillRequest {
    #[prost(int64, optional, tag = "1")]
    pub ex_skill_target: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSubHeroReply {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeSubHeroRequest {
    #[prost(int64, optional, tag = "1")]
    pub sub_hero_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub change_hero_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndFightPush {
    #[prost(message, optional, tag = "1")]
    pub record: ::core::option::Option<FightRecord>,
    #[prost(message, optional, tag = "2")]
    pub fight_group_a: ::core::option::Option<FightGroup>,
    #[prost(bool, optional, tag = "3")]
    pub is_record: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndFightReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndFightRequest {
    #[prost(bool, optional, tag = "1")]
    pub is_abort: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndRoundReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndRoundRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityInfoReply {
    #[prost(message, optional, tag = "1")]
    pub entity_info: ::core::option::Option<FightEntityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityInfoRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseClothSkillOperRecord {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRoundOperRecord {
    #[prost(message, repeated, tag = "1")]
    pub cloth_skill_opers: ::prost::alloc::vec::Vec<UseClothSkillOperRecord>,
    #[prost(message, repeated, tag = "2")]
    pub opers: ::prost::alloc::vec::Vec<BeginRoundOper>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RedealCardInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub card_group: ::prost::alloc::vec::Vec<CardInfo>,
    #[prost(message, repeated, tag = "2")]
    pub deal_card_group: ::prost::alloc::vec::Vec<CardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightRoundRecordAll {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<FightRoundRecord>,
    #[prost(message, optional, tag = "4")]
    pub fight_record: ::core::option::Option<FightRecord>,
    #[prost(int32, optional, tag = "5")]
    pub result: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub result_cause: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub total_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub kill_total: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "9")]
    pub push_info: ::core::option::Option<CardInfoPush>,
    #[prost(message, repeated, tag = "10")]
    pub wave_push_fight: ::prost::alloc::vec::Vec<Fight>,
    #[prost(message, repeated, tag = "12")]
    pub redeal_infos: ::prost::alloc::vec::Vec<RedealCardInfoPush>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightWavePush {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightWithRecordAllReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightWithRecordAllRequest {
    #[prost(message, optional, tag = "1")]
    pub record_all: ::core::option::Option<FightRoundRecordAll>,
    #[prost(message, optional, tag = "2")]
    pub group: ::core::option::Option<FightGroupRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEntityDetailInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub team_a_infos: ::prost::alloc::vec::Vec<FightEntityDetailInfo>,
    #[prost(message, repeated, tag = "2")]
    pub team_b_infos: ::prost::alloc::vec::Vec<FightEntityDetailInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEntityDetailInfosRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightCardDeckDetailInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub deck_infos: ::prost::alloc::vec::Vec<CardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightCardDeckDetailInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightCardDeckInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub deck_infos: ::prost::alloc::vec::Vec<CardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightCardDeckInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightOperReply {
    #[prost(message, repeated, tag = "1")]
    pub oper_records: ::prost::alloc::vec::Vec<FightRoundOperRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightOperRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightRecordAllReply {
    #[prost(message, optional, tag = "1")]
    pub record_all: ::core::option::Option<FightRoundRecordAll>,
    #[prost(message, optional, tag = "2")]
    pub group: ::core::option::Option<FightGroupRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightRecordAllRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightRecordGroupReply {
    #[prost(message, optional, tag = "1")]
    pub fight_group: ::core::option::Option<FightGroupRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightRecordGroupRequest {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveCardReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MoveCardRequest {
    #[prost(int32, optional, tag = "1")]
    pub from_position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub to_position: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReconnectFightReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub last_round: ::core::option::Option<FightRound>,
    #[prost(message, optional, tag = "3")]
    pub fight_reason: ::core::option::Option<FightReason>,
    #[prost(message, optional, tag = "4")]
    pub fight_group: ::core::option::Option<FightGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReconnectFightRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetRoundReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
    #[prost(message, repeated, tag = "3")]
    pub cards: ::prost::alloc::vec::Vec<CardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetRoundRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TeamInfoPush {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(bool, optional, tag = "2")]
    pub is_gm: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightIdReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightIdRequest {
    #[prost(int32, optional, tag = "1")]
    pub fight_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub fight_group: ::core::option::Option<FightGroup>,
    #[prost(int32, optional, tag = "3")]
    pub fight_act_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightReply {
    #[prost(message, optional, tag = "1")]
    pub fight: ::core::option::Option<Fight>,
    #[prost(message, optional, tag = "2")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestFightRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub group_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "2")]
    pub fight_group: ::core::option::Option<FightGroup>,
    #[prost(int32, optional, tag = "3")]
    pub fight_act_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseClothSkillReply {
    #[prost(message, optional, tag = "1")]
    pub round: ::core::option::Option<FightRound>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseClothSkillRequest {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EatEquip {
    #[prost(int64, optional, tag = "1")]
    pub eat_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Equip {
    #[prost(int32, optional, tag = "1")]
    pub equip_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub exp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub break_lv: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub is_lock: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9")]
    pub refine_lv: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipBreakReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipBreakRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipComposeReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub equip_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipComposeRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub equip_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipDecomposeReply {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub equip_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipDecomposeRequest {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub equip_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipDeletePush {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipLockReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub lock: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipLockRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub lock: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipRefineReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub eat_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipRefineRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub eat_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipStrengthenReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub eat_equips: ::prost::alloc::vec::Vec<EatEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipStrengthenRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub eat_equips: ::prost::alloc::vec::Vec<EatEquip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub equips: ::prost::alloc::vec::Vec<Equip>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEquipInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub equips: ::prost::alloc::vec::Vec<Equip>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEquipInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryFinishReply {
    #[prost(bool, optional, tag = "1")]
    pub is_finish: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryFinishRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProcessingStoryInfo {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub favor: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoryReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub finish_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub processing_list: ::prost::alloc::vec::Vec<ProcessingStoryInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoryFinishPush {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateStoryReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateStoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub favor: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChargeInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub buy_count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub first_charge: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChargeInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<ChargeInfo>,
    #[prost(bool, optional, tag = "2")]
    pub sandbox_enable: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub sandbox_balance: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChargeInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonthCardBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonthCardBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonthCardInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub expire_time: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub has_get_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMonthCardInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<MonthCardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonthCardInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewOrderReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub pass_back_param: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub notify_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "4")]
    pub game_order_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "5")]
    pub timestamp: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "6")]
    pub sign: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub server_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "8")]
    pub currency: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectionInfo {
    #[prost(int32, optional, tag = "1")]
    pub region_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub selection_pos: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewOrderRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub origin_currency: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub origin_amount: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub selection_infos: ::prost::alloc::vec::Vec<SelectionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderCompletePush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub game_order_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadChargeNewReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadChargeNewRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SandboxChargeReply {
    #[prost(int64, optional, tag = "1")]
    pub game_order_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub sandbox_balance: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SandboxChargeRequset {
    #[prost(int64, optional, tag = "1")]
    pub game_order_id: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccelerateGuidePlanReply {
    #[prost(int32, optional, tag = "1")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccelerateGuidePlanRequest {
    #[prost(int32, optional, tag = "1")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllotCritterReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub critter_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllotCritterRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub critter_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllotVehicleReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub skin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub building_define_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AllotVehicleRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchAddProctionsReply {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreeChooseInfo {
    #[prost(int32, optional, tag = "1")]
    pub building_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub building_define_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub item2_count: ::prost::alloc::vec::Vec<M2qEntry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchAddProctionsRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub free_info: ::core::option::Option<FreeChooseInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDispatchInfo {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub road_id: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "3")]
    pub critter_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchDispatchCrittersReply {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<BatchDispatchInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchDispatchCrittersRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub y: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub water_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockPackageInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_package_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub un_use_block_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub use_block_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockPackageGainPush {
    #[prost(message, repeated, tag = "1")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuildingInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub r#use: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub y: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub level: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildingGainPush {
    #[prost(message, repeated, tag = "1")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildingLevelUpPush {
    #[prost(message, repeated, tag = "1")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyManufactureBuildingInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub building_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyManufactureBuildingRequest {
    #[prost(int32, optional, tag = "1")]
    pub building_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyRestSlotReply {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub buy_slot_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyRestSlotRequest {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub buy_slot_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangePurchaseOrderTraceStateReply {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_trace: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangePurchaseOrderTraceStateRequest {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_trace: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeRestCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeRestCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub operation: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub slot_id1: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "4")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "5")]
    pub slot_id2: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CharacterInteractionInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub finish: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub select_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CopyOtherRoomPlanReply {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CopyOtherRoomPlanRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRoadReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRoadRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRoomPlanReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRoomPlanRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRoomShareReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRoomShareRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DispatchCritterInfo {
    #[prost(int32, optional, tag = "1")]
    pub critter_slot_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub critter_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoadCritterInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub critter_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DispatchCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub put_slot_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub infos: ::prost::alloc::vec::Vec<RoadCritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DispatchCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub critter_slot_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeedCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub current_mood: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeedCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "2")]
    pub use_food_data: ::core::option::Option<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionData {
    #[prost(uint32, optional, tag = "1")]
    pub production_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub quantity: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurchaseOrderInfo {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub last_refresh_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub buyer_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub goods_info: ::prost::alloc::vec::Vec<ProductionData>,
    #[prost(bool, optional, tag = "5")]
    pub is_advanced: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_traced: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "7")]
    pub refresh_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub quality: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub is_locked: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishOrderReply {
    #[prost(int32, optional, tag = "1")]
    pub order_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub new_purchase_order_info: ::core::option::Option<PurchaseOrderInfo>,
    #[prost(int64, optional, tag = "4")]
    pub sold_count: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "5")]
    pub remain_refresh_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub weekly_wholesale_revenue: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishOrderRequest {
    #[prost(int32, optional, tag = "1")]
    pub order_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub sell_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FormulaInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormulaGainPush {
    #[prost(message, repeated, tag = "1")]
    pub formula_infos: ::prost::alloc::vec::Vec<FormulaInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FormulaProduce {
    #[prost(int32, optional, tag = "1")]
    pub formula_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainGuideBuildingReply {
    #[prost(int32, optional, tag = "1")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "3")]
    pub building_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GainGuideBuildingRequest {
    #[prost(int32, optional, tag = "1")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub formula_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub finish_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub next_finish_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub pause_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub level: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainProductionLineReply {
    #[prost(message, repeated, tag = "1")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainProductionLineRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomHeroData {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub current_faith: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub next_refresh_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub skin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub current_minute: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainRoomHeroFaithReply {
    #[prost(message, repeated, tag = "1")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainRoomHeroFaithRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainSpecialBlockPush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub special_blocks: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoadPoint {
    #[prost(int32, optional, tag = "1")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoadInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub from_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub to_type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub road_points: ::prost::alloc::vec::Vec<RoadPoint>,
    #[prost(int64, optional, tag = "5")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "6")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "7")]
    pub building_define_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub skin_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub block_clean_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateRoadReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub valid_road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateRoadRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpecialBlockInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub create_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlockPackageInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_package_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub special_blocks: ::prost::alloc::vec::Vec<SpecialBlockInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBlockPackageInfoRequset {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBuildingInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBuildingInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub select_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub select_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<CharacterInteractionInfo>,
    #[prost(int32, optional, tag = "2")]
    pub interaction_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCharacterInteractionInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFrozenItemInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub frozen_items2_count: ::prost::alloc::vec::Vec<M2qEntry>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFrozenItemInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SlotInfo {
    #[prost(int32, optional, tag = "1")]
    pub slot_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub priority: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub production_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub slot_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub inventory_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub begin_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub next_finish_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub pause_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManuBuildingInfo {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub slot_infos: ::prost::alloc::vec::Vec<SlotInfo>,
    #[prost(message, repeated, tag = "3")]
    pub critter_infos: ::prost::alloc::vec::Vec<DispatchCritterInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestBuildingInfo {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub unlock_slot_infos: ::prost::alloc::vec::Vec<DispatchCritterInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetManufactureInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub trade_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub manu_building_infos: ::prost::alloc::vec::Vec<ManuBuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub rest_building_infos: ::prost::alloc::vec::Vec<RestBuildingInfo>,
    #[prost(message, repeated, tag = "4")]
    pub frozen_items2_count: ::prost::alloc::vec::Vec<M2qEntry>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetManufactureInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WholesaleOrderInfo {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub good_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub today_sold_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOrderInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub purchase_order_finish_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub purchase_order_infos: ::prost::alloc::vec::Vec<PurchaseOrderInfo>,
    #[prost(message, repeated, tag = "3")]
    pub wholesale_order_infos: ::prost::alloc::vec::Vec<WholesaleOrderInfo>,
    #[prost(int32, optional, tag = "4")]
    pub remain_refresh_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub weekly_wholesale_revenue: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOrderInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomSkinInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOtherRoomObInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(int64, optional, tag = "3")]
    pub target_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
    #[prost(message, repeated, tag = "6")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
    #[prost(string, optional, tag = "7")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "8")]
    pub skins: ::prost::alloc::vec::Vec<RoomSkinInfo>,
    #[prost(message, repeated, tag = "9")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOtherRoomObInfoRequest {
    #[prost(int64, optional, tag = "1")]
    pub target_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(bool, optional, tag = "2")]
    pub is_reset: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "4")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
    #[prost(message, repeated, tag = "5")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomLogInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub is_new: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomLogReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<RoomLogInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomLogRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomObInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub formula_infos: ::prost::alloc::vec::Vec<FormulaInfo>,
    #[prost(int32, optional, tag = "4")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
    #[prost(message, repeated, tag = "6")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub has_get_room_themes: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "8")]
    pub need_block_data: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "9")]
    pub skins: ::prost::alloc::vec::Vec<RoomSkinInfo>,
    #[prost(message, repeated, tag = "10")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomObInfoRequest {
    #[prost(bool, optional, tag = "1")]
    pub need_block_data: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomPlanInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "3")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(int32, optional, tag = "4")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub building_degree: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub block_count: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "8")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "9")]
    pub use_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "10")]
    pub skins: ::prost::alloc::vec::Vec<RoomSkinInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomPlanDetailsReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<RoomPlanInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomPlanDetailsRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomPlanInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<RoomPlanInfo>,
    #[prost(int32, optional, tag = "2")]
    pub can_share_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub can_use_share_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub total_use_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomPlanInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomShareReply {
    #[prost(int32, optional, tag = "1")]
    pub zone_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub room_plan_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub nick_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "5")]
    pub share_user_id: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "6")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "7")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(int32, optional, tag = "8")]
    pub building_degree: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub block_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub use_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "12")]
    pub skins: ::prost::alloc::vec::Vec<RoomSkinInfo>,
    #[prost(message, repeated, tag = "13")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoomShareRequest {
    #[prost(string, optional, tag = "1")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomThemeCollectionBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRoomThemeCollectionBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTradeSupportBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTradeSupportBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTradeTaskExtraBonusReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTradeTaskExtraBonusRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TradeTaskInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub has_finish: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub new: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub finish_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTradeTaskInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<TradeTaskInfo>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub has_get_support_bonus: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "3")]
    pub can_get_extra_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTradeTaskInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBlockPackageReddotReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBlockPackageReddotRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBuildingReddotReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HideBuildingReddotRequset {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockOrderReply {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_locked: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockOrderRequest {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub operation: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManuBuildingInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub manu_building_infos: ::prost::alloc::vec::Vec<ManuBuildingInfo>,
    #[prost(message, repeated, tag = "2")]
    pub frozen_items2_count: ::prost::alloc::vec::Vec<M2qEntry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManuBuildingUpgradeReply {
    #[prost(message, optional, tag = "1")]
    pub manu_building_info: ::core::option::Option<ManuBuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ManuBuildingUpgradeRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ManufactureAccelerateReply {
    #[prost(message, repeated, tag = "1")]
    pub manu_building_infos: ::prost::alloc::vec::Vec<ManuBuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ManufactureAccelerateRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub slot_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub use_item_data: ::core::option::Option<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OperationInfo {
    #[prost(int32, optional, tag = "1")]
    pub slot_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub operation: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub production_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub priority: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineAccelerateReply {
    #[prost(message, optional, tag = "1")]
    pub production_line: ::core::option::Option<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineAccelerateRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub use_item_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductionLineInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductionLineInfoRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineLvUpReply {
    #[prost(message, optional, tag = "1")]
    pub production_line: ::core::option::Option<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProductionLineLvUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_level: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadNewTradeTaskReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadNewTradeTaskRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadRoomLogNewReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub index: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadRoomLogNewRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub index: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadRoomSkinReply {
    #[prost(int32, optional, tag = "1")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadRoomSkinRequest {
    #[prost(int32, optional, tag = "1")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReapFinishSlotReply {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub manu_building_infos: ::prost::alloc::vec::Vec<ManuBuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub normal_reap_item: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "4")]
    pub cri_reap_item: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(message, repeated, tag = "5")]
    pub occupied_cri_item: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReapFinishSlotRequest {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshPurchaseOrderReply {
    #[prost(message, optional, tag = "1")]
    pub order_info: ::core::option::Option<PurchaseOrderInfo>,
    #[prost(int32, optional, tag = "2")]
    pub remain_refresh_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RefreshPurchaseOrderRequest {
    #[prost(int32, optional, tag = "1")]
    pub order_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReplaceRestBuildingCrittersReply {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReplaceRestBuildingCrittersRequest {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportRoomReply {
    #[prost(string, optional, tag = "1")]
    pub token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportRoomRequest {
    #[prost(int64, optional, tag = "1")]
    pub reported_user_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub report_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetRoomReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
    #[prost(message, repeated, tag = "3")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetRoomRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestBuildingInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub rest_building_infos: ::prost::alloc::vec::Vec<RestBuildingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomConfirmReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub formula_infos: ::prost::alloc::vec::Vec<FormulaInfo>,
    #[prost(int32, optional, tag = "4")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
    #[prost(message, repeated, tag = "6")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomConfirmRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomLevelUpReply {
    #[prost(int32, optional, tag = "1")]
    pub room_level: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub production_lines: ::prost::alloc::vec::Vec<ProductionLineInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomLevelUpRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomRevertReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
    #[prost(message, repeated, tag = "2")]
    pub block_packages: ::prost::alloc::vec::Vec<BlockPackageInfo>,
    #[prost(message, repeated, tag = "3")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomRevertRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ValidDispatchCritterInfo {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub slot_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidDispatchInfo {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub road_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub infos: ::prost::alloc::vec::Vec<ValidDispatchCritterInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouseCrittersReply {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
    #[prost(message, repeated, tag = "3")]
    pub valid_infos: ::prost::alloc::vec::Vec<ValidDispatchInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouseCrittersRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<BatchDispatchInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectSlotProductionPlanReply {
    #[prost(message, repeated, tag = "1")]
    pub manu_building_infos: ::prost::alloc::vec::Vec<ManuBuildingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectSlotProductionPlanRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub operation_infos: ::prost::alloc::vec::Vec<OperationInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetRoomPlanCoverReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cover_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetRoomPlanCoverRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cover_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRoomPlanNameReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRoomPlanNameRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRoomPlanReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRoomPlanRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetRoomSkinReply {
    #[prost(message, optional, tag = "1")]
    pub skin: ::core::option::Option<RoomSkinInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetRoomSkinRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skin_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetWaterTypeReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub infos: ::prost::alloc::vec::Vec<BlockInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaterInfo {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub water_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetWaterTypeRequest {
    #[prost(message, repeated, tag = "1")]
    pub water_infos: ::prost::alloc::vec::Vec<WaterInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShareRoomPlanReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub can_share_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShareRoomPlanRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCharacterInteractionReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCharacterInteractionRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartProductionLineReply {
    #[prost(message, optional, tag = "1")]
    pub production_line: ::core::option::Option<ProductionLineInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartProductionLineRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub formula_produce: ::prost::alloc::vec::Vec<FormulaProduce>,
    #[prost(message, repeated, tag = "3")]
    pub cost_check: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchRoomPlanReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<RoomPlanInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchRoomPlanRequest {
    #[prost(int32, optional, tag = "1")]
    pub id_a: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id_b: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TradeLevelUpReply {
    #[prost(int32, optional, tag = "1")]
    pub level: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TradeLevelUpRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeTaskPush {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<TradeTaskInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnUseBlockReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnUseBlockRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub block_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnUseBuildingReply {
    #[prost(message, repeated, tag = "1")]
    pub building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "2")]
    pub road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnUseBuildingRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnloadRestBuildingCrittersReply {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnloadRestBuildingCrittersRequest {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRoomHeroDataReply {
    #[prost(message, repeated, tag = "1")]
    pub room_hero_datas: ::prost::alloc::vec::Vec<RoomHeroData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRoomHeroDataRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub room_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBlockReply {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBlockRequest {
    #[prost(int32, optional, tag = "1")]
    pub block_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub block_package_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseBuildingReply {
    #[prost(message, optional, tag = "1")]
    pub building_info: ::core::option::Option<BuildingInfo>,
    #[prost(message, repeated, tag = "2")]
    pub delete_building_infos: ::prost::alloc::vec::Vec<BuildingInfo>,
    #[prost(message, repeated, tag = "3")]
    pub delete_road_infos: ::prost::alloc::vec::Vec<RoadInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseBuildingRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub rotate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub x: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub y: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseRoomPlanReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseRoomPlanRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseRoomShareReply {
    #[prost(string, optional, tag = "1")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub can_use_share_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseRoomShareRequest {
    #[prost(string, optional, tag = "1")]
    pub share_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub cover_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChooseEnhancedPoolHeroReply {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChooseEnhancedPoolHeroRequest {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChooseMultiUpHeroReply {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChooseMultiUpHeroRequest {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LuckyBagInfo {
    #[prost(int32, optional, tag = "1")]
    pub count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub lucky_bag_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub open_lb_times: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpPoolInfo {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub up_hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "3")]
    pub limited_ticket_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub limited_ticket_num: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "5")]
    pub open_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "6")]
    pub used_first_ssr_guarantee: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonPoolInfo {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub online_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub offline_time: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub have_free: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub used_free_count: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "6")]
    pub lucky_bag_info: ::core::option::Option<LuckyBagInfo>,
    #[prost(message, optional, tag = "7")]
    pub sp_pool_info: ::core::option::Option<SpPoolInfo>,
    #[prost(int32, optional, tag = "8")]
    pub discount_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub can_get_guarantee_sr_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub guarantee_sr_count_down: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSummonInfoReply {
    #[prost(bool, optional, tag = "1")]
    pub free_equip_summon: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub is_show_new_summon: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub new_summon_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub pool_infos: ::prost::alloc::vec::Vec<SummonPoolInfo>,
    #[prost(int32, optional, tag = "5")]
    pub total_summon_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSummonInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LuckyBagResult {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_new: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub cur_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub return_materials: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenLuckyBagReply {
    #[prost(message, repeated, tag = "1")]
    pub lucky_bag_results: ::prost::alloc::vec::Vec<LuckyBagResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenLuckyBagRequest {
    #[prost(int32, optional, tag = "1")]
    pub lucky_bag_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonQueryTokenReply {
    #[prost(string, optional, tag = "1")]
    pub token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonQueryTokenRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonResult {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_new: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub duplicate_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub equip_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub return_materials: ::prost::alloc::vec::Vec<MaterialData>,
    #[prost(int32, optional, tag = "6")]
    pub lucky_bag_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub limited_ticket_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonReply {
    #[prost(message, repeated, tag = "1")]
    pub summon_result: ::prost::alloc::vec::Vec<SummonResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonRequest {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub step_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AchievementTaskInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub has_finish: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub new: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub finish_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAchievementInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<AchievementTaskInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAchievementInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadNewAchievementReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadNewAchievementRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowAchievementReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "2")]
    pub group_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowAchievementRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "2")]
    pub group_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAchievementPush {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<AchievementTaskInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDialogInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDialogInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordDialogInfoReplay {
    #[prost(int32, optional, tag = "1")]
    pub dialog_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordDialogInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub dialog_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AntiqueInfo {
    #[prost(int32, optional, tag = "1")]
    pub antique_id: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub get_time: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AntiqueUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub antiques: ::prost::alloc::vec::Vec<AntiqueInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAntiqueInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub antiques: ::prost::alloc::vec::Vec<AntiqueInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAntiqueInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleInfo {
    #[prost(int32, optional, tag = "1")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub star: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub max_star: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "5")]
    pub hero_group_select: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub element_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeforeStartWeekwalkBattleReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeforeStartWeekwalkBattleRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeWeekwalkHeroGroupSelectReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub select: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeWeekwalkHeroGroupSelectRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub battle_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub select: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkElementInfo {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_finish: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub index: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "4")]
    pub historylist: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub visible: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkHeroInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cd: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub scene_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub is_finish: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub is_finished: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub buff_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_show_buff: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_show_finished: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_show_select_cd: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "9")]
    pub battle_infos: ::prost::alloc::vec::Vec<BattleInfo>,
    #[prost(message, repeated, tag = "10")]
    pub element_infos: ::prost::alloc::vec::Vec<WeekwalkElementInfo>,
    #[prost(message, repeated, tag = "11")]
    pub hero_infos: ::prost::alloc::vec::Vec<WeekwalkHeroInfo>,
    #[prost(int32, repeated, packed = "false", tag = "12")]
    pub story_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkInfo {
    #[prost(int32, optional, tag = "1")]
    pub time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub map_info: ::prost::alloc::vec::Vec<MapInfo>,
    #[prost(int32, optional, tag = "4")]
    pub max_layer: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub issue_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_pop_deep_rule: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_open_deep: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_pop_shallow_settle: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_pop_deep_settle: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "10")]
    pub deep_progress: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWeekwalkInfoReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<WeekwalkInfo>,
    #[prost(int32, optional, tag = "2")]
    pub time_this_week: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetWeekwalkInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkPopDeepRuleReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkPopDeepRuleRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkPopDeepSettleReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkPopDeepSettleRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkPopShallowSettleReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkPopShallowSettleRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowBuffReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowBuffRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowFinishedReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkShowFinishedRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetLayerReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<WeekwalkInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetLayerRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub battle_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectNotCdHeroReply {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectNotCdHeroRequest {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogHistoryReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "2")]
    pub historylist: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogHistoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "2")]
    pub historylist: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub option: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkDialogRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub option: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkGeneralReply {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkGeneralRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkHeroRecommendReply {
    #[prost(message, repeated, tag = "1")]
    pub racommends: ::prost::alloc::vec::Vec<EpisodeHeroRecommendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeekwalkHeroRecommendRequest {
    #[prost(int32, optional, tag = "1")]
    pub element_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub layer_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeekwalkInfoUpdatePush {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<WeekwalkInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BonusSceneNo {
    #[prost(int32, optional, tag = "1")]
    pub bonus_scene_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub options: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractNo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub status2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub posy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub dir: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreMapNo {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub dir: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub interacts: ::prost::alloc::vec::Vec<ExploreInteractNo>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub area_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, optional, tag = "7")]
    pub move_nodes: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "8")]
    pub is_first_enter: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9")]
    pub challenge_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreItemNo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub quantity: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInfoNo {
    #[prost(message, optional, tag = "1")]
    pub explore_map: ::core::option::Option<ExploreMapNo>,
    #[prost(message, repeated, tag = "2")]
    pub explore_items: ::prost::alloc::vec::Vec<ExploreItemNo>,
    #[prost(int64, optional, tag = "3")]
    pub use_item_uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeMapReply {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub explore_info: ::core::option::Option<ExploreInfoNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeMapRequest {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreChapterSimpleNo {
    #[prost(int32, optional, tag = "1")]
    pub chapter_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub archive_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "3")]
    pub bonus_scene: ::prost::alloc::vec::Vec<BonusSceneNo>,
    #[prost(bool, optional, tag = "4")]
    pub is_finish: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreInteractRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreItemChangePush {
    #[prost(message, repeated, tag = "1")]
    pub explore_items: ::prost::alloc::vec::Vec<ExploreItemNo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreItemInteractReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreItemInteractRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreMapSimpleNo {
    #[prost(int32, optional, tag = "1")]
    pub map_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub bonus_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub gold_coin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub purple_coin: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub bonus_num_total: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub gold_coin_total: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub purple_coin_total: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "8")]
    pub bonus_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreMoveReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreMoveRequest {
    #[prost(int32, optional, tag = "1")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub posy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub interact_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreStep {
    #[prost(string, optional, tag = "1")]
    pub param: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExploreStepPush {
    #[prost(message, repeated, tag = "1")]
    pub steps: ::prost::alloc::vec::Vec<ExploreStep>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreUseItemReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExploreUseItemRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub posx: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub posy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub interact_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetExploreInfoReply {
    #[prost(message, optional, tag = "1")]
    pub explore_info: ::core::option::Option<ExploreInfoNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetExploreInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetExploreSimpleInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub last_map_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub chapter_simple: ::prost::alloc::vec::Vec<ExploreChapterSimpleNo>,
    #[prost(message, repeated, tag = "3")]
    pub map_simple: ::prost::alloc::vec::Vec<ExploreMapSimpleNo>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub unlock_map_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "5")]
    pub is_show_bag: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetExploreSimpleInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetExploreReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetExploreRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistBossNo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub talent_point: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub talent_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeNo {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub status: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "4")]
    pub assist_boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LayerNo {
    #[prost(int32, optional, tag = "1")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub curr_high_score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub history_high_score: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub episode_n_os: ::prost::alloc::vec::Vec<EpisodeNo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TowerNo {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub pass_layer_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub layer_n_os: ::prost::alloc::vec::Vec<LayerNo>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub open_sp_layer_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "6")]
    pub history_high_score: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerOpenNo {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub round: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub next_time: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTowerInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub tower_opens: ::prost::alloc::vec::Vec<TowerOpenNo>,
    #[prost(message, repeated, tag = "2")]
    pub towers: ::prost::alloc::vec::Vec<TowerNo>,
    #[prost(message, repeated, tag = "3")]
    pub assist_bosses: ::prost::alloc::vec::Vec<AssistBossNo>,
    #[prost(int32, optional, tag = "4")]
    pub mop_up_times: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTowerInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartTowerBattleReply {
    #[prost(message, optional, tag = "1")]
    pub start_dungeon_reply: ::core::option::Option<StartDungeonReply>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub difficulty: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartTowerBattleRequest {
    #[prost(message, optional, tag = "1")]
    pub start_dungeon_request: ::core::option::Option<StartDungeonRequest>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub difficulty: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerActiveTalentReply {
    #[prost(int32, optional, tag = "1")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub talent_point: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerActiveTalentRequest {
    #[prost(int32, optional, tag = "1")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TowerBattleFinishPush {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub difficulty: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub boss_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub team_level: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "8")]
    pub layer: ::core::option::Option<LayerNo>,
    #[prost(int32, optional, tag = "9")]
    pub history_high_score: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TowerLayerUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub layers: ::prost::alloc::vec::Vec<LayerNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerMopUpReply {
    #[prost(int32, optional, tag = "1")]
    pub times: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub mop_up_times: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerMopUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub times: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TowerResetSubEpisodeReply {
    #[prost(int32, optional, tag = "1")]
    pub tower_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub sub_episode: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "5")]
    pub layer_info: ::core::option::Option<LayerNo>,
    #[prost(int32, optional, tag = "6")]
    pub history_high_score: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerResetSubEpisodeRequest {
    #[prost(int32, optional, tag = "1")]
    pub tower_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub tower_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub sub_episode: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerResetTalentReply {
    #[prost(int32, optional, tag = "1")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub talent_point: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TowerResetTalentRequest {
    #[prost(int32, optional, tag = "1")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub talent_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOtherPlayerCardInfoReply {
    #[prost(message, optional, tag = "1")]
    pub player_info: ::core::option::Option<PlayerInfo>,
    #[prost(message, optional, tag = "2")]
    pub player_card_info: ::core::option::Option<PlayerCardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOtherPlayerCardInfoRequest {
    #[prost(int64, optional, tag = "1")]
    pub user_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerCardInfoReply {
    #[prost(message, optional, tag = "1")]
    pub player_card_info: ::core::option::Option<PlayerCardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerCardInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerCardInfoPush {
    #[prost(message, optional, tag = "1")]
    pub player_card_info: ::core::option::Option<PlayerCardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardBaseSettingReply {
    #[prost(string, optional, tag = "1")]
    pub base_setting: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardBaseSettingRequest {
    #[prost(string, optional, tag = "1")]
    pub base_setting: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlayerCardCritterReply {
    #[prost(int32, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlayerCardCritterRequest {
    #[prost(int32, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardHeroCoverReply {
    #[prost(string, optional, tag = "1")]
    pub hero_cover: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardHeroCoverRequest {
    #[prost(string, optional, tag = "1")]
    pub hero_cover: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardProgressSettingReply {
    #[prost(string, optional, tag = "1")]
    pub progress_setting: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardProgressSettingRequest {
    #[prost(string, optional, tag = "1")]
    pub progress_setting: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardShowAchievementReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "2")]
    pub group_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardShowAchievementRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "2")]
    pub group_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardShowSettingReply {
    #[prost(string, repeated, tag = "1")]
    pub show_settings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerCardShowSettingRequest {
    #[prost(string, repeated, tag = "1")]
    pub show_settings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlayerCardThemeReply {
    #[prost(int32, optional, tag = "1")]
    pub theme_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlayerCardThemeRequest {
    #[prost(int32, optional, tag = "1")]
    pub theme_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddBlacklistReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddBlacklistRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendInfo {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub level: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub portrait: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "5")]
    pub time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "7")]
    pub infos: ::prost::alloc::vec::Vec<HeroInfo>,
    #[prost(int32, optional, tag = "8")]
    pub bg: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AgreeAllReply {
    #[prost(message, repeated, tag = "1")]
    pub apply_list: ::prost::alloc::vec::Vec<FriendInfo>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub result_code: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AgreeAllRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyReply {
    #[prost(string, optional, tag = "1")]
    pub messsage: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApplyRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlacklistChangePush {
    #[prost(uint64, optional, tag = "1")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub change: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendChangePush {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub is_add: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendDescChangeReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendDescChangeRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetApplyListReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetApplyListRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlacklistReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBlacklistRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendInfoListReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendInfoListRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecommendedFriendsReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRecommendedFriendsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleApplyReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub is_agree: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub messsage: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandleApplyRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub is_agree: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadFriendInfosReply {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub friend_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, repeated, packed = "false", tag = "2")]
    pub black_list_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadFriendInfosRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RejectAllReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RejectAllRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveBlacklistReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveBlacklistRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendReply {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveFriendRequest {
    #[prost(uint64, optional, tag = "1")]
    pub friend_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchReply {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<FriendInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRequest {
    #[prost(string, optional, tag = "1")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroBirthdayReply {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroBirthdayRequest {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonthCardHistory {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub end_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSignInInfoReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub has_sign_in_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "2")]
    pub addup_sign_in_day: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_addup_bonus: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "4")]
    pub open_function_time: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub has_month_card_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "6")]
    pub month_card_history: ::prost::alloc::vec::Vec<MonthCardHistory>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub birthday_hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "8")]
    pub reward_mark: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSignInInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInAddupReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInAddupRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignInHistoryReply {
    #[prost(int32, optional, tag = "1")]
    pub month: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub has_sign_in_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_month_card_days: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub birthday_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInHistoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub month: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignInReply {
    #[prost(int32, optional, tag = "1")]
    pub day: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub birthday_hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInTotalRewardAllReply {
    #[prost(int32, optional, tag = "1")]
    pub mark: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInTotalRewardAllRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInTotalRewardReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub mark: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignInTotalRewardRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyGoodsReply {
    #[prost(int32, required, tag = "1")]
    pub store_id: i32,
    #[prost(int32, required, tag = "2")]
    pub goods_id: i32,
    #[prost(int32, required, tag = "3")]
    pub num: i32,
    #[prost(int32, optional, tag = "4")]
    pub select_cost: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyGoodsRequest {
    #[prost(int32, required, tag = "1")]
    pub store_id: i32,
    #[prost(int32, required, tag = "2")]
    pub goods_id: i32,
    #[prost(int32, required, tag = "3")]
    pub num: i32,
    #[prost(int32, optional, tag = "4")]
    pub select_cost: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GoodsInfo {
    #[prost(int32, required, tag = "1")]
    pub goods_id: i32,
    #[prost(int32, required, tag = "2")]
    pub buy_count: i32,
    #[prost(int64, optional, tag = "3")]
    pub offline_time: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreInfo {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
    #[prost(int64, required, tag = "2")]
    pub next_refresh_time: i64,
    #[prost(message, repeated, tag = "3")]
    pub goods_infos: ::prost::alloc::vec::Vec<GoodsInfo>,
    #[prost(int64, optional, tag = "4")]
    pub offline_time: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoreInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub store_infos: ::prost::alloc::vec::Vec<StoreInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoreInfosRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub store_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadStoreNewReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadStoreNewRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub goods_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BgmInfo {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub unlock_time: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub favorite: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub is_read: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBgmInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub bgm_infos: ::prost::alloc::vec::Vec<BgmInfo>,
    #[prost(int32, optional, tag = "2")]
    pub use_bgm_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBgmInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadBgmReply {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadBgmRequest {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetFavoriteBgmReply {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub favorite: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetFavoriteBgmRequest {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub favorite: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetUseBgmReply {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetUseBgmRequest {
    #[prost(int32, optional, tag = "1")]
    pub bgm_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateBgmPush {
    #[prost(message, repeated, tag = "1")]
    pub bgm_infos: ::prost::alloc::vec::Vec<BgmInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BanishCritterReply {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BanishCritterRequest {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelTrainReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelTrainRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterAttribute {
    #[prost(int32, optional, tag = "1")]
    pub attribute_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub value: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterBookInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub unlock_special_skin: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub use_special_skin: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub background: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub unlock_normal_skin: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_new: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterOptionAttribute {
    #[prost(int32, optional, tag = "1")]
    pub attribute_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub value: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_addition: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterOptionInfo {
    #[prost(int32, optional, tag = "1")]
    pub option_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub add_attributes: ::prost::alloc::vec::Vec<CritterOptionAttribute>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterTrainEventInfo {
    #[prost(int32, optional, tag = "1")]
    pub event_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub remain_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub finish_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub add_attributes: ::prost::alloc::vec::Vec<CritterAttribute>,
    #[prost(message, repeated, tag = "5")]
    pub options: ::prost::alloc::vec::Vec<CritterOptionInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterTrainInfo {
    #[prost(int32, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub events: ::prost::alloc::vec::Vec<CritterTrainEventInfo>,
    #[prost(int32, optional, tag = "5")]
    pub fast_forward_time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterSkillInfo {
    #[prost(string, repeated, tag = "1")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterWorkInfo {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub critter_slot_id: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "3")]
    pub can_effected_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterRestInfo {
    #[prost(int64, optional, tag = "1")]
    pub building_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub rest_slot_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterTagAttributeRate {
    #[prost(int32, optional, tag = "1")]
    pub attribute_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub rate: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterInfo {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub create_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub efficiency: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub patience: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub lucky: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub efficiency_incr_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub patience_incr_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub lucky_incr_rate: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub special_skin: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "11")]
    pub current_mood: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "12")]
    pub lock: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub finish_train: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "14")]
    pub train_info: ::core::option::Option<CritterTrainInfo>,
    #[prost(message, optional, tag = "15")]
    pub skill_info: ::core::option::Option<CritterSkillInfo>,
    #[prost(message, optional, tag = "16")]
    pub work_info: ::core::option::Option<CritterWorkInfo>,
    #[prost(bool, optional, tag = "17")]
    pub is_high_quality: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "18")]
    pub rest_info: ::core::option::Option<CritterRestInfo>,
    #[prost(message, repeated, tag = "19")]
    pub tag_attribute_rates: ::prost::alloc::vec::Vec<CritterTagAttributeRate>,
    #[prost(int32, optional, tag = "20")]
    pub train_hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21")]
    pub total_finish_count: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "22")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterGetInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub critter_infos: ::prost::alloc::vec::Vec<CritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterGetInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterInfoPush {
    #[prost(message, repeated, tag = "1")]
    pub critter_infos: ::prost::alloc::vec::Vec<CritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CritterMoodInfo {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub current_mood: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterRenameReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CritterRenameRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EventOptionInfo {
    #[prost(int32, optional, tag = "1")]
    pub option_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FastForwardTrainReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FastForwardTrainRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTrainCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub total_finish_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTrainCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GainGuideCritterReply {
    #[prost(int32, optional, tag = "1")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "3")]
    pub uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GainGuideCritterRequest {
    #[prost(int32, optional, tag = "1")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCritterBookInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub book_infos: ::prost::alloc::vec::Vec<CritterBookInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCritterBookInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RealCritterAttributeInfo {
    #[prost(int64, optional, tag = "1")]
    pub critter_uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub is_sp_skill_effect: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub efficiency: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub mood_change_speed: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub cri_rate: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "6")]
    pub skill_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRealCritterAttributeReply {
    #[prost(message, repeated, tag = "1")]
    pub attribute_infos: ::prost::alloc::vec::Vec<RealCritterAttributeInfo>,
    #[prost(int32, optional, tag = "2")]
    pub building_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_preview: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRealCritterAttributeRequest {
    #[prost(int32, optional, tag = "1")]
    pub building_id: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "2")]
    pub critter_uids: ::prost::alloc::vec::Vec<i64>,
    #[prost(bool, optional, tag = "3")]
    pub is_preview: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncubateCritterPreviewReply {
    #[prost(int64, optional, tag = "1")]
    pub parent1: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub parent2: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "3")]
    pub childes: ::prost::alloc::vec::Vec<CritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IncubateCritterPreviewRequest {
    #[prost(int64, optional, tag = "1")]
    pub parent1: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub parent2: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncubateCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub parent1: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub parent2: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "3")]
    pub childes: ::prost::alloc::vec::Vec<CritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IncubateCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub parent1: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub parent2: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub lock: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "2")]
    pub lock: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkCritterBookNewReadReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkCritterBookNewReadRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RealCritterAttributePush {
    #[prost(message, repeated, tag = "1")]
    pub attribute_infos: ::prost::alloc::vec::Vec<RealCritterAttributeInfo>,
    #[prost(int32, optional, tag = "2")]
    pub building_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_preview: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RefreshBuildingCritterAttibutesReply {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshBuildingCritterAttibutesRequest {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub building_uids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshCritterMoodReply {
    #[prost(message, repeated, tag = "1")]
    pub critter_mood_infos: ::prost::alloc::vec::Vec<CritterMoodInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RefreshCritterMoodRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetSummonCritterPoolReply {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetSummonCritterPoolRequest {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectEventOptionReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub event_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub option_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectEventOptionRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub event_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub option_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectMultiEventOptionReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub event_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub infos: ::prost::alloc::vec::Vec<EventOptionInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectMultiEventOptionRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub event_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub infos: ::prost::alloc::vec::Vec<EventOptionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCritterBookBackgroundReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub background: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCritterBookBackgroundRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub background: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCritterBookUseSpecialSkinReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub use_special_skin: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCritterBookUseSpecialSkinRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub use_special_skin: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartTrainCritterPreviewReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrainCritterPreviewRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrainCritterReply {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrainCritterRequest {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub hero_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub guide_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub step: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonCritterPoolInfo {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub has_summon_critter: ::prost::alloc::vec::Vec<M2qEntry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonCritterInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub pool_infos: ::prost::alloc::vec::Vec<SummonCritterPoolInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonCritterInfoRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonCritterReply {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub has_summon_critter: ::prost::alloc::vec::Vec<M2qEntry>,
    #[prost(message, repeated, tag = "4")]
    pub critter_infos: ::prost::alloc::vec::Vec<CritterInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonCritterRequest {
    #[prost(int32, optional, tag = "1")]
    pub pool_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoReadMailPush {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMailBatchReply {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteMailBatchRequest {
    #[prost(uint32, optional, tag = "1")]
    pub r#type: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMailsPush {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mail {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub mail_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub attachment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub state: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "6")]
    pub create_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "7")]
    pub sender: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub copy: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "11")]
    pub expire_time: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "12")]
    pub sender_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "13")]
    pub jump_title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub jump: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllMailsReply {
    #[prost(message, repeated, tag = "1")]
    pub mails: ::prost::alloc::vec::Vec<Mail>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllMailsRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMailJumpReply {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMailJumpRequest {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewMailPush {
    #[prost(message, optional, tag = "1")]
    pub mail: ::core::option::Option<Mail>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadMailBatchReply {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub incr_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadMailBatchRequest {
    #[prost(uint32, optional, tag = "1")]
    pub r#type: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadMailReply {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadMailRequest {
    #[prost(uint64, optional, tag = "1")]
    pub incr_id: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityInfo {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "4")]
    pub online: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_new_stage: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub current_stage: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub is_unlock: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_receive_all_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityNewStageReadReply {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityNewStageReadRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndActivityPush {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub activity_infos: ::prost::alloc::vec::Vec<ActivityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActivityInfosRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityInfosWithParamReply {
    #[prost(message, repeated, tag = "1")]
    pub activity_infos: ::prost::alloc::vec::Vec<ActivityInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityInfosWithParamRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub activity_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockPermanentReply {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockPermanentRequest {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateActivityPush {
    #[prost(message, optional, tag = "1")]
    pub activity_info: ::core::option::Option<ActivityInfo>,
    #[prost(int32, optional, tag = "2")]
    pub time: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatperElementInfo {
    #[prost(int32, optional, tag = "1")]
    pub element: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dialog_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Handbook {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_read: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHandbookInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<Handbook>,
    #[prost(message, repeated, tag = "2")]
    pub element_info: ::prost::alloc::vec::Vec<ChatperElementInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHandbookInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandbookReadReply {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandbookReadRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTaskPush {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub task_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishAllTaskReply {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub min_type_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub task_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "4")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishAllTaskRequest {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub min_type_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub task_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "4")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishReadTaskReply {
    #[prost(int32, optional, tag = "1")]
    pub task_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishReadTaskRequest {
    #[prost(int32, optional, tag = "1")]
    pub task_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTaskReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub finish_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTaskRequest {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTaskActivityBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTaskActivityBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub define_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Task {
    #[prost(int32, required, tag = "1")]
    pub id: i32,
    #[prost(int32, required, tag = "2")]
    pub progress: i32,
    #[prost(bool, required, tag = "3")]
    pub has_finished: bool,
    #[prost(int32, optional, tag = "4")]
    pub finish_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub expiry_time: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaskActivityInfo {
    #[prost(int32, required, tag = "1")]
    pub type_id: i32,
    #[prost(int32, required, tag = "2")]
    pub define_id: i32,
    #[prost(int32, required, tag = "3")]
    pub value: i32,
    #[prost(int32, optional, tag = "4")]
    pub gain_value: ::core::option::Option<i32>,
    #[prost(int32, required, tag = "5")]
    pub expiry_time: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskInfoReply {
    #[prost(message, repeated, tag = "1")]
    pub task_info: ::prost::alloc::vec::Vec<Task>,
    #[prost(message, repeated, tag = "2")]
    pub activity_info: ::prost::alloc::vec::Vec<TaskActivityInfo>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub type_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskInfoRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub type_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTaskPush {
    #[prost(message, repeated, tag = "1")]
    pub task_info: ::prost::alloc::vec::Vec<Task>,
    #[prost(message, repeated, tag = "2")]
    pub activity_info: ::prost::alloc::vec::Vec<TaskActivityInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpBuyLevelReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpBuyLevelRequset {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpMarkFirstShowReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_sp: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpMarkFirstShowRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_sp: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpOpenPush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpPayPush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pay_status: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpScoreBonusInfo {
    #[prost(int32, optional, tag = "1")]
    pub level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub has_getfree_bonus: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub has_get_pay_bonus: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub has_get_spfree_bonus: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub has_get_sp_pay_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpScoreUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub weekly_score: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BpSelfSelectBonus {
    #[prost(int32, optional, tag = "1")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub index: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBpBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub score_bonus_info: ::prost::alloc::vec::Vec<BpScoreBonusInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBpBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub pay_bonus: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub is_sp: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBpInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub pay_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "6")]
    pub task_info: ::prost::alloc::vec::Vec<Task>,
    #[prost(message, repeated, tag = "7")]
    pub score_bonus_info: ::prost::alloc::vec::Vec<BpScoreBonusInfo>,
    #[prost(int32, optional, tag = "8")]
    pub weekly_score: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub first_show: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "10")]
    pub has_get_self_select_bonus: ::prost::alloc::vec::Vec<BpSelfSelectBonus>,
    #[prost(bool, optional, tag = "11")]
    pub sp_first_show: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBpInfoRequest {
    #[prost(bool, optional, tag = "1")]
    pub get_task: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSelfSelectBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub index: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSelfSelectBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub index: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyDoubleBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub has_get_double_task_bonus: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "3")]
    pub double_bonus: ::prost::alloc::vec::Vec<MaterialData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyDoubleBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DropInfo {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub total_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub current_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackSignInInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub state: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TurnbackInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub tasks: ::prost::alloc::vec::Vec<Task>,
    #[prost(int32, optional, tag = "3")]
    pub bonus_point: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub first_show: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub has_get_task_bonus: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "6")]
    pub sign_in_day: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "7")]
    pub sign_in_infos: ::prost::alloc::vec::Vec<TurnbackSignInInfo>,
    #[prost(bool, optional, tag = "8")]
    pub once_bonus: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub remain_addition_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub leave_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub month_card_added_buy_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub version: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "15")]
    pub buy_double_bonus: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "16")]
    pub drop_infos: ::prost::alloc::vec::Vec<DropInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTurnbackInfoReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<TurnbackInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTurnbackInfoRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RefreshOnlineTaskReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RefreshOnlineTaskRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackAdditionPush {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub remain_addition_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TurnbackBonusPointReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub bonus_point_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_task_bonus: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackBonusPointRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub bonus_point_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackFirstShowReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackFirstShowRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackOnceBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackOnceBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackSignInReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub day: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TurnbackSignInRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub day: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SettingInfo {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub param: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSettingInfosReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<SettingInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSettingInfosRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSettingInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub param: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSettingInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub param: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeTicketReply {
    #[prost(int32, optional, tag = "1")]
    pub left_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub today_exchange: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeTicketRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeBonusReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeBonusRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "4")]
    pub gain_reward: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroStoryInfo {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub get_reward: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub get_score_bonus: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "5")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub challenge_wave: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub challenge_max_wave: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub get_challenge_reward: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub unlock: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "10")]
    pub dispatch_infos: ::prost::alloc::vec::Vec<HeroStoryDispatchInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroStoryBonusReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<HeroStoryInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroStoryBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryTime {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub start_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub end_time: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub start_time_resident: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub end_time_resident: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroStoryReply {
    #[prost(message, repeated, tag = "1")]
    pub story_infos: ::prost::alloc::vec::Vec<HeroStoryInfo>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub new_story_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "3")]
    pub times: ::prost::alloc::vec::Vec<HeroStoryTime>,
    #[prost(int32, optional, tag = "4")]
    pub left_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub today_exchange: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub week_progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub week_has_get: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeroStoryRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetScoreBonusReply {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub get_score_bonus: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetScoreBonusRequest {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub bonus_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchCompleteReply {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub dispatch_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchCompleteRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub dispatch_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchReply {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub dispatch_id: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "5")]
    pub dispatch_infos: ::prost::alloc::vec::Vec<HeroStoryDispatchInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub dispatch_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub hero_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchResetReply {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub dispatch_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryDispatchResetRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub dispatch_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryScorePush {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub wave: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_wave: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryTicketPush {
    #[prost(int32, optional, tag = "1")]
    pub left_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub today_exchange: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeroStoryUpdatePush {
    #[prost(message, repeated, tag = "1")]
    pub unlock_infos: ::prost::alloc::vec::Vec<HeroStoryInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryWeekTaskGetReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryWeekTaskGetRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeroStoryWeekTaskPush {
    #[prost(int32, optional, tag = "1")]
    pub week_progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub week_has_get: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlocHeroStoryReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<HeroStoryInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlocHeroStoryRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateHeroStoryStatusReply {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateHeroStoryStatusRequest {
    #[prost(int32, optional, tag = "1")]
    pub story_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act160MissionInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub state: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act160FinishMissionReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub act160_info: ::core::option::Option<Act160MissionInfo>,
    #[prost(bool, optional, tag = "3")]
    pub is_read_mail: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act160FinishMissionRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act160GetInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub act160_infos: ::prost::alloc::vec::Vec<Act160MissionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act160GetInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act160UpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub act160_info: ::core::option::Option<Act160MissionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186BTypeGameInfo {
    #[prost(int32, optional, tag = "1")]
    pub b_type_retry_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186BTypeGamePlayReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186BTypeGamePlayRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186GameInfo {
    #[prost(int32, optional, tag = "1")]
    pub game_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_type_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub expire_time: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4")]
    pub b_type_game_info: ::core::option::Option<Act186BTypeGameInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186Info {
    #[prost(int32, optional, tag = "1")]
    pub current_stage: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub get_milestone_progress: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "3")]
    pub get_daily_collection: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub get_onece_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186LikeInfo {
    #[prost(int32, optional, tag = "1")]
    pub like_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub value: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act186LikePush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub like_infos: ::prost::alloc::vec::Vec<Act186LikeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act186TaskInfo {
    #[prost(int32, optional, tag = "1")]
    pub task_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub progress: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub has_get_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act186TaskPush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub act186_tasks: ::prost::alloc::vec::Vec<Act186TaskInfo>,
    #[prost(message, repeated, tag = "3")]
    pub delete_tasks: ::prost::alloc::vec::Vec<Act186TaskInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAct186ATypeGameReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAct186ATypeGameRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAct186BTypeGameReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAct186BTypeGameRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub game_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAct186TaskReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub task_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAct186TaskRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub task_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186DailyCollectionReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186DailyCollectionRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAct186InfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub info: ::core::option::Option<Act186Info>,
    #[prost(message, repeated, tag = "3")]
    pub task_infos: ::prost::alloc::vec::Vec<Act186TaskInfo>,
    #[prost(message, repeated, tag = "4")]
    pub like_infos: ::prost::alloc::vec::Vec<Act186LikeInfo>,
    #[prost(message, repeated, tag = "5")]
    pub game_infos: ::prost::alloc::vec::Vec<Act186GameInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186InfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186MilestoneRewardReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub get_milestone_progress: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186MilestoneRewardRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186OnceBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186OnceBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act147Goods {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub remain_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub belong_store_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub pool_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyAct147GoodsReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub goods_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub remain_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub store_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyAct147GoodsRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub goods_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub buy_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub store_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAct147InfosReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub act147_goods: ::prost::alloc::vec::Vec<Act147Goods>,
    #[prost(int32, optional, tag = "3")]
    pub total_remain_count: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct147InfosRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptAct186SpBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub act186_activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptAct186SpBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub act186_activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act101Info {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub state: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act101SpInfo {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub state: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101BonusReply {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101BonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub id: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Get101InfosReply {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<Act101Info>,
    #[prost(uint32, optional, tag = "2")]
    pub login_count: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub sp_infos: ::prost::alloc::vec::Vec<Act101SpInfo>,
    #[prost(bool, optional, tag = "5")]
    pub got_once_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101InfosRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101OnceBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101OnceBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101SpBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get101SpBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186SpBonusInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub act186_activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub sp_bonus_stage: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct186SpBonusInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub act186_activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct189InfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub has_get_once_bonus: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct189InfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct189OnceBonusReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct189OnceBonusRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act182AutoChessGameInfo {
    #[prost(int32, optional, tag = "1")]
    pub module: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub start: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub curr_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub master_id_box: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "6")]
    pub select_master_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub refreshed: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act182GetRankRewardReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub rank: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act182GetRankRewardRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub rank: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act182HistoryInfo {
    #[prost(string, optional, tag = "1")]
    pub auto_chess_count: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub max_rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub survival_total_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub win_count: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub total_hurt: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "6")]
    pub pass_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act182Info {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub pass_episode_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "3")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub score: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "5")]
    pub game_infos: ::prost::alloc::vec::Vec<Act182AutoChessGameInfo>,
    #[prost(message, optional, tag = "6")]
    pub history_info: ::core::option::Option<Act182HistoryInfo>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub gain_reward_rank: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "8")]
    pub double_score_times: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act182InfoPush {
    #[prost(message, optional, tag = "1")]
    pub act182_info: ::core::option::Option<Act182Info>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act182RefreshMasterReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub master_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act182RefreshMasterRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAct182InfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub act182_info: ::core::option::Option<Act182Info>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct182InfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAct182RandomMasterReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub master_id: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct182RandomMasterRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183BadgeNumUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub badge_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183HeroNo {
    #[prost(int64, optional, tag = "1")]
    pub hero_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub trial_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183RepressNo {
    #[prost(int32, optional, tag = "1")]
    pub rule_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub hero_index: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183EpisodeNo {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub pass_order: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub heroes: ::prost::alloc::vec::Vec<Act183HeroNo>,
    #[prost(int32, optional, tag = "5")]
    pub use_badge_num: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub unlock_conditions: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub choose_conditions: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "8")]
    pub repress: ::core::option::Option<Act183RepressNo>,
    #[prost(string, optional, tag = "9")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183FightResultNo {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub heroes: ::prost::alloc::vec::Vec<Act183HeroNo>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub unlock_conditions: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183EpisodeRecordNo {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub pass_order: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub heroes: ::prost::alloc::vec::Vec<Act183HeroNo>,
    #[prost(int32, optional, tag = "4")]
    pub use_badge_num: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub unlock_conditions: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub choose_conditions: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "7")]
    pub repress: ::core::option::Option<Act183RepressNo>,
    #[prost(string, optional, tag = "8")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183GroupRecordNo {
    #[prost(string, optional, tag = "1")]
    pub player_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub group_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "4")]
    pub finished_time: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "5")]
    pub episode_list: ::prost::alloc::vec::Vec<Act183EpisodeRecordNo>,
    #[prost(int32, optional, tag = "6")]
    pub all_round: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183BattleFinishPush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub episode: ::core::option::Option<Act183EpisodeNo>,
    #[prost(bool, optional, tag = "3")]
    pub win: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub group_finished: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub re_challenge: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "6")]
    pub fight_result: ::core::option::Option<Act183FightResultNo>,
    #[prost(message, optional, tag = "7")]
    pub record: ::core::option::Option<Act183GroupRecordNo>,
    #[prost(string, optional, tag = "8")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183ChooseRepressReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub repress: ::core::option::Option<Act183RepressNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183ChooseRepressRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub rule_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub hero_index: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183GroupNo {
    #[prost(int32, optional, tag = "1")]
    pub group_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub episode_list: ::prost::alloc::vec::Vec<Act183EpisodeNo>,
    #[prost(bool, optional, tag = "3")]
    pub finished: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183Info {
    #[prost(int32, optional, tag = "1")]
    pub badge_num: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub group_list: ::prost::alloc::vec::Vec<Act183GroupNo>,
    #[prost(string, optional, tag = "3")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183GetInfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub act_info: ::core::option::Option<Act183Info>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183GetInfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183GetRecordReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub group_list: ::prost::alloc::vec::Vec<Act183GroupRecordNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183GetRecordRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183ReplaceResultReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub episode: ::core::option::Option<Act183EpisodeNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183ReplaceResultRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183ResetEpisodeReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub group: ::core::option::Option<Act183GroupNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183ResetEpisodeRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act183ResetGroupReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub group: ::core::option::Option<Act183GroupNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act183ResetGroupRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub group_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act128BossDetail {
    #[prost(int32, optional, tag = "1")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub total_point: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_bonus_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "4")]
    pub highest_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub double_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub layer4_total_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub layer4_highest_point: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act128DoublePointReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub double_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub total_point: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub double_num: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act128DoublePointRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act128GetTotalRewardsReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub has_get_bonus_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act128GetTotalRewardsRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub boss_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act128GetTotalSingleRewardReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Act128GetTotalSingleRewardRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub boss_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub reward_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act128InfoUpdatePush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub boss_detail: ::core::option::Option<Act128BossDetail>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Get128InfosReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub boss_detail: ::prost::alloc::vec::Vec<Act128BossDetail>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get128InfosRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct113InfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct113InfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act184EpisodeNo {
    #[prost(int32, optional, tag = "1")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_finished: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub puzzle: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act184EpisodePush {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub episodes: ::prost::alloc::vec::Vec<Act184EpisodeNo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act184FinishEpisodeReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub puzzle: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Act184FinishEpisodeRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub puzzle: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAct184InfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub episodes: ::prost::alloc::vec::Vec<Act184EpisodeNo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAct184InfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvitePlayer {
    #[prost(int64, optional, tag = "1")]
    pub user_id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub portrait: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub role_type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Get201InfoReply {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub is_turnback: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub invite_players: ::prost::alloc::vec::Vec<InvitePlayer>,
    #[prost(string, optional, tag = "4")]
    pub invite_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Get201InfoRequest {
    #[prost(int32, optional, tag = "1")]
    pub activity_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessSkill {
    #[prost(int32, optional, tag = "1")]
    pub skill_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessSkillContainer {
    #[prost(message, repeated, tag = "1")]
    pub skills: ::prost::alloc::vec::Vec<AutoChessSkill>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessBuff {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub layer: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub duration: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessBuffContainer {
    #[prost(message, repeated, tag = "1")]
    pub buffs: ::prost::alloc::vec::Vec<AutoChessBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChess {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub star: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub exp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub max_exp_limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub team_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub status: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "8")]
    pub battle: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "9")]
    pub hp: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "10")]
    pub skill_container: ::core::option::Option<AutoChessSkillContainer>,
    #[prost(message, optional, tag = "11")]
    pub buff_container: ::core::option::Option<AutoChessBuffContainer>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessBuyInfo {
    #[prost(int32, optional, tag = "1")]
    pub chess_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub num: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessBaseInfo {
    #[prost(int32, optional, tag = "1")]
    pub scene_round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub preview_coin: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub preview: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "4")]
    pub buy_infos: ::prost::alloc::vec::Vec<AutoChessBuyInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessItem {
    #[prost(int64, optional, tag = "1")]
    pub uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub freeze: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "4")]
    pub chess: ::core::option::Option<AutoChess>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMallRegion {
    #[prost(int32, optional, tag = "1")]
    pub mall_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<AutoChessItem>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub select_items: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessPosition {
    #[prost(int32, optional, tag = "1")]
    pub index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub team_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub chess: ::core::option::Option<AutoChess>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessWarZone {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub positions: ::prost::alloc::vec::Vec<AutoChessPosition>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMasterAbility {
    #[prost(string, optional, tag = "1")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub extra_int1: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub extra_int2: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub extra_str: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessSkillRoundUseCount {
    #[prost(int32, optional, tag = "1")]
    pub round: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMasterSkill {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub unlock: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub abilities: ::prost::alloc::vec::Vec<AutoChessMasterAbility>,
    #[prost(message, repeated, tag = "4")]
    pub round_use_counts: ::prost::alloc::vec::Vec<AutoChessSkillRoundUseCount>,
    #[prost(bool, optional, tag = "5")]
    pub can_use: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMaster {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub team_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub hp: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub uid: ::core::option::Option<i64>,
    #[prost(message, optional, tag = "5")]
    pub skill: ::core::option::Option<AutoChessMasterSkill>,
    #[prost(message, optional, tag = "6")]
    pub buff_container: ::core::option::Option<AutoChessBuffContainer>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessFight {
    #[prost(int32, optional, tag = "1")]
    pub round: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub war_zones: ::prost::alloc::vec::Vec<AutoChessWarZone>,
    #[prost(message, optional, tag = "3")]
    pub my_side_master: ::core::option::Option<AutoChessMaster>,
    #[prost(message, optional, tag = "4")]
    pub enemy_master: ::core::option::Option<AutoChessMaster>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessEffect {
    #[prost(int32, optional, tag = "1")]
    pub effect_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub target_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub effect_num: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "5")]
    pub extra_data: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "6")]
    pub chess: ::core::option::Option<AutoChess>,
    #[prost(message, optional, tag = "7")]
    pub next_fight_step: ::core::option::Option<AutoChessFightStep>,
    #[prost(message, optional, tag = "8")]
    pub buff: ::core::option::Option<AutoChessBuff>,
    #[prost(int64, repeated, packed = "false", tag = "9")]
    pub target_ids: ::prost::alloc::vec::Vec<i64>,
    #[prost(message, optional, tag = "10")]
    pub region: ::core::option::Option<AutoChessMallRegion>,
    #[prost(message, optional, tag = "11")]
    pub fight: ::core::option::Option<AutoChessFight>,
    #[prost(message, optional, tag = "12")]
    pub master: ::core::option::Option<AutoChessMaster>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessFightStep {
    #[prost(int32, optional, tag = "1")]
    pub action_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub reason_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub from_id: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub to_id: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "5")]
    pub effect: ::prost::alloc::vec::Vec<AutoChessEffect>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessTurn {
    #[prost(message, repeated, tag = "1")]
    pub step: ::prost::alloc::vec::Vec<AutoChessFightStep>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMall {
    #[prost(int64, optional, tag = "1")]
    pub coin: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "2")]
    pub regions: ::prost::alloc::vec::Vec<AutoChessMallRegion>,
    #[prost(int32, optional, tag = "3")]
    pub reward_progress: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub free_refresh_count: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessBuildReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub turn: ::core::option::Option<AutoChessTurn>,
    #[prost(message, optional, tag = "3")]
    pub mall: ::core::option::Option<AutoChessMall>,
    #[prost(message, optional, tag = "4")]
    pub fight: ::core::option::Option<AutoChessFight>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessBuildRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub from_war_zone_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub from_position: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub from_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "6")]
    pub to_war_zone_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub to_position: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "8")]
    pub to_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "9")]
    pub extra_param: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessBuyChessReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub mall: ::core::option::Option<AutoChessMall>,
    #[prost(message, optional, tag = "3")]
    pub turn: ::core::option::Option<AutoChessTurn>,
    #[prost(message, optional, tag = "4")]
    pub fight: ::core::option::Option<AutoChessFight>,
    #[prost(message, optional, tag = "5")]
    pub base_info: ::core::option::Option<AutoChessBaseInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessBuyChessRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub mall_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub item_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub war_zone_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub position: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessEnterFightReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub turn: ::core::option::Option<AutoChessTurn>,
    #[prost(message, optional, tag = "3")]
    pub mall: ::core::option::Option<AutoChessMall>,
    #[prost(message, optional, tag = "4")]
    pub fight: ::core::option::Option<AutoChessFight>,
    #[prost(message, optional, tag = "5")]
    pub base_info: ::core::option::Option<AutoChessBaseInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessEnterFightRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessScene {
    #[prost(int32, optional, tag = "1")]
    pub round: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub fight: ::core::option::Option<AutoChessFight>,
    #[prost(message, optional, tag = "3")]
    pub mall: ::core::option::Option<AutoChessMall>,
    #[prost(message, optional, tag = "6")]
    pub base_info: ::core::option::Option<AutoChessBaseInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessEnterSceneReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub scene: ::core::option::Option<AutoChessScene>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessEnterSceneRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub master_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessFreezeItemReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub mall_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub item_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessFreezeItemRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub mall_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub item_uid: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "4")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessGetSceneReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub scene: ::core::option::Option<AutoChessScene>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessGetSceneRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessGiveUpReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessGiveUpRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMallRegionSelectItemReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub region: ::core::option::Option<AutoChessMallRegion>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessMallRegionSelectItemRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub item_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessMallUpgradePush {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub mall: ::core::option::Option<AutoChessMall>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessPreviewFightReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessPreviewFightRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessRefreshMallReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub turn: ::core::option::Option<AutoChessTurn>,
    #[prost(message, optional, tag = "3")]
    pub mall: ::core::option::Option<AutoChessMall>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessRefreshMallRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessRoundSettlePush {
    #[prost(int64, optional, tag = "1")]
    pub remaining_hp: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub injury: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub star: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub module_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessScenePush {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub scene: ::core::option::Option<AutoChessScene>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessSettlePush {
    #[prost(int64, optional, tag = "1")]
    pub remaining_hp: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub total_injury: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "3")]
    pub is_first_pass: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub score: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub chess_ids: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "8")]
    pub episode_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub master_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub round: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AutoChessUseMasterSkillReply {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub turn: ::core::option::Option<AutoChessTurn>,
    #[prost(message, optional, tag = "3")]
    pub skill: ::core::option::Option<AutoChessMasterSkill>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AutoChessUseMasterSkillRequest {
    #[prost(int32, optional, tag = "1")]
    pub module_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub skill_id: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IntelBox {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub clue_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvestigateInfo {
    #[prost(message, repeated, tag = "1")]
    pub intel_box: ::prost::alloc::vec::Vec<IntelBox>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub clue_ids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInvestigateReply {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<InvestigateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetInvestigateRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvestigateInfoPush {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<InvestigateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutClueReply {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub clue_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutClueRequest {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub clue_id: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CardType {
    None = 0,
    RougeSp = 1,
    SupportNormal = 2,
    SupportEx = 3,
    NotCompose = 4,
    CardDeckUseActPoint = 5,
}
impl CardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CardType_NONE",
            Self::RougeSp => "ROUGE_SP",
            Self::SupportNormal => "SUPPORT_NORMAL",
            Self::SupportEx => "SUPPORT_EX",
            Self::NotCompose => "NOT_COMPOSE",
            Self::CardDeckUseActPoint => "CARD_DECK_USE_ACT_POINT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CardType_NONE" => Some(Self::None),
            "ROUGE_SP" => Some(Self::RougeSp),
            "SUPPORT_NORMAL" => Some(Self::SupportNormal),
            "SUPPORT_EX" => Some(Self::SupportEx),
            "NOT_COMPOSE" => Some(Self::NotCompose),
            "CARD_DECK_USE_ACT_POINT" => Some(Self::CardDeckUseActPoint),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CardStatus {
    StatusNone = 0,
    StatusPlaysetgray = 1,
}
impl CardStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusNone => "STATUS_NONE",
            Self::StatusPlaysetgray => "STATUS_PLAYSETGRAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_NONE" => Some(Self::StatusNone),
            "STATUS_PLAYSETGRAY" => Some(Self::StatusPlaysetgray),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActType {
    Skill = 1,
    Buff = 2,
    Effect = 3,
    Changehero = 4,
    Changewave = 5,
}
impl ActType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Skill => "SKILL",
            Self::Buff => "BUFF",
            Self::Effect => "EFFECT",
            Self::Changehero => "CHANGEHERO",
            Self::Changewave => "CHANGEWAVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SKILL" => Some(Self::Skill),
            "BUFF" => Some(Self::Buff),
            "EFFECT" => Some(Self::Effect),
            "CHANGEHERO" => Some(Self::Changehero),
            "CHANGEWAVE" => Some(Self::Changewave),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CustomDataType {
    /// not sure if this exists
    None = 0,
}
impl CustomDataType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CustomDataType_None",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CustomDataType_None" => Some(Self::None),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightActType {
    Normal = 1,
    Sp = 2,
    Season2 = 3,
}
impl FightActType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Normal => "Normal",
            Self::Sp => "Sp",
            Self::Season2 => "Season2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Normal" => Some(Self::Normal),
            "Sp" => Some(Self::Sp),
            "Season2" => Some(Self::Season2),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightType {
    None = 1,
    Dungeon = 2,
    DungeonRecord = 3,
}
impl FightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FightType_None",
            Self::Dungeon => "Dungeon",
            Self::DungeonRecord => "DungeonRecord",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FightType_None" => Some(Self::None),
            "Dungeon" => Some(Self::Dungeon),
            "DungeonRecord" => Some(Self::DungeonRecord),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdId {
    /// / === framework.network.socket.system_cmd ===
    /// / Original name: Login = 1;
    LoginRequestCmd = 1,
    /// / Original name: GetLostCmdRespRequest = 3;
    ReconnectRequestCmd = 3,
    /// / Original name: ForceLogoutResponse = 4;
    ForceLogoutPushCmd = 4,
    /// / Original name: GetLostCmdRespResponseStartTag = 5;
    GetReconnectStartTagRequestCmd = 5,
    /// / === modules.setting.module_cmd ===
    GetAchievementInfoRequestCmd = -12977,
    UpdateAchievementPushCmd = -23802,
    ShowAchievementRequestCmd = 4196,
    ReadNewAchievementRequestCmd = -6711,
    Act1000GetInfoRequestCmd = 11844,
    Act1000AccountBindBonusRequestCmd = -8727,
    Act1001GetInfoRequestCmd = 646,
    Act1001UpdatePushCmd = 18461,
    Get101InfosRequestCmd = -26993,
    Get101BonusRequestCmd = -26057,
    Get101SpBonusRequestCmd = -20678,
    Get101OnceBonusRequestCmd = 23918,
    GetAct186SpBonusInfoRequestCmd = 2973,
    AcceptAct186SpBonusRequestCmd = 833,
    Get104InfosRequestCmd = 30322,
    BeforeStartAct104BattleRequestCmd = -1274,
    StartAct104BattleRequestCmd = 17779,
    Act104BattleFinishPushCmd = -18639,
    Activity104ItemChangePushCmd = 2686,
    RefreshRetailRequestCmd = -14612,
    OptionalActivity104EquipRequestCmd = -1592,
    ComposeActivity104EquipRequestCmd = 984,
    ChangeFightGroupRequestCmd = -7999,
    MarkActivity104StoryRequestCmd = 13866,
    MarkEpisodeAfterStoryRequestCmd = -10333,
    GetUnlockActivity104EquipIdsRequestCmd = -20690,
    MarkPopSummaryRequestCmd = 15428,
    Get106InfosRequestCmd = -2869,
    Get106OrderBonusRequestCmd = -18609,
    Update106OrderPushCmd = 13419,
    Get107GoodsInfoRequestCmd = 7894,
    Buy107GoodsRequestCmd = -21126,
    Get108InfosRequestCmd = -24330,
    ResetMapRequestCmd = 10808,
    DialogEventSelectRequestCmd = -32535,
    EnterFightEventRequestCmd = -14999,
    EpisodeConfirmRequestCmd = -29682,
    Get108BonusRequestCmd = -23394,
    EpisodeUpdatePushCmd = 30819,
    InfoUpdatePushCmd = 23622,
    GetAct109InfoRequestCmd = 1846,
    Act109StartEpisodeRequestCmd = -31295,
    Act109BeginRoundRequestCmd = -31881,
    Act109StepPushCmd = 9766,
    Act109UseItemRequestCmd = -5338,
    Act109EventEndRequestCmd = -17629,
    Act109AbortRequestCmd = -11262,
    Act109MarkNewEpisodeRedDotRequestCmd = -8822,
    Get111InfosRequestCmd = 13648,
    FinishEpisodeRequestCmd = -14565,
    Act111InfoPushCmd = 8892,
    PushBoxTaskPushCmd = -24063,
    ReceiveTaskRewardRequestCmd = -18283,
    MarkRedDot1039RequestCmd = -32204,
    Get112InfosRequestCmd = 32753,
    Exchange112RequestCmd = -25227,
    Act112TaskPushCmd = 22629,
    ReceiveAct112TaskRewardRequestCmd = -3038,
    GetAct113InfoRequestCmd = 4268,
    Get114InfosRequestCmd = 5427,
    Act114InfoPushCmd = 19490,
    Act114TaskPushCmd = 7849,
    ReceiveAct114TaskRewardRequestCmd = 31526,
    Act114EducateRequestCmd = 3165,
    Act114TravelRequestCmd = 32560,
    Act114MeetingRequestCmd = 1707,
    CheckEventRequestCmd = -2540,
    Act114RestRequestCmd = -22464,
    Act114KeyDayRequestCmd = 9961,
    Act114TestRequestCmd = -16126,
    Act114ResetRequestCmd = -20795,
    BeforeAct114BattleRequestCmd = -27471,
    EnterSchoolRequestCmd = -29606,
    MarkRoundStoryRequestCmd = -18936,
    MarkMeetingPlayUnlockRequestCmd = -18774,
    MarkTravelPlayUnlockRequestCmd = -11825,
    MarkUnlockNewPhotoRedDotRequestCmd = 11617,
    GetAct115InfoRequestCmd = 28720,
    Act115StartEpisodeRequestCmd = 15835,
    Act115BeginRoundRequestCmd = 27921,
    Act115StepPushCmd = -7872,
    Act115EventEndRequestCmd = 30269,
    Act115AbortRequestCmd = -10916,
    Act115BonusRequestCmd = 2795,
    Act115UseSkillRequestCmd = 8688,
    Act115RevertRequestCmd = 7324,
    Get116InfosRequestCmd = -21899,
    UpgradeElementRequestCmd = -25784,
    BuildTrapRequestCmd = 15069,
    PutTrapRequestCmd = 14118,
    Act116InfoUpdatePushCmd = 9013,
    Act117InfoRequestCmd = -29804,
    Act117NegotiateRequestCmd = 14376,
    Act117DealRequestCmd = -22850,
    Act117GetBonusRequestCmd = 5295,
    Act117OrderPushCmd = -25980,
    GetAct120InfoRequestCmd = -22168,
    Act120StartEpisodeRequestCmd = 9363,
    Act120BeginRoundRequestCmd = 17865,
    Act120StepPushCmd = 11256,
    Act120UseItemRequestCmd = 32440,
    Act120EventEndRequestCmd = -16139,
    Act120AbortRequestCmd = 23316,
    Act120CheckPointRequestCmd = 13764,
    Get121InfosRequestCmd = -11247,
    Get121BonusRequestCmd = 28173,
    Act121UpdatePushCmd = 22721,
    GetAct122InfosRequestCmd = 7858,
    Act122StartEpisodeRequestCmd = -14505,
    Act122BeginRoundRequestCmd = 26509,
    Act122StepPushCmd = -7568,
    Act122UseItemRequestCmd = 22268,
    Act122EventEndRequestCmd = -24135,
    Act122AbortRequestCmd = 21080,
    Act122CheckPointRequestCmd = 22408,
    Get123InfosRequestCmd = 26963,
    Act123EnterStageRequestCmd = 5437,
    Act123EndStageRequestCmd = 26358,
    StartAct123BattleRequestCmd = 31797,
    Act123BattleFinishPushCmd = 25811,
    Act123ChangeFightGroupRequestCmd = 31376,
    Act123ItemChangePushCmd = -9259,
    ComposeAct123EquipRequestCmd = -28955,
    DecomposeAct123EquipRequestCmd = -6834,
    Act123OpenCardBagRequestCmd = 18145,
    GetUnlockAct123EquipIdsRequestCmd = 22939,
    Act123ResetOtherStageRequestCmd = -20124,
    Act123ResetHighLayerRequestCmd = -10037,
    GetAct123StageRecordRequestCmd = -26242,
    GetAct124InfosRequestCmd = -19468,
    FinishAct124EpisodeRequestCmd = -11346,
    ReceiveAct124RewardRequestCmd = 14028,
    GetAct125InfosRequestCmd = -363,
    FinishAct125EpisodeRequestCmd = 27792,
    Get126InfosRequestCmd = 18742,
    UpdateProgressRequestCmd = 15535,
    ResetProgressRequestCmd = -26545,
    HoroscopeRequestCmd = -27255,
    GetHoroscopeRequestCmd = 25001,
    UnlockBuffRequestCmd = -9786,
    ExchangeStarPushCmd = 15060,
    Act126InfoUpdatePushCmd = 4439,
    EnterFightRequestCmd = 3463,
    Get128InfosRequestCmd = -8584,
    Act128GetTotalRewardsRequestCmd = 10535,
    Act128GetTotalSingleRewardRequestCmd = 21046,
    Act128DoublePointRequestCmd = 28752,
    Get129InfosRequestCmd = 10521,
    Act129LotteryRequestCmd = -7795,
    Get130InfosRequestCmd = 10289,
    Act130StoryRequestCmd = -7457,
    Act130GeneralRequestCmd = -28196,
    Act130DialogRequestCmd = 2062,
    Act130DialogHistoryRequestCmd = -3616,
    Act130ElementsPushCmd = 27742,
    Act130RestartEpisodeRequestCmd = -1204,
    Act130StartGameRequestCmd = 1862,
    Get131InfosRequestCmd = 29394,
    Act131StoryRequestCmd = 24193,
    Act131GeneralRequestCmd = 32254,
    Act131DialogRequestCmd = -2064,
    Act131DialogHistoryRequestCmd = -4222,
    Act131ElementsPushCmd = -28559,
    Act131RestartEpisodeRequestCmd = -21202,
    BeforeAct131BattleRequestCmd = -18289,
    Get132InfosRequestCmd = -17037,
    Act132UnlockRequestCmd = -24320,
    Get133InfosRequestCmd = 20875,
    Act133BonusRequestCmd = -3221,
    Get134InfosRequestCmd = -13011,
    Act134BonusRequestCmd = 28429,
    Get136InfoRequestCmd = 15422,
    Act136SelectRequestCmd = -28758,
    Get139InfosRequestCmd = -14374,
    Act139DispatchRequestCmd = -6069,
    Act139InterruptDispatchRequestCmd = -31272,
    Act139GainSubHeroTaskRewardRequestCmd = 10570,
    Act139GainHeroTaskRewardRequestCmd = 20864,
    Act139GainExploreRewardRequestCmd = 27166,
    Get140InfosRequestCmd = -14606,
    Act140BuildRequestCmd = -17469,
    Act140SelectBuildRequestCmd = 26527,
    Act140GainProgressRewardRequestCmd = 16620,
    GetAct142InfoRequestCmd = 22768,
    Act142StartEpisodeRequestCmd = -15717,
    Act142BeginRoundRequestCmd = -15919,
    Act142StepPushCmd = 1536,
    Act142UseItemRequestCmd = 14272,
    Act142EventEndRequestCmd = -25859,
    Act142AbortRequestCmd = 12828,
    Act142CheckPointRequestCmd = -20020,
    GetAct142CollectionsRequestCmd = -22685,
    Act142UseFireballRequestCmd = -20206,
    Get144InfosRequestCmd = -3722,
    Act144EnterEpisodeRequestCmd = 26927,
    Act144SelectOptionRequestCmd = 11649,
    Act144NextDayRequestCmd = -14555,
    Act144SettleEpisodeRequestCmd = -27070,
    Act144SettlePushCmd = -8467,
    Act144UpgradeEquipRequestCmd = 4340,
    Act144EpisodePushCmd = -17502,
    Act144ItemChangePushCmd = 14545,
    Get145InfosRequestCmd = 15383,
    Act145RemoveTaskRequestCmd = -11349,
    Act145GameRequestCmd = -2076,
    Act145GetRewardsRequestCmd = -2750,
    Act145ClearGameRecordRequestCmd = 1642,
    Act145InfoUpdatePushCmd = 5462,
    GetAct146InfosRequestCmd = -31048,
    FinishAct146EpisodeRequestCmd = 28598,
    Act146EpisodeBonusRequestCmd = -26948,
    GetAct147InfosRequestCmd = -11943,
    BuyAct147GoodsRequestCmd = 2682,
    Get148InfoRequestCmd = -2225,
    Act148UpLevelRequestCmd = 17709,
    Act148DownLevelRequestCmd = -15520,
    Act148ResetRequestCmd = 27891,
    Get149InfoRequestCmd = 26545,
    Act149GetScoreRewardsRequestCmd = 13168,
    Act149GainDailyBonusRequestCmd = 21493,
    Get152InfoRequestCmd = -24667,
    Act152AcceptPresentRequestCmd = -937,
    Get153InfosRequestCmd = 17814,
    Act153CountChangePushCmd = 15607,
    Get154InfosRequestCmd = -28617,
    Answer154PuzzleRequestCmd = 14316,
    Get157InfoRequestCmd = 28604,
    Act157UnlockComponentRequestCmd = -15633,
    Act157GainMilestoneRewardRequestCmd = 4356,
    Act157AcceptProductionRequestCmd = -18361,
    Act157CompoundRequestCmd = 31445,
    ProductionInfoChangePushCmd = -3692,
    Get158InfosRequestCmd = -17733,
    Act158StartChallengeRequestCmd = -28563,
    Act158AbandonChallengeRequestCmd = 26834,
    Get159InfosRequestCmd = 5915,
    Get159BonusRequestCmd = 6851,
    Act160GetInfoRequestCmd = 2832,
    Act160UpdatePushCmd = -921,
    Act160FinishMissionRequestCmd = -16953,
    Act161GetInfoRequestCmd = -2254,
    Act161RefreshElementsRequestCmd = -10638,
    Act161GainMilestoneRewardRequestCmd = 2458,
    Act161CdBeginPushCmd = -22574,
    Get163InfosRequestCmd = -7081,
    Act163StartEvidenceRequestCmd = 18011,
    Act163EvidenceOperationRequestCmd = 1790,
    Act163InfoPushCmd = -15754,
    Act163ReadClueRequestCmd = -1041,
    GetAct164InfoRequestCmd = 2168,
    Act164StartEpisodeRequestCmd = 24739,
    Act164ReStartEpisodeRequestCmd = -7910,
    Act164BeginRoundRequestCmd = 15833,
    Act164StepPushCmd = -8184,
    Act164RollbackRequestCmd = 7542,
    Act164AbortRequestCmd = 2340,
    Act165GetInfoRequestCmd = -22598,
    Act165ModifyKeywordRequestCmd = 14459,
    Act165GenerateEndingRequestCmd = 25422,
    Act165RestartRequestCmd = -30189,
    Act165GainMilestoneRewardRequestCmd = -14814,
    Get166InfosRequestCmd = -15302,
    Act166EnterBaseRequestCmd = 32361,
    Act166AnalyInfoRequestCmd = 3153,
    Act166ReceiveInfoBonusRequestCmd = -4154,
    Act166ReceiveInformationBonusRequestCmd = -29728,
    Act166SetTalentSkillRequestCmd = -30845,
    StartAct166BattleRequestCmd = 10499,
    Act166BattleFinishPushCmd = -17983,
    Act166InfoPushCmd = -2224,
    Act166TalentPushCmd = -17908,
    GetAct167InfoRequestCmd = -26690,
    Act167StartEpisodeRequestCmd = -11063,
    Act167ReStartEpisodeRequestCmd = -2368,
    Act167BeginRoundRequestCmd = 28799,
    Act167StepPushCmd = 12590,
    Act167RollbackRequestCmd = 28316,
    Act167AbortRequestCmd = 31754,
    Get168InfosRequestCmd = 22908,
    Act168StoryRequestCmd = -28779,
    Act168EnterEpisodeRequestCmd = -22021,
    StartAct168BattleRequestCmd = -23618,
    Act168BattleFinishPushCmd = -31739,
    Act168GameMoveRequestCmd = -25115,
    Act168GameSelectOptionRequestCmd = -22186,
    Act168GameComposeItemRequestCmd = -14381,
    Act168GameSettleRequestCmd = -8385,
    Act168EpisodePushCmd = -31791,
    Act168GameSettlePushCmd = -24909,
    Act168GameItemChangePushCmd = 27543,
    Get169InfoRequestCmd = 23882,
    Act169SummonRequestCmd = 23477,
    Get170InfoRequestCmd = -12678,
    Act170SummonRequestCmd = -10011,
    Act170SaveRequestCmd = -13259,
    Act170SelectRequestCmd = -24346,
    Get171InfoRequestCmd = 24028,
    GetAct172InfoRequestCmd = -12042,
    Act172UseItemTaskIdsUpdatePushCmd = 29852,
    GetAct174InfoRequestCmd = 12410,
    Start174GameRequestCmd = 28062,
    Fresh174ShopRequestCmd = -19768,
    BuyIn174ShopRequestCmd = 9911,
    ChangeAct174TeamRequestCmd = 28763,
    SwitchAct174TeamRequestCmd = -4857,
    SelectAct174ForceBagRequestCmd = 13863,
    StartAct174FightMatchRequestCmd = -11557,
    BetHpBeforeAct174FightRequestCmd = -3546,
    EnterEndLessAct174FightRequestCmd = 5452,
    EndAct174GameRequestCmd = -15713,
    StartAct174FightRequestCmd = -23570,
    EnterNextAct174FightRequestCmd = 7549,
    ChangeSeasonEndAct174RequestCmd = 30516,
    ViewFightAct174RequestCmd = 2747,
    TempAct174RequestCmd = 11396,
    Act174GameInfoUpdatePushCmd = 13867,
    Act174TriggerEffectPushCmd = -21661,
    GetAct178InfoRequestCmd = -4207,
    Act178StartEpisodeRequestCmd = -23603,
    Act178EndEpisodeRequestCmd = -4938,
    Act178EndRoundRequestCmd = 1205,
    Act178RestRequestCmd = -13420,
    Act178ResetRequestCmd = 15513,
    Act178UnlockTalentRequestCmd = -19286,
    Act178BuildRequestCmd = 20710,
    Act178GetRewardRequestCmd = -17381,
    Act178InteractRequestCmd = 656,
    Act178CurrencyChangePushCmd = -15705,
    Act178GuideAddGrainRequestCmd = -28834,
    Get179InfosRequestCmd = 17118,
    Set179ScoreRequestCmd = 20711,
    Get180InfosRequestCmd = 16886,
    Act180EnterEpisodeRequestCmd = 6703,
    Act180StoryRequestCmd = -28087,
    Act180GameFinishRequestCmd = -29661,
    Act180SaveGameRequestCmd = -2735,
    Act180EpisodePushCmd = -29435,
    Get181InfosRequestCmd = -29545,
    Get181BonusRequestCmd = -28609,
    Get181SpBonusRequestCmd = 18242,
    GetAct182InfoRequestCmd = -1800,
    GetAct182RandomMasterRequestCmd = -5479,
    Act182RefreshMasterRequestCmd = -5049,
    Act182InfoPushCmd = 19288,
    Act182GetRankRewardRequestCmd = 8829,
    Act183GetInfoRequestCmd = -29530,
    Act183ResetGroupRequestCmd = -22390,
    Act183ResetEpisodeRequestCmd = -31354,
    Act183ChooseRepressRequestCmd = 25151,
    Act183GetRecordRequestCmd = 18745,
    Act183ReplaceResultRequestCmd = 32533,
    Act183BadgeNumUpdatePushCmd = 6016,
    Act183BattleFinishPushCmd = 28311,
    GetAct184InfoRequestCmd = 22652,
    Act184FinishEpisodeRequestCmd = 29050,
    Act184EpisodePushCmd = 11405,
    GetAct185InfoRequestCmd = -30658,
    Act185FinishEpisodeRequestCmd = 28444,
    Act185EpisodePushCmd = 21615,
    GetAct186InfoRequestCmd = -18432,
    FinishAct186TaskRequestCmd = 24488,
    GetAct186MilestoneRewardRequestCmd = 7369,
    GetAct186DailyCollectionRequestCmd = -21421,
    Act186TaskPushCmd = 22683,
    Act186LikePushCmd = 5773,
    FinishAct186ATypeGameRequestCmd = -19790,
    Act186BTypeGamePlayRequestCmd = 19272,
    FinishAct186BTypeGameRequestCmd = 9139,
    GetAct186OnceBonusRequestCmd = 9280,
    Get187InfoRequestCmd = 13770,
    Act187FinishGameRequestCmd = 18257,
    Act187AcceptRewardRequestCmd = 16875,
    GetAct189InfoRequestCmd = 18246,
    GetAct189OnceBonusRequestCmd = 12102,
    GetActivityInfosRequestCmd = -14582,
    GetActivityInfosWithParamRequestCmd = -8777,
    UpdateActivityPushCmd = -12293,
    EndActivityPushCmd = 7215,
    ActivityNewStageReadRequestCmd = 2821,
    UnlockPermanentRequestCmd = -5324,
    GetAntiqueInfoRequestCmd = -25429,
    AntiqueUpdatePushCmd = 13506,
    AutoChessGetSceneRequestCmd = -10819,
    AutoChessEnterSceneRequestCmd = 17595,
    AutoChessEnterFightRequestCmd = 22591,
    AutoChessBuyChessRequestCmd = -15531,
    AutoChessBuildRequestCmd = 20447,
    AutoChessRefreshMallRequestCmd = -17148,
    AutoChessFreezeItemRequestCmd = 13119,
    AutoChessMallRegionSelectItemRequestCmd = 10984,
    AutoChessUseMasterSkillRequestCmd = 26503,
    AutoChessPreviewFightRequestCmd = 3715,
    AutoChessGiveUpRequestCmd = -3457,
    AutoChessMallUpgradePushCmd = -10420,
    AutoChessScenePushCmd = 1693,
    AutoChessRoundSettlePushCmd = -4024,
    AutoChessSettlePushCmd = -32448,
    GetBannerInfoRequestCmd = 20297,
    SetBannerNotShowRequestCmd = -9413,
    SetUseBgmRequestCmd = 265,
    SetFavoriteBgmRequestCmd = 18537,
    GetBgmInfoRequestCmd = -30839,
    UpdateBgmPushCmd = 2848,
    ReadBgmRequestCmd = -15015,
    GetBpInfoRequestCmd = -5055,
    GetBpBonusRequestCmd = 30844,
    BpScoreUpdatePushCmd = -27276,
    BpPayPushCmd = 4063,
    BpBuyLevelRequsetCmd = 2877,
    BpMarkFirstShowRequestCmd = 28489,
    BpOpenPushCmd = 14599,
    GetSelfSelectBonusRequestCmd = -1196,
    GetChargeInfoRequestCmd = 31537,
    NewOrderRequestCmd = -5087,
    OrderCompletePushCmd = 7728,
    GetMonthCardInfoRequestCmd = 5799,
    GetMonthCardBonusRequestCmd = -4190,
    SandboxChargeRequsetCmd = 9556,
    ReadChargeNewRequestCmd = 23467,
    SendMsgRequestCmd = -29022,
    DeleteOfflineMsgRequestCmd = -25586,
    ChatMsgPushCmd = -8392,
    GetReportTypeRequestCmd = 27727,
    ReportRequestCmd = 22157,
    WordTestRequestCmd = 21901,
    GetServerTimeRequestCmd = 24032,
    CritterGetInfoRequestCmd = -17001,
    StartTrainCritterRequestCmd = 32183,
    SelectEventOptionRequestCmd = -3479,
    SelectMultiEventOptionRequestCmd = -22476,
    FastForwardTrainRequestCmd = -13681,
    FinishTrainCritterRequestCmd = -5398,
    BanishCritterRequestCmd = -26080,
    SummonCritterInfoRequestCmd = 3574,
    SummonCritterRequestCmd = 20426,
    LockCritterRequestCmd = 15444,
    ResetSummonCritterPoolRequestCmd = 15207,
    GainGuideCritterRequestCmd = 26456,
    IncubateCritterRequestCmd = 17494,
    CritterInfoPushCmd = 29879,
    IncubateCritterPreviewRequestCmd = -30888,
    GetCritterBookInfoRequestCmd = 9634,
    SetCritterBookBackgroundRequestCmd = -7262,
    SetCritterBookUseSpecialSkinRequestCmd = 10565,
    CancelTrainRequestCmd = -11391,
    MarkCritterBookNewReadRequestCmd = -3961,
    RefreshCritterMoodRequestCmd = -31095,
    GetRealCritterAttributeRequestCmd = 19075,
    RefreshBuildingCritterAttibutesRequestCmd = 21213,
    RealCritterAttributePushCmd = -21885,
    StartTrainCritterPreviewRequestCmd = 18841,
    CritterRenameRequestCmd = -27965,
    GetCurrencyListRequestCmd = 20931,
    CurrencyChangePushCmd = 19309,
    GetBuyPowerInfoRequestCmd = -4123,
    BuyPowerRequestCmd = 5177,
    ExchangeDiamondRequestCmd = -20133,
    GetDialogInfoRequestCmd = -15619,
    RecordDialogInfoRequestCmd = 21980,
    GetDispatchInfoRequestCmd = -30467,
    DispatchRequestCmd = 29553,
    InterruptDispatchRequestCmd = -1090,
    GetDungeonRequestCmd = -4591,
    DungeonUpdatePushCmd = 6132,
    DungeonInfosPushCmd = 4912,
    StartDungeonRequestCmd = 3231,
    EndDungeonRequestCmd = 30408,
    EndDungeonPushCmd = 31240,
    MapElementRequestCmd = 31241,
    ChapterMapUpdatePushCmd = -7127,
    ChapterMapElementUpdatePushCmd = 19027,
    GetPointRewardRequestCmd = 18768,
    GetEpisodeHeroRecommendRequestCmd = -16686,
    EquipSpDungeonUpdatePushCmd = 3355,
    RewardPointUpdatePushCmd = 8595,
    InstructionDungeonRewardRequestCmd = 16056,
    InstructionDungeonFinalRewardRequestCmd = 19970,
    InstructionDungeonInfoRequestCmd = 5087,
    InstructionDungeonInfoPushCmd = 2547,
    InstructionDungeonOpenRequestCmd = 26245,
    CoverDungeonRecordRequestCmd = 12399,
    PuzzleFinishRequestCmd = -31764,
    SavePuzzleProgressRequestCmd = 20143,
    GetPuzzleProgressRequestCmd = 15392,
    RefreshAssistRequestCmd = -24665,
    GetMainDramaRewardRequestCmd = 1424,
    GetEquipInfoRequestCmd = 15973,
    EquipUpdatePushCmd = -19172,
    EquipDeletePushCmd = -12052,
    EquipStrengthenRequestCmd = -20485,
    EquipBreakRequestCmd = -2,
    EquipLockRequestCmd = 18434,
    EquipComposeRequestCmd = -10161,
    EquipDecomposeRequestCmd = 9144,
    EquipRefineRequestCmd = -1422,
    GetExploreInfoRequestCmd = 29371,
    GetExploreSimpleInfoRequestCmd = -28635,
    ChangeMapRequestCmd = 6164,
    ExploreMoveRequestCmd = 13574,
    ExploreUseItemRequestCmd = -6261,
    ExploreItemChangePushCmd = -188,
    ExploreInteractRequestCmd = -27767,
    ExploreItemInteractRequestCmd = -7016,
    ExploreStepPushCmd = -28513,
    ResetExploreRequestCmd = -11406,
    GetFairylandInfoRequestCmd = 18442,
    ResolvePuzzleRequestCmd = -13963,
    RecordDialogRequestCmd = 32762,
    RecordElementRequestCmd = -1260,
    BeginFightRequestCmd = -30438,
    TestFightRequestCmd = -5451,
    TestFightIdRequestCmd = 30146,
    MoveCardRequestCmd = -2028,
    ResetRoundRequestCmd = 17166,
    BeginRoundRequestCmd = 13744,
    EndRoundRequestCmd = -9054,
    ChangeSubHeroRequestCmd = -25567,
    ChangeSubHeroExSkillRequestCmd = 25565,
    ReconnectFightRequestCmd = 9206,
    CardInfoPushCmd = -19063,
    TeamInfoPushCmd = 5078,
    EndFightRequestCmd = 12300,
    EndFightPushCmd = 13644,
    FightWavePushCmd = 29544,
    UseClothSkillRequestCmd = -9399,
    RedealCardInfoPushCmd = 30262,
    AutoRoundRequestCmd = -3100,
    GetFightOperRequestCmd = -149,
    GetFightRecordGroupRequestCmd = -16575,
    EntityInfoRequestCmd = 25708,
    GetFightCardDeckInfoRequestCmd = -13070,
    GetEntityDetailInfosRequestCmd = -18830,
    GetFightRecordAllRequestCmd = 30317,
    FightWithRecordAllRequestCmd = -12599,
    GetFightCardDeckDetailInfoRequestCmd = -22747,
    GetApplyListRequestCmd = 28363,
    ApplyRequestCmd = -29265,
    HandleApplyRequestCmd = 16251,
    RejectAllRequestCmd = 17247,
    GetFriendInfoListRequestCmd = -30711,
    AddBlacklistRequestCmd = -13109,
    RemoveBlacklistRequestCmd = -27760,
    RemoveFriendRequestCmd = 19215,
    SearchRequestCmd = -4417,
    GetBlacklistRequestCmd = -15262,
    BlacklistChangePushCmd = -8216,
    AgreeAllRequestCmd = 4486,
    LoadFriendInfosRequestCmd = -25504,
    FriendChangePushCmd = 23207,
    FriendDescChangeRequestCmd = -17850,
    GetRecommendedFriendsRequestCmd = 25751,
    GmRequestCmd = 9762,
    GpuCpuLogRequestCmd = -22917,
    GmSummonResultPushCmd = -5833,
    FightTipsMessagePushCmd = 3036,
    FinishGuideRequestCmd = 18894,
    UpdateGuidePushCmd = -11849,
    GetGuideInfoRequestCmd = 2105,
    GetHandbookInfoRequestCmd = 19177,
    HandbookReadRequestCmd = -29895,
    GetHeroGroupListRequestCmd = -11453,
    UpdateHeroGroupRequestCmd = 31018,
    SetHeroGroupEquipRequestCmd = -27977,
    SetHeroGroupSnapshotRequestCmd = -31069,
    UpdateHeroGroupPushCmd = -8854,
    GetHeroGroupCommonListRequestCmd = 32460,
    ChangeHeroGroupSelectRequestCmd = -1459,
    UpdateHeroGroupNameRequestCmd = 28378,
    GetHeroGroupSnapshotListRequestCmd = 2131,
    GetHeroInvitationInfoRequestCmd = -27005,
    GainInviteRewardRequestCmd = 23159,
    GainFinalInviteRewardRequestCmd = -8734,
    HeroInfoListRequestCmd = -3787,
    HeroUpdatePushCmd = -25616,
    HeroUpgradeSkillRequestCmd = 18068,
    HeroLevelUpRequestCmd = 24554,
    HeroRankUpRequestCmd = -25186,
    UseSkinRequestCmd = 5793,
    HeroSkinGainPushCmd = -22399,
    UnMarkIsNewRequestCmd = -29069,
    UnlockVoiceRequestCmd = 21281,
    ItemUnlockRequestCmd = 14170,
    HeroGainPushCmd = 15468,
    HeroTouchRequestCmd = -21872,
    HeroTalentUpRequestCmd = 5242,
    PutTalentCubeRequestCmd = -15329,
    TakeoffAllTalentCubeRequestCmd = -20353,
    PutTalentSchemeRequestCmd = 29077,
    HeroDefaultEquipRequestCmd = 17942,
    RenameTalentTemplateRequestCmd = 2331,
    UseTalentTemplateRequestCmd = 29648,
    UnlockTalentStyleRequestCmd = -3085,
    UseTalentStyleRequestCmd = 15173,
    TalentStyleReadRequestCmd = -24940,
    MarkHeroFavorRequestCmd = 28886,
    HeroLevelUpUpdatePushCmd = -29459,
    HeroTalentStyleStatRequestCmd = 31906,
    DestinyLevelUpRequestCmd = 9532,
    DestinyRankUpRequestCmd = 387,
    DestinyStoneUnlockRequestCmd = -32300,
    DestinyStoneUseRequestCmd = 6261,
    HeroRedDotReadRequestCmd = -23957,
    PutTalentCubeBatchRequestCmd = -21471,
    GetHeroStoryRequestCmd = -27537,
    UnlocHeroStoryRequestCmd = -613,
    GetHeroStoryBonusRequestCmd = -15210,
    HeroStoryUpdatePushCmd = 16434,
    UpdateHeroStoryStatusRequestCmd = 26102,
    ExchangeTicketRequestCmd = -22201,
    GetScoreBonusRequestCmd = -19101,
    GetChallengeBonusRequestCmd = 23850,
    HeroStoryScorePushCmd = -19029,
    HeroStoryTicketPushCmd = 12499,
    HeroStoryWeekTaskPushCmd = 8174,
    HeroStoryWeekTaskGetRequestCmd = 7790,
    HeroStoryDispatchRequestCmd = 25343,
    HeroStoryDispatchCompleteRequestCmd = -1160,
    HeroStoryDispatchResetRequestCmd = 21226,
    GetInvestigateRequestCmd = -7309,
    PutClueRequestCmd = -8458,
    InvestigateInfoPushCmd = 5187,
    GetItemListRequestCmd = 29707,
    ItemChangePushCmd = 16437,
    UseItemRequestCmd = -14948,
    UsePowerItemRequestCmd = -32183,
    UsePowerItemListRequestCmd = -1659,
    AutoUseExpirePowerItemRequestCmd = 8367,
    MarkReadSubType21RequestCmd = 8246,
    UseInsightItemRequestCmd = 25074,
    GetAllMailsRequestCmd = 13187,
    ReadMailRequestCmd = -6896,
    ReadMailBatchRequestCmd = -13995,
    NewMailPushCmd = 21057,
    DeleteMailsPushCmd = 23229,
    DeleteMailBatchRequestCmd = -2516,
    MarkMailJumpRequestCmd = -22306,
    AutoReadMailPushCmd = 339,
    GetMatch3WarChessFacadeInfoRequestCmd = 1969,
    StartMatch3WarChessInfoRequestCmd = 4715,
    Match3ChessBoardSwapRequestCmd = 5610,
    GetMatch3WarChessTaskRewardRequestCmd = -12951,
    GetMatch3WarChessInfoRequestCmd = -27491,
    RefreshMatch3WarChessInfoRequestCmd = -30676,
    MaterialChangePushCmd = 22389,
    UpdateOpenPushCmd = -7688,
    GetPlayerCardInfoRequestCmd = 20523,
    GetOtherPlayerCardInfoRequestCmd = 6733,
    PlayerCardInfoPushCmd = -161,
    SetPlayerCardShowSettingRequestCmd = 12266,
    SetPlayerCardProgressSettingRequestCmd = -7074,
    SetPlayerCardBaseSettingRequestCmd = -1308,
    SetPlayerCardHeroCoverRequestCmd = -9736,
    SetPlayerCardThemeRequestCmd = -20930,
    SetPlayerCardShowAchievementRequestCmd = 25845,
    SetPlayerCardCritterRequestCmd = 18728,
    GetPlayerInfoRequestCmd = 14839,
    CreatePlayerRequestCmd = 9183,
    PlayerInfoPushCmd = 9719,
    RenameRequestCmd = -20970,
    SetSignatureRequestCmd = 32124,
    SetBirthdayRequestCmd = 30017,
    SetPortraitRequestCmd = -2529,
    SetShowHeroUniqueIdsRequestCmd = 27344,
    GetSimplePropertyRequestCmd = -13331,
    SetSimplePropertyRequestCmd = 25593,
    SimplePropertyPushCmd = 25325,
    GetClothInfoRequestCmd = 23876,
    ClothUpdatePushCmd = -2085,
    ServerResultCodePushCmd = 9743,
    GetOtherPlayerInfoRequestCmd = -19751,
    SetCharacterAgeRequestCmd = 260,
    UseCdKeyRequsetCmd = -16517,
    MarkMainThumbnailRequestCmd = -2446,
    SetPlayerBgRequestCmd = 10752,
    GetAssistBonusRequestCmd = 7644,
    ReceiveAssistBonusRequestCmd = 14655,
    SetMainSceneSkinRequestCmd = -17678,
    GetRedDotInfosRequestCmd = 26644,
    UpdateRedDotPushCmd = 28651,
    ShowRedDotRequestCmd = -20810,
    GetRogueStateRequestCmd = 5590,
    GetRogueInfoRequestCmd = 5808,
    GetRogueScoreRewardRequestCmd = 6838,
    AbortRogueRequestCmd = -26515,
    EnterRogueRequestCmd = -5549,
    RogueEventStartRequestCmd = 18725,
    RogueEventSelectRequestCmd = -12969,
    RogueEventEndRequestCmd = 29166,
    RogueEventFightRewardRequestCmd = 20654,
    RogueEventCollectionRequestCmd = -17373,
    RogueGroupChangeRequestCmd = 6792,
    RogueGroupIdxChangeRequestCmd = 10989,
    RogueGroupStarUpgradeRequestCmd = -6396,
    RogueCollectionEnchantRequestCmd = 12130,
    BuyRogueGoodsRequestCmd = -25535,
    RogueCollectionNewRequestCmd = -8597,
    RogueReadEndingRequestCmd = -4314,
    RogueReturnRequestCmd = -23723,
    RogueStatePushCmd = -4746,
    RogueInfoPushCmd = 12225,
    RogueEventUpdatePushCmd = 9850,
    RogueFightResultPushCmd = 24102,
    RogueCollectionsPushCmd = 21487,
    RogueTeamInfoPushCmd = 5032,
    RogueGoodsInfoPushCmd = 30781,
    RogueCoinPushCmd = -12130,
    RogueCurrencyPushCmd = -12224,
    RogueHeartPushCmd = -18551,
    RogueEndPushCmd = -24180,
    RogueCollectionGetPushCmd = 2145,
    RogueLifeChangePushCmd = -7877,
    RogueCollectionUnlockPushCmd = 3693,
    GetRoomInfoRequestCmd = 19031,
    UseBlockRequestCmd = 24678,
    ResetRoomRequestCmd = 26478,
    UseBuildingRequestCmd = 20681,
    UnUseBuildingRequestCmd = -25652,
    BuildingGainPushCmd = 22011,
    GetRoomObInfoRequestCmd = 11304,
    RoomConfirmRequestCmd = 30905,
    RoomRevertRequestCmd = 27427,
    StartProductionLineRequestCmd = -14005,
    GainProductionLineRequestCmd = -29380,
    FormulaGainPushCmd = -2109,
    ProductionLineLvUpRequestCmd = -8412,
    ProductionLineAccelerateRequestCmd = 4262,
    GetOtherRoomObInfoRequestCmd = -8438,
    RoomLevelUpRequestCmd = 17896,
    ProductionLineInfoRequestCmd = 6697,
    BlockPackageGainPushCmd = 868,
    GetBlockPackageInfoRequsetCmd = -24943,
    GetBuildingInfoRequestCmd = -8792,
    UnUseBlockRequestCmd = -11703,
    UpdateRoomHeroDataRequestCmd = -19082,
    HideBuildingReddotRequsetCmd = -16648,
    HideBlockPackageReddotRequestCmd = 19233,
    GainSpecialBlockPushCmd = 729,
    GainRoomHeroFaithRequestCmd = -26364,
    GetCharacterInteractionBonusRequestCmd = -13534,
    GetCharacterInteractionInfoRequestCmd = -32217,
    StartCharacterInteractionRequestCmd = 18441,
    GetRoomThemeCollectionBonusRequestCmd = -7919,
    GetRoomPlanInfoRequestCmd = -1022,
    GetRoomPlanDetailsRequestCmd = 28188,
    SetRoomPlanRequestCmd = -26910,
    SetRoomPlanNameRequestCmd = -22397,
    SetRoomPlanCoverRequestCmd = 32609,
    UseRoomPlanRequestCmd = 21027,
    SwitchRoomPlanRequestCmd = -31192,
    DeleteRoomPlanRequestCmd = 17449,
    CopyOtherRoomPlanRequestCmd = 20691,
    GetRoomShareRequestCmd = 11134,
    UseRoomShareRequestCmd = -20629,
    ShareRoomPlanRequestCmd = 18377,
    DeleteRoomShareRequestCmd = -7631,
    ReportRoomRequestCmd = 16295,
    BuildingLevelUpPushCmd = 1881,
    SetWaterTypeRequestCmd = 27999,
    SetRoomSkinRequestCmd = 14540,
    ReadRoomSkinRequestCmd = -20068,
    GenerateRoadRequestCmd = 21087,
    DeleteRoadRequestCmd = 31911,
    AllotCritterRequestCmd = -19129,
    AllotVehicleRequestCmd = -16566,
    GetManufactureInfoRequestCmd = 26485,
    GetFrozenItemInfoRequestCmd = 24157,
    BuyManufactureBuildingRequestCmd = -8345,
    DispatchCritterRequestCmd = 9019,
    ManuBuildingUpgradeRequestCmd = -4843,
    SelectSlotProductionPlanRequestCmd = 11426,
    ManufactureAccelerateRequestCmd = -28110,
    ReapFinishSlotRequestCmd = -29511,
    BatchDispatchCrittersRequestCmd = -3984,
    RouseCrittersRequestCmd = 7436,
    BatchAddProctionsRequestCmd = 11962,
    GainGuideBuildingRequestCmd = -15511,
    AccelerateGuidePlanRequestCmd = -18192,
    ManuBuildingInfoPushCmd = -24167,
    BuyRestSlotRequestCmd = 27181,
    ChangeRestCritterRequestCmd = 29967,
    UnloadRestBuildingCrittersRequestCmd = 2989,
    ReplaceRestBuildingCrittersRequestCmd = 9606,
    FeedCritterRequestCmd = 16959,
    RestBuildingInfoPushCmd = -5323,
    GetOrderInfoRequestCmd = -23690,
    FinishOrderRequestCmd = -25557,
    LockOrderRequestCmd = 2899,
    RefreshPurchaseOrderRequestCmd = -30668,
    ChangePurchaseOrderTraceStateRequestCmd = 29723,
    GetTradeTaskInfoRequestCmd = -10435,
    ReadNewTradeTaskRequestCmd = -28361,
    GetTradeSupportBonusRequestCmd = -19678,
    TradeLevelUpRequestCmd = 17851,
    TradeTaskPushCmd = -1903,
    GetTradeTaskExtraBonusRequestCmd = -30500,
    GetRoomLogRequestCmd = -17971,
    ReadRoomLogNewRequestCmd = 15059,
    GetRougeInfoRequestCmd = -7647,
    EnterRougeSelectDifficultyRequestCmd = -23930,
    EnterRougeSelectRewardRequestCmd = -14216,
    EnterRougeSelectStyleRequestCmd = 29092,
    EnterRougeSelectHeroesRequestCmd = -20935,
    RougeGroupChangeRequestCmd = 19976,
    RougeMonsterFixAttrRequestCmd = -21985,
    RougeRoundMoveRequestCmd = -25580,
    RougeChoiceEventRequestCmd = 25184,
    RougeBuyGoodsRequestCmd = 3551,
    RougeEndShopEventRequestCmd = -29626,
    RougeShopRefreshRequestCmd = 30588,
    RougeSelectDropRequestCmd = -2744,
    RougeRandomDropRequestCmd = 25309,
    RougeSelectHealRequestCmd = -4691,
    RougeSelectReviveRequestCmd = 10756,
    RougeRecruitHeroRequestCmd = -21377,
    RougeSelectLostCollectionRequestCmd = -32639,
    RougeSelectCollectionLevelUpRequestCmd = 22716,
    RougePieceMoveRequestCmd = 19026,
    RougePieceTalkSelectRequestCmd = 18917,
    RougeLeaveMiddleLayerRequestCmd = 18796,
    RougeRepairShopBuyRequestCmd = -2848,
    RougeRepairShopRandomRequestCmd = -26415,
    RougeDisplaceRequestCmd = 27332,
    RougeEndRequestCmd = 12236,
    RougeAbortRequestCmd = -26067,
    ActiveTalentRequestCmd = 6807,
    RougeUseMapSkillRequestCmd = 5407,
    RougeUnlockSkillRequestCmd = 19136,
    RougeEventUpdatePushCmd = 6650,
    RougeSelectDropPushCmd = -25942,
    RougeLayerMapInfoPushCmd = 29148,
    RougeLayerSimpleMapInfoPushCmd = 31302,
    RougeUpdateCoinPushCmd = 2721,
    RougeUpdatePowerPushCmd = 549,
    RougeUpdateTalentPointPushCmd = 2090,
    RougeUpdateTeamExpAndLevelPushCmd = -17289,
    RougeFightResultPushCmd = 20902,
    RougeInMapItemUpdatePushCmd = 29500,
    RougeTeamHpUpdatePushCmd = -30985,
    RougeInteractiveTeamHpUpdatePushCmd = 26581,
    RougeTeamInfoPushCmd = -18648,
    RougeEntrustInfoPushCmd = 10870,
    RougeTriggerEffectPushCmd = 3606,
    RougeInfoPushCmd = 4929,
    RougeComposeRequestCmd = 4939,
    RougeInlayRequestCmd = -7214,
    RougeDemountRequestCmd = 18001,
    RougeAddToBarRequestCmd = 19030,
    RougeOneKeyAddToBarRequestCmd = 20737,
    RougeRemoveFromBarRequestCmd = 12588,
    RougeOneKeyRemoveFromBarRequestCmd = 6839,
    RougeItemTrammelsRequestCmd = 21993,
    RougeItemBagPushCmd = 22094,
    RougeAddItemBagPushCmd = 26711,
    RougeRemoveItemBagPushCmd = -28452,
    RougeItemWarehousePushCmd = -24169,
    RougeAddItemWarehousePushCmd = 22112,
    RougeRemoveItemWarehousePushCmd = 3749,
    RougeItemLayoutEffectUpdatePushCmd = -11470,
    RougeItemUpdatePushCmd = -23961,
    RougeItemEffectChangeItemPushCmd = -19930,
    GetRougeOutsideInfoRequestCmd = 26523,
    RougeActiveGeniusRequestCmd = -15623,
    RougeReceivePointBonusRequestCmd = -19194,
    RougeUpdateGeniusPointPushCmd = -28578,
    RougeUpdatePointPushCmd = -13485,
    RougeMarkGeniusNewStageRequestCmd = -2746,
    RougeMarkBonusNewStageRequestCmd = -24318,
    RougeGetUnlockCollectionsRequestCmd = 15084,
    RougeGetNewReddotInfoRequestCmd = -21878,
    RougeMarkNewReddotRequestCmd = 26217,
    RougeReddotUpdatePushCmd = -885,
    RougeUnlockStoryRequestCmd = 15135,
    RougeLimiterSettingSaveRequestCmd = -24907,
    RougeDlcSettingSaveRequestCmd = 3058,
    RougeLimiterUnlockBuffRequestCmd = 25271,
    RougeLimiterSpeedUpBuffCdRequestCmd = -23096,
    GetSiegeBattleInfoRequestCmd = 23929,
    StartSiegeBattleRequestCmd = 23153,
    AbandonSiegeBattleRequestCmd = 1942,
    GetSignInInfoRequestCmd = -13395,
    SignInRequestCmd = -29407,
    SignInAddupRequestCmd = -20145,
    SignInHistoryRequestCmd = -23661,
    GetHeroBirthdayRequestCmd = 18942,
    SignInTotalRewardRequestCmd = -2166,
    SignInTotalRewardAllRequestCmd = 28419,
    ClientStatBaseInfoRequestCmd = -28177,
    StatInfoPushCmd = -10251,
    UpdateClientStatBaseInfoRequestCmd = -30158,
    GetStoreInfosRequestCmd = -26134,
    BuyGoodsRequestCmd = 26890,
    ReadStoreNewRequestCmd = -9423,
    GetStoryRequestCmd = -19309,
    UpdateStoryRequestCmd = 9590,
    GetStoryFinishRequestCmd = -8364,
    StoryFinishPushCmd = 16980,
    SummonRequestCmd = 11695,
    GetSummonInfoRequestCmd = -16421,
    SummonQueryTokenRequestCmd = -7898,
    OpenLuckyBagRequestCmd = 24404,
    ChooseMultiUpHeroRequestCmd = 22095,
    ChooseEnhancedPoolHeroRequestCmd = 4911,
    GetTaskInfoRequestCmd = -3389,
    FinishTaskRequestCmd = -16104,
    UpdateTaskPushCmd = -614,
    DeleteTaskPushCmd = -32406,
    GetTaskActivityBonusRequestCmd = 9931,
    FinishAllTaskRequestCmd = -5551,
    FinishReadTaskRequestCmd = 2868,
    GetTowerInfoRequestCmd = -13537,
    TowerMopUpRequestCmd = -17459,
    TowerActiveTalentRequestCmd = -4800,
    TowerResetTalentRequestCmd = 10119,
    TowerResetSubEpisodeRequestCmd = 5874,
    StartTowerBattleRequestCmd = -122,
    TowerBattleFinishPushCmd = -764,
    TowerLayerUpdatePushCmd = -25273,
    GetTurnbackInfoRequestCmd = -15599,
    TurnbackSignInRequestCmd = -24211,
    TurnbackOnceBonusRequestCmd = -29103,
    TurnbackFirstShowRequestCmd = -30386,
    TurnbackBonusPointRequestCmd = -31530,
    TurnbackAdditionPushCmd = -11727,
    BuyDoubleBonusRequestCmd = -30691,
    RefreshOnlineTaskRequestCmd = -18158,
    LogoutRequestCmd = 21642,
    DebugLogoutRequestCmd = -31567,
    GetSettingInfosRequestCmd = -27221,
    UpdateSettingInfoRequestCmd = -20517,
    WarChessRoundStartPushCmd = -23481,
    WarChessMyRoundStartRequestCmd = 13229,
    WarChessCharacterSkillRequestCmd = 19485,
    WarChessPiecePlaceRequestCmd = 8444,
    WarChessRoundEndRequestCmd = 464,
    WarChessFightResultPushCmd = -18334,
    WarChessDiamondBoxPushCmd = -22058,
    WarChessPieceSellRequestCmd = 29319,
    GetWeekwalkInfoRequestCmd = -31981,
    BeforeStartWeekwalkBattleRequestCmd = 22468,
    WeekwalkGeneralRequestCmd = 31013,
    WeekwalkInfoUpdatePushCmd = -28842,
    WeekwalkDialogRequestCmd = -21961,
    WeekwalkHeroRecommendRequestCmd = 10639,
    WeekwalkDialogHistoryRequestCmd = 27625,
    ResetLayerRequestCmd = 12972,
    MarkShowBuffRequestCmd = 8091,
    MarkShowFinishedRequestCmd = 21890,
    SelectNotCdHeroRequestCmd = -17006,
    MarkPopDeepRuleRequestCmd = 24540,
    MarkPopShallowSettleRequestCmd = -18703,
    MarkPopDeepSettleRequestCmd = 6293,
    ChangeWeekwalkHeroGroupSelectRequestCmd = -27320,
    GuestTimeOutPushCmd = 4958,
    MinorPlayTimeOutPushCmd = 31345,
    MinorLimitLoginTimePushCmd = 26459,
}
impl CmdId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LoginRequestCmd => "LoginRequestCmd",
            Self::ReconnectRequestCmd => "ReconnectRequestCmd",
            Self::ForceLogoutPushCmd => "ForceLogoutPushCmd",
            Self::GetReconnectStartTagRequestCmd => "GetReconnectStartTagRequestCmd",
            Self::GetAchievementInfoRequestCmd => "GetAchievementInfoRequestCmd",
            Self::UpdateAchievementPushCmd => "UpdateAchievementPushCmd",
            Self::ShowAchievementRequestCmd => "ShowAchievementRequestCmd",
            Self::ReadNewAchievementRequestCmd => "ReadNewAchievementRequestCmd",
            Self::Act1000GetInfoRequestCmd => "Act1000GetInfoRequestCmd",
            Self::Act1000AccountBindBonusRequestCmd => {
                "Act1000AccountBindBonusRequestCmd"
            }
            Self::Act1001GetInfoRequestCmd => "Act1001GetInfoRequestCmd",
            Self::Act1001UpdatePushCmd => "Act1001UpdatePushCmd",
            Self::Get101InfosRequestCmd => "Get101InfosRequestCmd",
            Self::Get101BonusRequestCmd => "Get101BonusRequestCmd",
            Self::Get101SpBonusRequestCmd => "Get101SpBonusRequestCmd",
            Self::Get101OnceBonusRequestCmd => "Get101OnceBonusRequestCmd",
            Self::GetAct186SpBonusInfoRequestCmd => "GetAct186SpBonusInfoRequestCmd",
            Self::AcceptAct186SpBonusRequestCmd => "AcceptAct186SpBonusRequestCmd",
            Self::Get104InfosRequestCmd => "Get104InfosRequestCmd",
            Self::BeforeStartAct104BattleRequestCmd => {
                "BeforeStartAct104BattleRequestCmd"
            }
            Self::StartAct104BattleRequestCmd => "StartAct104BattleRequestCmd",
            Self::Act104BattleFinishPushCmd => "Act104BattleFinishPushCmd",
            Self::Activity104ItemChangePushCmd => "Activity104ItemChangePushCmd",
            Self::RefreshRetailRequestCmd => "RefreshRetailRequestCmd",
            Self::OptionalActivity104EquipRequestCmd => {
                "OptionalActivity104EquipRequestCmd"
            }
            Self::ComposeActivity104EquipRequestCmd => {
                "ComposeActivity104EquipRequestCmd"
            }
            Self::ChangeFightGroupRequestCmd => "ChangeFightGroupRequestCmd",
            Self::MarkActivity104StoryRequestCmd => "MarkActivity104StoryRequestCmd",
            Self::MarkEpisodeAfterStoryRequestCmd => "MarkEpisodeAfterStoryRequestCmd",
            Self::GetUnlockActivity104EquipIdsRequestCmd => {
                "GetUnlockActivity104EquipIdsRequestCmd"
            }
            Self::MarkPopSummaryRequestCmd => "MarkPopSummaryRequestCmd",
            Self::Get106InfosRequestCmd => "Get106InfosRequestCmd",
            Self::Get106OrderBonusRequestCmd => "Get106OrderBonusRequestCmd",
            Self::Update106OrderPushCmd => "Update106OrderPushCmd",
            Self::Get107GoodsInfoRequestCmd => "Get107GoodsInfoRequestCmd",
            Self::Buy107GoodsRequestCmd => "Buy107GoodsRequestCmd",
            Self::Get108InfosRequestCmd => "Get108InfosRequestCmd",
            Self::ResetMapRequestCmd => "ResetMapRequestCmd",
            Self::DialogEventSelectRequestCmd => "DialogEventSelectRequestCmd",
            Self::EnterFightEventRequestCmd => "EnterFightEventRequestCmd",
            Self::EpisodeConfirmRequestCmd => "EpisodeConfirmRequestCmd",
            Self::Get108BonusRequestCmd => "Get108BonusRequestCmd",
            Self::EpisodeUpdatePushCmd => "EpisodeUpdatePushCmd",
            Self::InfoUpdatePushCmd => "InfoUpdatePushCmd",
            Self::GetAct109InfoRequestCmd => "GetAct109InfoRequestCmd",
            Self::Act109StartEpisodeRequestCmd => "Act109StartEpisodeRequestCmd",
            Self::Act109BeginRoundRequestCmd => "Act109BeginRoundRequestCmd",
            Self::Act109StepPushCmd => "Act109StepPushCmd",
            Self::Act109UseItemRequestCmd => "Act109UseItemRequestCmd",
            Self::Act109EventEndRequestCmd => "Act109EventEndRequestCmd",
            Self::Act109AbortRequestCmd => "Act109AbortRequestCmd",
            Self::Act109MarkNewEpisodeRedDotRequestCmd => {
                "Act109MarkNewEpisodeRedDotRequestCmd"
            }
            Self::Get111InfosRequestCmd => "Get111InfosRequestCmd",
            Self::FinishEpisodeRequestCmd => "FinishEpisodeRequestCmd",
            Self::Act111InfoPushCmd => "Act111InfoPushCmd",
            Self::PushBoxTaskPushCmd => "PushBoxTaskPushCmd",
            Self::ReceiveTaskRewardRequestCmd => "ReceiveTaskRewardRequestCmd",
            Self::MarkRedDot1039RequestCmd => "MarkRedDot1039RequestCmd",
            Self::Get112InfosRequestCmd => "Get112InfosRequestCmd",
            Self::Exchange112RequestCmd => "Exchange112RequestCmd",
            Self::Act112TaskPushCmd => "Act112TaskPushCmd",
            Self::ReceiveAct112TaskRewardRequestCmd => {
                "ReceiveAct112TaskRewardRequestCmd"
            }
            Self::GetAct113InfoRequestCmd => "GetAct113InfoRequestCmd",
            Self::Get114InfosRequestCmd => "Get114InfosRequestCmd",
            Self::Act114InfoPushCmd => "Act114InfoPushCmd",
            Self::Act114TaskPushCmd => "Act114TaskPushCmd",
            Self::ReceiveAct114TaskRewardRequestCmd => {
                "ReceiveAct114TaskRewardRequestCmd"
            }
            Self::Act114EducateRequestCmd => "Act114EducateRequestCmd",
            Self::Act114TravelRequestCmd => "Act114TravelRequestCmd",
            Self::Act114MeetingRequestCmd => "Act114MeetingRequestCmd",
            Self::CheckEventRequestCmd => "CheckEventRequestCmd",
            Self::Act114RestRequestCmd => "Act114RestRequestCmd",
            Self::Act114KeyDayRequestCmd => "Act114KeyDayRequestCmd",
            Self::Act114TestRequestCmd => "Act114TestRequestCmd",
            Self::Act114ResetRequestCmd => "Act114ResetRequestCmd",
            Self::BeforeAct114BattleRequestCmd => "BeforeAct114BattleRequestCmd",
            Self::EnterSchoolRequestCmd => "EnterSchoolRequestCmd",
            Self::MarkRoundStoryRequestCmd => "MarkRoundStoryRequestCmd",
            Self::MarkMeetingPlayUnlockRequestCmd => "MarkMeetingPlayUnlockRequestCmd",
            Self::MarkTravelPlayUnlockRequestCmd => "MarkTravelPlayUnlockRequestCmd",
            Self::MarkUnlockNewPhotoRedDotRequestCmd => {
                "MarkUnlockNewPhotoRedDotRequestCmd"
            }
            Self::GetAct115InfoRequestCmd => "GetAct115InfoRequestCmd",
            Self::Act115StartEpisodeRequestCmd => "Act115StartEpisodeRequestCmd",
            Self::Act115BeginRoundRequestCmd => "Act115BeginRoundRequestCmd",
            Self::Act115StepPushCmd => "Act115StepPushCmd",
            Self::Act115EventEndRequestCmd => "Act115EventEndRequestCmd",
            Self::Act115AbortRequestCmd => "Act115AbortRequestCmd",
            Self::Act115BonusRequestCmd => "Act115BonusRequestCmd",
            Self::Act115UseSkillRequestCmd => "Act115UseSkillRequestCmd",
            Self::Act115RevertRequestCmd => "Act115RevertRequestCmd",
            Self::Get116InfosRequestCmd => "Get116InfosRequestCmd",
            Self::UpgradeElementRequestCmd => "UpgradeElementRequestCmd",
            Self::BuildTrapRequestCmd => "BuildTrapRequestCmd",
            Self::PutTrapRequestCmd => "PutTrapRequestCmd",
            Self::Act116InfoUpdatePushCmd => "Act116InfoUpdatePushCmd",
            Self::Act117InfoRequestCmd => "Act117InfoRequestCmd",
            Self::Act117NegotiateRequestCmd => "Act117NegotiateRequestCmd",
            Self::Act117DealRequestCmd => "Act117DealRequestCmd",
            Self::Act117GetBonusRequestCmd => "Act117GetBonusRequestCmd",
            Self::Act117OrderPushCmd => "Act117OrderPushCmd",
            Self::GetAct120InfoRequestCmd => "GetAct120InfoRequestCmd",
            Self::Act120StartEpisodeRequestCmd => "Act120StartEpisodeRequestCmd",
            Self::Act120BeginRoundRequestCmd => "Act120BeginRoundRequestCmd",
            Self::Act120StepPushCmd => "Act120StepPushCmd",
            Self::Act120UseItemRequestCmd => "Act120UseItemRequestCmd",
            Self::Act120EventEndRequestCmd => "Act120EventEndRequestCmd",
            Self::Act120AbortRequestCmd => "Act120AbortRequestCmd",
            Self::Act120CheckPointRequestCmd => "Act120CheckPointRequestCmd",
            Self::Get121InfosRequestCmd => "Get121InfosRequestCmd",
            Self::Get121BonusRequestCmd => "Get121BonusRequestCmd",
            Self::Act121UpdatePushCmd => "Act121UpdatePushCmd",
            Self::GetAct122InfosRequestCmd => "GetAct122InfosRequestCmd",
            Self::Act122StartEpisodeRequestCmd => "Act122StartEpisodeRequestCmd",
            Self::Act122BeginRoundRequestCmd => "Act122BeginRoundRequestCmd",
            Self::Act122StepPushCmd => "Act122StepPushCmd",
            Self::Act122UseItemRequestCmd => "Act122UseItemRequestCmd",
            Self::Act122EventEndRequestCmd => "Act122EventEndRequestCmd",
            Self::Act122AbortRequestCmd => "Act122AbortRequestCmd",
            Self::Act122CheckPointRequestCmd => "Act122CheckPointRequestCmd",
            Self::Get123InfosRequestCmd => "Get123InfosRequestCmd",
            Self::Act123EnterStageRequestCmd => "Act123EnterStageRequestCmd",
            Self::Act123EndStageRequestCmd => "Act123EndStageRequestCmd",
            Self::StartAct123BattleRequestCmd => "StartAct123BattleRequestCmd",
            Self::Act123BattleFinishPushCmd => "Act123BattleFinishPushCmd",
            Self::Act123ChangeFightGroupRequestCmd => "Act123ChangeFightGroupRequestCmd",
            Self::Act123ItemChangePushCmd => "Act123ItemChangePushCmd",
            Self::ComposeAct123EquipRequestCmd => "ComposeAct123EquipRequestCmd",
            Self::DecomposeAct123EquipRequestCmd => "DecomposeAct123EquipRequestCmd",
            Self::Act123OpenCardBagRequestCmd => "Act123OpenCardBagRequestCmd",
            Self::GetUnlockAct123EquipIdsRequestCmd => {
                "GetUnlockAct123EquipIdsRequestCmd"
            }
            Self::Act123ResetOtherStageRequestCmd => "Act123ResetOtherStageRequestCmd",
            Self::Act123ResetHighLayerRequestCmd => "Act123ResetHighLayerRequestCmd",
            Self::GetAct123StageRecordRequestCmd => "GetAct123StageRecordRequestCmd",
            Self::GetAct124InfosRequestCmd => "GetAct124InfosRequestCmd",
            Self::FinishAct124EpisodeRequestCmd => "FinishAct124EpisodeRequestCmd",
            Self::ReceiveAct124RewardRequestCmd => "ReceiveAct124RewardRequestCmd",
            Self::GetAct125InfosRequestCmd => "GetAct125InfosRequestCmd",
            Self::FinishAct125EpisodeRequestCmd => "FinishAct125EpisodeRequestCmd",
            Self::Get126InfosRequestCmd => "Get126InfosRequestCmd",
            Self::UpdateProgressRequestCmd => "UpdateProgressRequestCmd",
            Self::ResetProgressRequestCmd => "ResetProgressRequestCmd",
            Self::HoroscopeRequestCmd => "HoroscopeRequestCmd",
            Self::GetHoroscopeRequestCmd => "GetHoroscopeRequestCmd",
            Self::UnlockBuffRequestCmd => "UnlockBuffRequestCmd",
            Self::ExchangeStarPushCmd => "ExchangeStarPushCmd",
            Self::Act126InfoUpdatePushCmd => "Act126InfoUpdatePushCmd",
            Self::EnterFightRequestCmd => "EnterFightRequestCmd",
            Self::Get128InfosRequestCmd => "Get128InfosRequestCmd",
            Self::Act128GetTotalRewardsRequestCmd => "Act128GetTotalRewardsRequestCmd",
            Self::Act128GetTotalSingleRewardRequestCmd => {
                "Act128GetTotalSingleRewardRequestCmd"
            }
            Self::Act128DoublePointRequestCmd => "Act128DoublePointRequestCmd",
            Self::Get129InfosRequestCmd => "Get129InfosRequestCmd",
            Self::Act129LotteryRequestCmd => "Act129LotteryRequestCmd",
            Self::Get130InfosRequestCmd => "Get130InfosRequestCmd",
            Self::Act130StoryRequestCmd => "Act130StoryRequestCmd",
            Self::Act130GeneralRequestCmd => "Act130GeneralRequestCmd",
            Self::Act130DialogRequestCmd => "Act130DialogRequestCmd",
            Self::Act130DialogHistoryRequestCmd => "Act130DialogHistoryRequestCmd",
            Self::Act130ElementsPushCmd => "Act130ElementsPushCmd",
            Self::Act130RestartEpisodeRequestCmd => "Act130RestartEpisodeRequestCmd",
            Self::Act130StartGameRequestCmd => "Act130StartGameRequestCmd",
            Self::Get131InfosRequestCmd => "Get131InfosRequestCmd",
            Self::Act131StoryRequestCmd => "Act131StoryRequestCmd",
            Self::Act131GeneralRequestCmd => "Act131GeneralRequestCmd",
            Self::Act131DialogRequestCmd => "Act131DialogRequestCmd",
            Self::Act131DialogHistoryRequestCmd => "Act131DialogHistoryRequestCmd",
            Self::Act131ElementsPushCmd => "Act131ElementsPushCmd",
            Self::Act131RestartEpisodeRequestCmd => "Act131RestartEpisodeRequestCmd",
            Self::BeforeAct131BattleRequestCmd => "BeforeAct131BattleRequestCmd",
            Self::Get132InfosRequestCmd => "Get132InfosRequestCmd",
            Self::Act132UnlockRequestCmd => "Act132UnlockRequestCmd",
            Self::Get133InfosRequestCmd => "Get133InfosRequestCmd",
            Self::Act133BonusRequestCmd => "Act133BonusRequestCmd",
            Self::Get134InfosRequestCmd => "Get134InfosRequestCmd",
            Self::Act134BonusRequestCmd => "Act134BonusRequestCmd",
            Self::Get136InfoRequestCmd => "Get136InfoRequestCmd",
            Self::Act136SelectRequestCmd => "Act136SelectRequestCmd",
            Self::Get139InfosRequestCmd => "Get139InfosRequestCmd",
            Self::Act139DispatchRequestCmd => "Act139DispatchRequestCmd",
            Self::Act139InterruptDispatchRequestCmd => {
                "Act139InterruptDispatchRequestCmd"
            }
            Self::Act139GainSubHeroTaskRewardRequestCmd => {
                "Act139GainSubHeroTaskRewardRequestCmd"
            }
            Self::Act139GainHeroTaskRewardRequestCmd => {
                "Act139GainHeroTaskRewardRequestCmd"
            }
            Self::Act139GainExploreRewardRequestCmd => {
                "Act139GainExploreRewardRequestCmd"
            }
            Self::Get140InfosRequestCmd => "Get140InfosRequestCmd",
            Self::Act140BuildRequestCmd => "Act140BuildRequestCmd",
            Self::Act140SelectBuildRequestCmd => "Act140SelectBuildRequestCmd",
            Self::Act140GainProgressRewardRequestCmd => {
                "Act140GainProgressRewardRequestCmd"
            }
            Self::GetAct142InfoRequestCmd => "GetAct142InfoRequestCmd",
            Self::Act142StartEpisodeRequestCmd => "Act142StartEpisodeRequestCmd",
            Self::Act142BeginRoundRequestCmd => "Act142BeginRoundRequestCmd",
            Self::Act142StepPushCmd => "Act142StepPushCmd",
            Self::Act142UseItemRequestCmd => "Act142UseItemRequestCmd",
            Self::Act142EventEndRequestCmd => "Act142EventEndRequestCmd",
            Self::Act142AbortRequestCmd => "Act142AbortRequestCmd",
            Self::Act142CheckPointRequestCmd => "Act142CheckPointRequestCmd",
            Self::GetAct142CollectionsRequestCmd => "GetAct142CollectionsRequestCmd",
            Self::Act142UseFireballRequestCmd => "Act142UseFireballRequestCmd",
            Self::Get144InfosRequestCmd => "Get144InfosRequestCmd",
            Self::Act144EnterEpisodeRequestCmd => "Act144EnterEpisodeRequestCmd",
            Self::Act144SelectOptionRequestCmd => "Act144SelectOptionRequestCmd",
            Self::Act144NextDayRequestCmd => "Act144NextDayRequestCmd",
            Self::Act144SettleEpisodeRequestCmd => "Act144SettleEpisodeRequestCmd",
            Self::Act144SettlePushCmd => "Act144SettlePushCmd",
            Self::Act144UpgradeEquipRequestCmd => "Act144UpgradeEquipRequestCmd",
            Self::Act144EpisodePushCmd => "Act144EpisodePushCmd",
            Self::Act144ItemChangePushCmd => "Act144ItemChangePushCmd",
            Self::Get145InfosRequestCmd => "Get145InfosRequestCmd",
            Self::Act145RemoveTaskRequestCmd => "Act145RemoveTaskRequestCmd",
            Self::Act145GameRequestCmd => "Act145GameRequestCmd",
            Self::Act145GetRewardsRequestCmd => "Act145GetRewardsRequestCmd",
            Self::Act145ClearGameRecordRequestCmd => "Act145ClearGameRecordRequestCmd",
            Self::Act145InfoUpdatePushCmd => "Act145InfoUpdatePushCmd",
            Self::GetAct146InfosRequestCmd => "GetAct146InfosRequestCmd",
            Self::FinishAct146EpisodeRequestCmd => "FinishAct146EpisodeRequestCmd",
            Self::Act146EpisodeBonusRequestCmd => "Act146EpisodeBonusRequestCmd",
            Self::GetAct147InfosRequestCmd => "GetAct147InfosRequestCmd",
            Self::BuyAct147GoodsRequestCmd => "BuyAct147GoodsRequestCmd",
            Self::Get148InfoRequestCmd => "Get148InfoRequestCmd",
            Self::Act148UpLevelRequestCmd => "Act148UpLevelRequestCmd",
            Self::Act148DownLevelRequestCmd => "Act148DownLevelRequestCmd",
            Self::Act148ResetRequestCmd => "Act148ResetRequestCmd",
            Self::Get149InfoRequestCmd => "Get149InfoRequestCmd",
            Self::Act149GetScoreRewardsRequestCmd => "Act149GetScoreRewardsRequestCmd",
            Self::Act149GainDailyBonusRequestCmd => "Act149GainDailyBonusRequestCmd",
            Self::Get152InfoRequestCmd => "Get152InfoRequestCmd",
            Self::Act152AcceptPresentRequestCmd => "Act152AcceptPresentRequestCmd",
            Self::Get153InfosRequestCmd => "Get153InfosRequestCmd",
            Self::Act153CountChangePushCmd => "Act153CountChangePushCmd",
            Self::Get154InfosRequestCmd => "Get154InfosRequestCmd",
            Self::Answer154PuzzleRequestCmd => "Answer154PuzzleRequestCmd",
            Self::Get157InfoRequestCmd => "Get157InfoRequestCmd",
            Self::Act157UnlockComponentRequestCmd => "Act157UnlockComponentRequestCmd",
            Self::Act157GainMilestoneRewardRequestCmd => {
                "Act157GainMilestoneRewardRequestCmd"
            }
            Self::Act157AcceptProductionRequestCmd => "Act157AcceptProductionRequestCmd",
            Self::Act157CompoundRequestCmd => "Act157CompoundRequestCmd",
            Self::ProductionInfoChangePushCmd => "ProductionInfoChangePushCmd",
            Self::Get158InfosRequestCmd => "Get158InfosRequestCmd",
            Self::Act158StartChallengeRequestCmd => "Act158StartChallengeRequestCmd",
            Self::Act158AbandonChallengeRequestCmd => "Act158AbandonChallengeRequestCmd",
            Self::Get159InfosRequestCmd => "Get159InfosRequestCmd",
            Self::Get159BonusRequestCmd => "Get159BonusRequestCmd",
            Self::Act160GetInfoRequestCmd => "Act160GetInfoRequestCmd",
            Self::Act160UpdatePushCmd => "Act160UpdatePushCmd",
            Self::Act160FinishMissionRequestCmd => "Act160FinishMissionRequestCmd",
            Self::Act161GetInfoRequestCmd => "Act161GetInfoRequestCmd",
            Self::Act161RefreshElementsRequestCmd => "Act161RefreshElementsRequestCmd",
            Self::Act161GainMilestoneRewardRequestCmd => {
                "Act161GainMilestoneRewardRequestCmd"
            }
            Self::Act161CdBeginPushCmd => "Act161CdBeginPushCmd",
            Self::Get163InfosRequestCmd => "Get163InfosRequestCmd",
            Self::Act163StartEvidenceRequestCmd => "Act163StartEvidenceRequestCmd",
            Self::Act163EvidenceOperationRequestCmd => {
                "Act163EvidenceOperationRequestCmd"
            }
            Self::Act163InfoPushCmd => "Act163InfoPushCmd",
            Self::Act163ReadClueRequestCmd => "Act163ReadClueRequestCmd",
            Self::GetAct164InfoRequestCmd => "GetAct164InfoRequestCmd",
            Self::Act164StartEpisodeRequestCmd => "Act164StartEpisodeRequestCmd",
            Self::Act164ReStartEpisodeRequestCmd => "Act164ReStartEpisodeRequestCmd",
            Self::Act164BeginRoundRequestCmd => "Act164BeginRoundRequestCmd",
            Self::Act164StepPushCmd => "Act164StepPushCmd",
            Self::Act164RollbackRequestCmd => "Act164RollbackRequestCmd",
            Self::Act164AbortRequestCmd => "Act164AbortRequestCmd",
            Self::Act165GetInfoRequestCmd => "Act165GetInfoRequestCmd",
            Self::Act165ModifyKeywordRequestCmd => "Act165ModifyKeywordRequestCmd",
            Self::Act165GenerateEndingRequestCmd => "Act165GenerateEndingRequestCmd",
            Self::Act165RestartRequestCmd => "Act165RestartRequestCmd",
            Self::Act165GainMilestoneRewardRequestCmd => {
                "Act165GainMilestoneRewardRequestCmd"
            }
            Self::Get166InfosRequestCmd => "Get166InfosRequestCmd",
            Self::Act166EnterBaseRequestCmd => "Act166EnterBaseRequestCmd",
            Self::Act166AnalyInfoRequestCmd => "Act166AnalyInfoRequestCmd",
            Self::Act166ReceiveInfoBonusRequestCmd => "Act166ReceiveInfoBonusRequestCmd",
            Self::Act166ReceiveInformationBonusRequestCmd => {
                "Act166ReceiveInformationBonusRequestCmd"
            }
            Self::Act166SetTalentSkillRequestCmd => "Act166SetTalentSkillRequestCmd",
            Self::StartAct166BattleRequestCmd => "StartAct166BattleRequestCmd",
            Self::Act166BattleFinishPushCmd => "Act166BattleFinishPushCmd",
            Self::Act166InfoPushCmd => "Act166InfoPushCmd",
            Self::Act166TalentPushCmd => "Act166TalentPushCmd",
            Self::GetAct167InfoRequestCmd => "GetAct167InfoRequestCmd",
            Self::Act167StartEpisodeRequestCmd => "Act167StartEpisodeRequestCmd",
            Self::Act167ReStartEpisodeRequestCmd => "Act167ReStartEpisodeRequestCmd",
            Self::Act167BeginRoundRequestCmd => "Act167BeginRoundRequestCmd",
            Self::Act167StepPushCmd => "Act167StepPushCmd",
            Self::Act167RollbackRequestCmd => "Act167RollbackRequestCmd",
            Self::Act167AbortRequestCmd => "Act167AbortRequestCmd",
            Self::Get168InfosRequestCmd => "Get168InfosRequestCmd",
            Self::Act168StoryRequestCmd => "Act168StoryRequestCmd",
            Self::Act168EnterEpisodeRequestCmd => "Act168EnterEpisodeRequestCmd",
            Self::StartAct168BattleRequestCmd => "StartAct168BattleRequestCmd",
            Self::Act168BattleFinishPushCmd => "Act168BattleFinishPushCmd",
            Self::Act168GameMoveRequestCmd => "Act168GameMoveRequestCmd",
            Self::Act168GameSelectOptionRequestCmd => "Act168GameSelectOptionRequestCmd",
            Self::Act168GameComposeItemRequestCmd => "Act168GameComposeItemRequestCmd",
            Self::Act168GameSettleRequestCmd => "Act168GameSettleRequestCmd",
            Self::Act168EpisodePushCmd => "Act168EpisodePushCmd",
            Self::Act168GameSettlePushCmd => "Act168GameSettlePushCmd",
            Self::Act168GameItemChangePushCmd => "Act168GameItemChangePushCmd",
            Self::Get169InfoRequestCmd => "Get169InfoRequestCmd",
            Self::Act169SummonRequestCmd => "Act169SummonRequestCmd",
            Self::Get170InfoRequestCmd => "Get170InfoRequestCmd",
            Self::Act170SummonRequestCmd => "Act170SummonRequestCmd",
            Self::Act170SaveRequestCmd => "Act170SaveRequestCmd",
            Self::Act170SelectRequestCmd => "Act170SelectRequestCmd",
            Self::Get171InfoRequestCmd => "Get171InfoRequestCmd",
            Self::GetAct172InfoRequestCmd => "GetAct172InfoRequestCmd",
            Self::Act172UseItemTaskIdsUpdatePushCmd => {
                "Act172UseItemTaskIdsUpdatePushCmd"
            }
            Self::GetAct174InfoRequestCmd => "GetAct174InfoRequestCmd",
            Self::Start174GameRequestCmd => "Start174GameRequestCmd",
            Self::Fresh174ShopRequestCmd => "Fresh174ShopRequestCmd",
            Self::BuyIn174ShopRequestCmd => "BuyIn174ShopRequestCmd",
            Self::ChangeAct174TeamRequestCmd => "ChangeAct174TeamRequestCmd",
            Self::SwitchAct174TeamRequestCmd => "SwitchAct174TeamRequestCmd",
            Self::SelectAct174ForceBagRequestCmd => "SelectAct174ForceBagRequestCmd",
            Self::StartAct174FightMatchRequestCmd => "StartAct174FightMatchRequestCmd",
            Self::BetHpBeforeAct174FightRequestCmd => "BetHpBeforeAct174FightRequestCmd",
            Self::EnterEndLessAct174FightRequestCmd => {
                "EnterEndLessAct174FightRequestCmd"
            }
            Self::EndAct174GameRequestCmd => "EndAct174GameRequestCmd",
            Self::StartAct174FightRequestCmd => "StartAct174FightRequestCmd",
            Self::EnterNextAct174FightRequestCmd => "EnterNextAct174FightRequestCmd",
            Self::ChangeSeasonEndAct174RequestCmd => "ChangeSeasonEndAct174RequestCmd",
            Self::ViewFightAct174RequestCmd => "ViewFightAct174RequestCmd",
            Self::TempAct174RequestCmd => "TempAct174RequestCmd",
            Self::Act174GameInfoUpdatePushCmd => "Act174GameInfoUpdatePushCmd",
            Self::Act174TriggerEffectPushCmd => "Act174TriggerEffectPushCmd",
            Self::GetAct178InfoRequestCmd => "GetAct178InfoRequestCmd",
            Self::Act178StartEpisodeRequestCmd => "Act178StartEpisodeRequestCmd",
            Self::Act178EndEpisodeRequestCmd => "Act178EndEpisodeRequestCmd",
            Self::Act178EndRoundRequestCmd => "Act178EndRoundRequestCmd",
            Self::Act178RestRequestCmd => "Act178RestRequestCmd",
            Self::Act178ResetRequestCmd => "Act178ResetRequestCmd",
            Self::Act178UnlockTalentRequestCmd => "Act178UnlockTalentRequestCmd",
            Self::Act178BuildRequestCmd => "Act178BuildRequestCmd",
            Self::Act178GetRewardRequestCmd => "Act178GetRewardRequestCmd",
            Self::Act178InteractRequestCmd => "Act178InteractRequestCmd",
            Self::Act178CurrencyChangePushCmd => "Act178CurrencyChangePushCmd",
            Self::Act178GuideAddGrainRequestCmd => "Act178GuideAddGrainRequestCmd",
            Self::Get179InfosRequestCmd => "Get179InfosRequestCmd",
            Self::Set179ScoreRequestCmd => "Set179ScoreRequestCmd",
            Self::Get180InfosRequestCmd => "Get180InfosRequestCmd",
            Self::Act180EnterEpisodeRequestCmd => "Act180EnterEpisodeRequestCmd",
            Self::Act180StoryRequestCmd => "Act180StoryRequestCmd",
            Self::Act180GameFinishRequestCmd => "Act180GameFinishRequestCmd",
            Self::Act180SaveGameRequestCmd => "Act180SaveGameRequestCmd",
            Self::Act180EpisodePushCmd => "Act180EpisodePushCmd",
            Self::Get181InfosRequestCmd => "Get181InfosRequestCmd",
            Self::Get181BonusRequestCmd => "Get181BonusRequestCmd",
            Self::Get181SpBonusRequestCmd => "Get181SpBonusRequestCmd",
            Self::GetAct182InfoRequestCmd => "GetAct182InfoRequestCmd",
            Self::GetAct182RandomMasterRequestCmd => "GetAct182RandomMasterRequestCmd",
            Self::Act182RefreshMasterRequestCmd => "Act182RefreshMasterRequestCmd",
            Self::Act182InfoPushCmd => "Act182InfoPushCmd",
            Self::Act182GetRankRewardRequestCmd => "Act182GetRankRewardRequestCmd",
            Self::Act183GetInfoRequestCmd => "Act183GetInfoRequestCmd",
            Self::Act183ResetGroupRequestCmd => "Act183ResetGroupRequestCmd",
            Self::Act183ResetEpisodeRequestCmd => "Act183ResetEpisodeRequestCmd",
            Self::Act183ChooseRepressRequestCmd => "Act183ChooseRepressRequestCmd",
            Self::Act183GetRecordRequestCmd => "Act183GetRecordRequestCmd",
            Self::Act183ReplaceResultRequestCmd => "Act183ReplaceResultRequestCmd",
            Self::Act183BadgeNumUpdatePushCmd => "Act183BadgeNumUpdatePushCmd",
            Self::Act183BattleFinishPushCmd => "Act183BattleFinishPushCmd",
            Self::GetAct184InfoRequestCmd => "GetAct184InfoRequestCmd",
            Self::Act184FinishEpisodeRequestCmd => "Act184FinishEpisodeRequestCmd",
            Self::Act184EpisodePushCmd => "Act184EpisodePushCmd",
            Self::GetAct185InfoRequestCmd => "GetAct185InfoRequestCmd",
            Self::Act185FinishEpisodeRequestCmd => "Act185FinishEpisodeRequestCmd",
            Self::Act185EpisodePushCmd => "Act185EpisodePushCmd",
            Self::GetAct186InfoRequestCmd => "GetAct186InfoRequestCmd",
            Self::FinishAct186TaskRequestCmd => "FinishAct186TaskRequestCmd",
            Self::GetAct186MilestoneRewardRequestCmd => {
                "GetAct186MilestoneRewardRequestCmd"
            }
            Self::GetAct186DailyCollectionRequestCmd => {
                "GetAct186DailyCollectionRequestCmd"
            }
            Self::Act186TaskPushCmd => "Act186TaskPushCmd",
            Self::Act186LikePushCmd => "Act186LikePushCmd",
            Self::FinishAct186ATypeGameRequestCmd => "FinishAct186ATypeGameRequestCmd",
            Self::Act186BTypeGamePlayRequestCmd => "Act186BTypeGamePlayRequestCmd",
            Self::FinishAct186BTypeGameRequestCmd => "FinishAct186BTypeGameRequestCmd",
            Self::GetAct186OnceBonusRequestCmd => "GetAct186OnceBonusRequestCmd",
            Self::Get187InfoRequestCmd => "Get187InfoRequestCmd",
            Self::Act187FinishGameRequestCmd => "Act187FinishGameRequestCmd",
            Self::Act187AcceptRewardRequestCmd => "Act187AcceptRewardRequestCmd",
            Self::GetAct189InfoRequestCmd => "GetAct189InfoRequestCmd",
            Self::GetAct189OnceBonusRequestCmd => "GetAct189OnceBonusRequestCmd",
            Self::GetActivityInfosRequestCmd => "GetActivityInfosRequestCmd",
            Self::GetActivityInfosWithParamRequestCmd => {
                "GetActivityInfosWithParamRequestCmd"
            }
            Self::UpdateActivityPushCmd => "UpdateActivityPushCmd",
            Self::EndActivityPushCmd => "EndActivityPushCmd",
            Self::ActivityNewStageReadRequestCmd => "ActivityNewStageReadRequestCmd",
            Self::UnlockPermanentRequestCmd => "UnlockPermanentRequestCmd",
            Self::GetAntiqueInfoRequestCmd => "GetAntiqueInfoRequestCmd",
            Self::AntiqueUpdatePushCmd => "AntiqueUpdatePushCmd",
            Self::AutoChessGetSceneRequestCmd => "AutoChessGetSceneRequestCmd",
            Self::AutoChessEnterSceneRequestCmd => "AutoChessEnterSceneRequestCmd",
            Self::AutoChessEnterFightRequestCmd => "AutoChessEnterFightRequestCmd",
            Self::AutoChessBuyChessRequestCmd => "AutoChessBuyChessRequestCmd",
            Self::AutoChessBuildRequestCmd => "AutoChessBuildRequestCmd",
            Self::AutoChessRefreshMallRequestCmd => "AutoChessRefreshMallRequestCmd",
            Self::AutoChessFreezeItemRequestCmd => "AutoChessFreezeItemRequestCmd",
            Self::AutoChessMallRegionSelectItemRequestCmd => {
                "AutoChessMallRegionSelectItemRequestCmd"
            }
            Self::AutoChessUseMasterSkillRequestCmd => {
                "AutoChessUseMasterSkillRequestCmd"
            }
            Self::AutoChessPreviewFightRequestCmd => "AutoChessPreviewFightRequestCmd",
            Self::AutoChessGiveUpRequestCmd => "AutoChessGiveUpRequestCmd",
            Self::AutoChessMallUpgradePushCmd => "AutoChessMallUpgradePushCmd",
            Self::AutoChessScenePushCmd => "AutoChessScenePushCmd",
            Self::AutoChessRoundSettlePushCmd => "AutoChessRoundSettlePushCmd",
            Self::AutoChessSettlePushCmd => "AutoChessSettlePushCmd",
            Self::GetBannerInfoRequestCmd => "GetBannerInfoRequestCmd",
            Self::SetBannerNotShowRequestCmd => "SetBannerNotShowRequestCmd",
            Self::SetUseBgmRequestCmd => "SetUseBgmRequestCmd",
            Self::SetFavoriteBgmRequestCmd => "SetFavoriteBgmRequestCmd",
            Self::GetBgmInfoRequestCmd => "GetBgmInfoRequestCmd",
            Self::UpdateBgmPushCmd => "UpdateBgmPushCmd",
            Self::ReadBgmRequestCmd => "ReadBgmRequestCmd",
            Self::GetBpInfoRequestCmd => "GetBpInfoRequestCmd",
            Self::GetBpBonusRequestCmd => "GetBpBonusRequestCmd",
            Self::BpScoreUpdatePushCmd => "BpScoreUpdatePushCmd",
            Self::BpPayPushCmd => "BpPayPushCmd",
            Self::BpBuyLevelRequsetCmd => "BpBuyLevelRequsetCmd",
            Self::BpMarkFirstShowRequestCmd => "BpMarkFirstShowRequestCmd",
            Self::BpOpenPushCmd => "BpOpenPushCmd",
            Self::GetSelfSelectBonusRequestCmd => "GetSelfSelectBonusRequestCmd",
            Self::GetChargeInfoRequestCmd => "GetChargeInfoRequestCmd",
            Self::NewOrderRequestCmd => "NewOrderRequestCmd",
            Self::OrderCompletePushCmd => "OrderCompletePushCmd",
            Self::GetMonthCardInfoRequestCmd => "GetMonthCardInfoRequestCmd",
            Self::GetMonthCardBonusRequestCmd => "GetMonthCardBonusRequestCmd",
            Self::SandboxChargeRequsetCmd => "SandboxChargeRequsetCmd",
            Self::ReadChargeNewRequestCmd => "ReadChargeNewRequestCmd",
            Self::SendMsgRequestCmd => "SendMsgRequestCmd",
            Self::DeleteOfflineMsgRequestCmd => "DeleteOfflineMsgRequestCmd",
            Self::ChatMsgPushCmd => "ChatMsgPushCmd",
            Self::GetReportTypeRequestCmd => "GetReportTypeRequestCmd",
            Self::ReportRequestCmd => "ReportRequestCmd",
            Self::WordTestRequestCmd => "WordTestRequestCmd",
            Self::GetServerTimeRequestCmd => "GetServerTimeRequestCmd",
            Self::CritterGetInfoRequestCmd => "CritterGetInfoRequestCmd",
            Self::StartTrainCritterRequestCmd => "StartTrainCritterRequestCmd",
            Self::SelectEventOptionRequestCmd => "SelectEventOptionRequestCmd",
            Self::SelectMultiEventOptionRequestCmd => "SelectMultiEventOptionRequestCmd",
            Self::FastForwardTrainRequestCmd => "FastForwardTrainRequestCmd",
            Self::FinishTrainCritterRequestCmd => "FinishTrainCritterRequestCmd",
            Self::BanishCritterRequestCmd => "BanishCritterRequestCmd",
            Self::SummonCritterInfoRequestCmd => "SummonCritterInfoRequestCmd",
            Self::SummonCritterRequestCmd => "SummonCritterRequestCmd",
            Self::LockCritterRequestCmd => "LockCritterRequestCmd",
            Self::ResetSummonCritterPoolRequestCmd => "ResetSummonCritterPoolRequestCmd",
            Self::GainGuideCritterRequestCmd => "GainGuideCritterRequestCmd",
            Self::IncubateCritterRequestCmd => "IncubateCritterRequestCmd",
            Self::CritterInfoPushCmd => "CritterInfoPushCmd",
            Self::IncubateCritterPreviewRequestCmd => "IncubateCritterPreviewRequestCmd",
            Self::GetCritterBookInfoRequestCmd => "GetCritterBookInfoRequestCmd",
            Self::SetCritterBookBackgroundRequestCmd => {
                "SetCritterBookBackgroundRequestCmd"
            }
            Self::SetCritterBookUseSpecialSkinRequestCmd => {
                "SetCritterBookUseSpecialSkinRequestCmd"
            }
            Self::CancelTrainRequestCmd => "CancelTrainRequestCmd",
            Self::MarkCritterBookNewReadRequestCmd => "MarkCritterBookNewReadRequestCmd",
            Self::RefreshCritterMoodRequestCmd => "RefreshCritterMoodRequestCmd",
            Self::GetRealCritterAttributeRequestCmd => {
                "GetRealCritterAttributeRequestCmd"
            }
            Self::RefreshBuildingCritterAttibutesRequestCmd => {
                "RefreshBuildingCritterAttibutesRequestCmd"
            }
            Self::RealCritterAttributePushCmd => "RealCritterAttributePushCmd",
            Self::StartTrainCritterPreviewRequestCmd => {
                "StartTrainCritterPreviewRequestCmd"
            }
            Self::CritterRenameRequestCmd => "CritterRenameRequestCmd",
            Self::GetCurrencyListRequestCmd => "GetCurrencyListRequestCmd",
            Self::CurrencyChangePushCmd => "CurrencyChangePushCmd",
            Self::GetBuyPowerInfoRequestCmd => "GetBuyPowerInfoRequestCmd",
            Self::BuyPowerRequestCmd => "BuyPowerRequestCmd",
            Self::ExchangeDiamondRequestCmd => "ExchangeDiamondRequestCmd",
            Self::GetDialogInfoRequestCmd => "GetDialogInfoRequestCmd",
            Self::RecordDialogInfoRequestCmd => "RecordDialogInfoRequestCmd",
            Self::GetDispatchInfoRequestCmd => "GetDispatchInfoRequestCmd",
            Self::DispatchRequestCmd => "DispatchRequestCmd",
            Self::InterruptDispatchRequestCmd => "InterruptDispatchRequestCmd",
            Self::GetDungeonRequestCmd => "GetDungeonRequestCmd",
            Self::DungeonUpdatePushCmd => "DungeonUpdatePushCmd",
            Self::DungeonInfosPushCmd => "DungeonInfosPushCmd",
            Self::StartDungeonRequestCmd => "StartDungeonRequestCmd",
            Self::EndDungeonRequestCmd => "EndDungeonRequestCmd",
            Self::EndDungeonPushCmd => "EndDungeonPushCmd",
            Self::MapElementRequestCmd => "MapElementRequestCmd",
            Self::ChapterMapUpdatePushCmd => "ChapterMapUpdatePushCmd",
            Self::ChapterMapElementUpdatePushCmd => "ChapterMapElementUpdatePushCmd",
            Self::GetPointRewardRequestCmd => "GetPointRewardRequestCmd",
            Self::GetEpisodeHeroRecommendRequestCmd => {
                "GetEpisodeHeroRecommendRequestCmd"
            }
            Self::EquipSpDungeonUpdatePushCmd => "EquipSpDungeonUpdatePushCmd",
            Self::RewardPointUpdatePushCmd => "RewardPointUpdatePushCmd",
            Self::InstructionDungeonRewardRequestCmd => {
                "InstructionDungeonRewardRequestCmd"
            }
            Self::InstructionDungeonFinalRewardRequestCmd => {
                "InstructionDungeonFinalRewardRequestCmd"
            }
            Self::InstructionDungeonInfoRequestCmd => "InstructionDungeonInfoRequestCmd",
            Self::InstructionDungeonInfoPushCmd => "InstructionDungeonInfoPushCmd",
            Self::InstructionDungeonOpenRequestCmd => "InstructionDungeonOpenRequestCmd",
            Self::CoverDungeonRecordRequestCmd => "CoverDungeonRecordRequestCmd",
            Self::PuzzleFinishRequestCmd => "PuzzleFinishRequestCmd",
            Self::SavePuzzleProgressRequestCmd => "SavePuzzleProgressRequestCmd",
            Self::GetPuzzleProgressRequestCmd => "GetPuzzleProgressRequestCmd",
            Self::RefreshAssistRequestCmd => "RefreshAssistRequestCmd",
            Self::GetMainDramaRewardRequestCmd => "GetMainDramaRewardRequestCmd",
            Self::GetEquipInfoRequestCmd => "GetEquipInfoRequestCmd",
            Self::EquipUpdatePushCmd => "EquipUpdatePushCmd",
            Self::EquipDeletePushCmd => "EquipDeletePushCmd",
            Self::EquipStrengthenRequestCmd => "EquipStrengthenRequestCmd",
            Self::EquipBreakRequestCmd => "EquipBreakRequestCmd",
            Self::EquipLockRequestCmd => "EquipLockRequestCmd",
            Self::EquipComposeRequestCmd => "EquipComposeRequestCmd",
            Self::EquipDecomposeRequestCmd => "EquipDecomposeRequestCmd",
            Self::EquipRefineRequestCmd => "EquipRefineRequestCmd",
            Self::GetExploreInfoRequestCmd => "GetExploreInfoRequestCmd",
            Self::GetExploreSimpleInfoRequestCmd => "GetExploreSimpleInfoRequestCmd",
            Self::ChangeMapRequestCmd => "ChangeMapRequestCmd",
            Self::ExploreMoveRequestCmd => "ExploreMoveRequestCmd",
            Self::ExploreUseItemRequestCmd => "ExploreUseItemRequestCmd",
            Self::ExploreItemChangePushCmd => "ExploreItemChangePushCmd",
            Self::ExploreInteractRequestCmd => "ExploreInteractRequestCmd",
            Self::ExploreItemInteractRequestCmd => "ExploreItemInteractRequestCmd",
            Self::ExploreStepPushCmd => "ExploreStepPushCmd",
            Self::ResetExploreRequestCmd => "ResetExploreRequestCmd",
            Self::GetFairylandInfoRequestCmd => "GetFairylandInfoRequestCmd",
            Self::ResolvePuzzleRequestCmd => "ResolvePuzzleRequestCmd",
            Self::RecordDialogRequestCmd => "RecordDialogRequestCmd",
            Self::RecordElementRequestCmd => "RecordElementRequestCmd",
            Self::BeginFightRequestCmd => "BeginFightRequestCmd",
            Self::TestFightRequestCmd => "TestFightRequestCmd",
            Self::TestFightIdRequestCmd => "TestFightIdRequestCmd",
            Self::MoveCardRequestCmd => "MoveCardRequestCmd",
            Self::ResetRoundRequestCmd => "ResetRoundRequestCmd",
            Self::BeginRoundRequestCmd => "BeginRoundRequestCmd",
            Self::EndRoundRequestCmd => "EndRoundRequestCmd",
            Self::ChangeSubHeroRequestCmd => "ChangeSubHeroRequestCmd",
            Self::ChangeSubHeroExSkillRequestCmd => "ChangeSubHeroExSkillRequestCmd",
            Self::ReconnectFightRequestCmd => "ReconnectFightRequestCmd",
            Self::CardInfoPushCmd => "CardInfoPushCmd",
            Self::TeamInfoPushCmd => "TeamInfoPushCmd",
            Self::EndFightRequestCmd => "EndFightRequestCmd",
            Self::EndFightPushCmd => "EndFightPushCmd",
            Self::FightWavePushCmd => "FightWavePushCmd",
            Self::UseClothSkillRequestCmd => "UseClothSkillRequestCmd",
            Self::RedealCardInfoPushCmd => "RedealCardInfoPushCmd",
            Self::AutoRoundRequestCmd => "AutoRoundRequestCmd",
            Self::GetFightOperRequestCmd => "GetFightOperRequestCmd",
            Self::GetFightRecordGroupRequestCmd => "GetFightRecordGroupRequestCmd",
            Self::EntityInfoRequestCmd => "EntityInfoRequestCmd",
            Self::GetFightCardDeckInfoRequestCmd => "GetFightCardDeckInfoRequestCmd",
            Self::GetEntityDetailInfosRequestCmd => "GetEntityDetailInfosRequestCmd",
            Self::GetFightRecordAllRequestCmd => "GetFightRecordAllRequestCmd",
            Self::FightWithRecordAllRequestCmd => "FightWithRecordAllRequestCmd",
            Self::GetFightCardDeckDetailInfoRequestCmd => {
                "GetFightCardDeckDetailInfoRequestCmd"
            }
            Self::GetApplyListRequestCmd => "GetApplyListRequestCmd",
            Self::ApplyRequestCmd => "ApplyRequestCmd",
            Self::HandleApplyRequestCmd => "HandleApplyRequestCmd",
            Self::RejectAllRequestCmd => "RejectAllRequestCmd",
            Self::GetFriendInfoListRequestCmd => "GetFriendInfoListRequestCmd",
            Self::AddBlacklistRequestCmd => "AddBlacklistRequestCmd",
            Self::RemoveBlacklistRequestCmd => "RemoveBlacklistRequestCmd",
            Self::RemoveFriendRequestCmd => "RemoveFriendRequestCmd",
            Self::SearchRequestCmd => "SearchRequestCmd",
            Self::GetBlacklistRequestCmd => "GetBlacklistRequestCmd",
            Self::BlacklistChangePushCmd => "BlacklistChangePushCmd",
            Self::AgreeAllRequestCmd => "AgreeAllRequestCmd",
            Self::LoadFriendInfosRequestCmd => "LoadFriendInfosRequestCmd",
            Self::FriendChangePushCmd => "FriendChangePushCmd",
            Self::FriendDescChangeRequestCmd => "FriendDescChangeRequestCmd",
            Self::GetRecommendedFriendsRequestCmd => "GetRecommendedFriendsRequestCmd",
            Self::GmRequestCmd => "GMRequestCmd",
            Self::GpuCpuLogRequestCmd => "GpuCpuLogRequestCmd",
            Self::GmSummonResultPushCmd => "GMSummonResultPushCmd",
            Self::FightTipsMessagePushCmd => "FightTipsMessagePushCmd",
            Self::FinishGuideRequestCmd => "FinishGuideRequestCmd",
            Self::UpdateGuidePushCmd => "UpdateGuidePushCmd",
            Self::GetGuideInfoRequestCmd => "GetGuideInfoRequestCmd",
            Self::GetHandbookInfoRequestCmd => "GetHandbookInfoRequestCmd",
            Self::HandbookReadRequestCmd => "HandbookReadRequestCmd",
            Self::GetHeroGroupListRequestCmd => "GetHeroGroupListRequestCmd",
            Self::UpdateHeroGroupRequestCmd => "UpdateHeroGroupRequestCmd",
            Self::SetHeroGroupEquipRequestCmd => "SetHeroGroupEquipRequestCmd",
            Self::SetHeroGroupSnapshotRequestCmd => "SetHeroGroupSnapshotRequestCmd",
            Self::UpdateHeroGroupPushCmd => "UpdateHeroGroupPushCmd",
            Self::GetHeroGroupCommonListRequestCmd => "GetHeroGroupCommonListRequestCmd",
            Self::ChangeHeroGroupSelectRequestCmd => "ChangeHeroGroupSelectRequestCmd",
            Self::UpdateHeroGroupNameRequestCmd => "UpdateHeroGroupNameRequestCmd",
            Self::GetHeroGroupSnapshotListRequestCmd => {
                "GetHeroGroupSnapshotListRequestCmd"
            }
            Self::GetHeroInvitationInfoRequestCmd => "GetHeroInvitationInfoRequestCmd",
            Self::GainInviteRewardRequestCmd => "GainInviteRewardRequestCmd",
            Self::GainFinalInviteRewardRequestCmd => "GainFinalInviteRewardRequestCmd",
            Self::HeroInfoListRequestCmd => "HeroInfoListRequestCmd",
            Self::HeroUpdatePushCmd => "HeroUpdatePushCmd",
            Self::HeroUpgradeSkillRequestCmd => "HeroUpgradeSkillRequestCmd",
            Self::HeroLevelUpRequestCmd => "HeroLevelUpRequestCmd",
            Self::HeroRankUpRequestCmd => "HeroRankUpRequestCmd",
            Self::UseSkinRequestCmd => "UseSkinRequestCmd",
            Self::HeroSkinGainPushCmd => "HeroSkinGainPushCmd",
            Self::UnMarkIsNewRequestCmd => "UnMarkIsNewRequestCmd",
            Self::UnlockVoiceRequestCmd => "UnlockVoiceRequestCmd",
            Self::ItemUnlockRequestCmd => "ItemUnlockRequestCmd",
            Self::HeroGainPushCmd => "HeroGainPushCmd",
            Self::HeroTouchRequestCmd => "HeroTouchRequestCmd",
            Self::HeroTalentUpRequestCmd => "HeroTalentUpRequestCmd",
            Self::PutTalentCubeRequestCmd => "PutTalentCubeRequestCmd",
            Self::TakeoffAllTalentCubeRequestCmd => "TakeoffAllTalentCubeRequestCmd",
            Self::PutTalentSchemeRequestCmd => "PutTalentSchemeRequestCmd",
            Self::HeroDefaultEquipRequestCmd => "HeroDefaultEquipRequestCmd",
            Self::RenameTalentTemplateRequestCmd => "RenameTalentTemplateRequestCmd",
            Self::UseTalentTemplateRequestCmd => "UseTalentTemplateRequestCmd",
            Self::UnlockTalentStyleRequestCmd => "UnlockTalentStyleRequestCmd",
            Self::UseTalentStyleRequestCmd => "UseTalentStyleRequestCmd",
            Self::TalentStyleReadRequestCmd => "TalentStyleReadRequestCmd",
            Self::MarkHeroFavorRequestCmd => "MarkHeroFavorRequestCmd",
            Self::HeroLevelUpUpdatePushCmd => "HeroLevelUpUpdatePushCmd",
            Self::HeroTalentStyleStatRequestCmd => "HeroTalentStyleStatRequestCmd",
            Self::DestinyLevelUpRequestCmd => "DestinyLevelUpRequestCmd",
            Self::DestinyRankUpRequestCmd => "DestinyRankUpRequestCmd",
            Self::DestinyStoneUnlockRequestCmd => "DestinyStoneUnlockRequestCmd",
            Self::DestinyStoneUseRequestCmd => "DestinyStoneUseRequestCmd",
            Self::HeroRedDotReadRequestCmd => "HeroRedDotReadRequestCmd",
            Self::PutTalentCubeBatchRequestCmd => "PutTalentCubeBatchRequestCmd",
            Self::GetHeroStoryRequestCmd => "GetHeroStoryRequestCmd",
            Self::UnlocHeroStoryRequestCmd => "UnlocHeroStoryRequestCmd",
            Self::GetHeroStoryBonusRequestCmd => "GetHeroStoryBonusRequestCmd",
            Self::HeroStoryUpdatePushCmd => "HeroStoryUpdatePushCmd",
            Self::UpdateHeroStoryStatusRequestCmd => "UpdateHeroStoryStatusRequestCmd",
            Self::ExchangeTicketRequestCmd => "ExchangeTicketRequestCmd",
            Self::GetScoreBonusRequestCmd => "GetScoreBonusRequestCmd",
            Self::GetChallengeBonusRequestCmd => "GetChallengeBonusRequestCmd",
            Self::HeroStoryScorePushCmd => "HeroStoryScorePushCmd",
            Self::HeroStoryTicketPushCmd => "HeroStoryTicketPushCmd",
            Self::HeroStoryWeekTaskPushCmd => "HeroStoryWeekTaskPushCmd",
            Self::HeroStoryWeekTaskGetRequestCmd => "HeroStoryWeekTaskGetRequestCmd",
            Self::HeroStoryDispatchRequestCmd => "HeroStoryDispatchRequestCmd",
            Self::HeroStoryDispatchCompleteRequestCmd => {
                "HeroStoryDispatchCompleteRequestCmd"
            }
            Self::HeroStoryDispatchResetRequestCmd => "HeroStoryDispatchResetRequestCmd",
            Self::GetInvestigateRequestCmd => "GetInvestigateRequestCmd",
            Self::PutClueRequestCmd => "PutClueRequestCmd",
            Self::InvestigateInfoPushCmd => "InvestigateInfoPushCmd",
            Self::GetItemListRequestCmd => "GetItemListRequestCmd",
            Self::ItemChangePushCmd => "ItemChangePushCmd",
            Self::UseItemRequestCmd => "UseItemRequestCmd",
            Self::UsePowerItemRequestCmd => "UsePowerItemRequestCmd",
            Self::UsePowerItemListRequestCmd => "UsePowerItemListRequestCmd",
            Self::AutoUseExpirePowerItemRequestCmd => "AutoUseExpirePowerItemRequestCmd",
            Self::MarkReadSubType21RequestCmd => "MarkReadSubType21RequestCmd",
            Self::UseInsightItemRequestCmd => "UseInsightItemRequestCmd",
            Self::GetAllMailsRequestCmd => "GetAllMailsRequestCmd",
            Self::ReadMailRequestCmd => "ReadMailRequestCmd",
            Self::ReadMailBatchRequestCmd => "ReadMailBatchRequestCmd",
            Self::NewMailPushCmd => "NewMailPushCmd",
            Self::DeleteMailsPushCmd => "DeleteMailsPushCmd",
            Self::DeleteMailBatchRequestCmd => "DeleteMailBatchRequestCmd",
            Self::MarkMailJumpRequestCmd => "MarkMailJumpRequestCmd",
            Self::AutoReadMailPushCmd => "AutoReadMailPushCmd",
            Self::GetMatch3WarChessFacadeInfoRequestCmd => {
                "GetMatch3WarChessFacadeInfoRequestCmd"
            }
            Self::StartMatch3WarChessInfoRequestCmd => {
                "StartMatch3WarChessInfoRequestCmd"
            }
            Self::Match3ChessBoardSwapRequestCmd => "Match3ChessBoardSwapRequestCmd",
            Self::GetMatch3WarChessTaskRewardRequestCmd => {
                "GetMatch3WarChessTaskRewardRequestCmd"
            }
            Self::GetMatch3WarChessInfoRequestCmd => "GetMatch3WarChessInfoRequestCmd",
            Self::RefreshMatch3WarChessInfoRequestCmd => {
                "RefreshMatch3WarChessInfoRequestCmd"
            }
            Self::MaterialChangePushCmd => "MaterialChangePushCmd",
            Self::UpdateOpenPushCmd => "UpdateOpenPushCmd",
            Self::GetPlayerCardInfoRequestCmd => "GetPlayerCardInfoRequestCmd",
            Self::GetOtherPlayerCardInfoRequestCmd => "GetOtherPlayerCardInfoRequestCmd",
            Self::PlayerCardInfoPushCmd => "PlayerCardInfoPushCmd",
            Self::SetPlayerCardShowSettingRequestCmd => {
                "SetPlayerCardShowSettingRequestCmd"
            }
            Self::SetPlayerCardProgressSettingRequestCmd => {
                "SetPlayerCardProgressSettingRequestCmd"
            }
            Self::SetPlayerCardBaseSettingRequestCmd => {
                "SetPlayerCardBaseSettingRequestCmd"
            }
            Self::SetPlayerCardHeroCoverRequestCmd => "SetPlayerCardHeroCoverRequestCmd",
            Self::SetPlayerCardThemeRequestCmd => "SetPlayerCardThemeRequestCmd",
            Self::SetPlayerCardShowAchievementRequestCmd => {
                "SetPlayerCardShowAchievementRequestCmd"
            }
            Self::SetPlayerCardCritterRequestCmd => "SetPlayerCardCritterRequestCmd",
            Self::GetPlayerInfoRequestCmd => "GetPlayerInfoRequestCmd",
            Self::CreatePlayerRequestCmd => "CreatePlayerRequestCmd",
            Self::PlayerInfoPushCmd => "PlayerInfoPushCmd",
            Self::RenameRequestCmd => "RenameRequestCmd",
            Self::SetSignatureRequestCmd => "SetSignatureRequestCmd",
            Self::SetBirthdayRequestCmd => "SetBirthdayRequestCmd",
            Self::SetPortraitRequestCmd => "SetPortraitRequestCmd",
            Self::SetShowHeroUniqueIdsRequestCmd => "SetShowHeroUniqueIdsRequestCmd",
            Self::GetSimplePropertyRequestCmd => "GetSimplePropertyRequestCmd",
            Self::SetSimplePropertyRequestCmd => "SetSimplePropertyRequestCmd",
            Self::SimplePropertyPushCmd => "SimplePropertyPushCmd",
            Self::GetClothInfoRequestCmd => "GetClothInfoRequestCmd",
            Self::ClothUpdatePushCmd => "ClothUpdatePushCmd",
            Self::ServerResultCodePushCmd => "ServerResultCodePushCmd",
            Self::GetOtherPlayerInfoRequestCmd => "GetOtherPlayerInfoRequestCmd",
            Self::SetCharacterAgeRequestCmd => "SetCharacterAgeRequestCmd",
            Self::UseCdKeyRequsetCmd => "UseCdKeyRequsetCmd",
            Self::MarkMainThumbnailRequestCmd => "MarkMainThumbnailRequestCmd",
            Self::SetPlayerBgRequestCmd => "SetPlayerBgRequestCmd",
            Self::GetAssistBonusRequestCmd => "GetAssistBonusRequestCmd",
            Self::ReceiveAssistBonusRequestCmd => "ReceiveAssistBonusRequestCmd",
            Self::SetMainSceneSkinRequestCmd => "SetMainSceneSkinRequestCmd",
            Self::GetRedDotInfosRequestCmd => "GetRedDotInfosRequestCmd",
            Self::UpdateRedDotPushCmd => "UpdateRedDotPushCmd",
            Self::ShowRedDotRequestCmd => "ShowRedDotRequestCmd",
            Self::GetRogueStateRequestCmd => "GetRogueStateRequestCmd",
            Self::GetRogueInfoRequestCmd => "GetRogueInfoRequestCmd",
            Self::GetRogueScoreRewardRequestCmd => "GetRogueScoreRewardRequestCmd",
            Self::AbortRogueRequestCmd => "AbortRogueRequestCmd",
            Self::EnterRogueRequestCmd => "EnterRogueRequestCmd",
            Self::RogueEventStartRequestCmd => "RogueEventStartRequestCmd",
            Self::RogueEventSelectRequestCmd => "RogueEventSelectRequestCmd",
            Self::RogueEventEndRequestCmd => "RogueEventEndRequestCmd",
            Self::RogueEventFightRewardRequestCmd => "RogueEventFightRewardRequestCmd",
            Self::RogueEventCollectionRequestCmd => "RogueEventCollectionRequestCmd",
            Self::RogueGroupChangeRequestCmd => "RogueGroupChangeRequestCmd",
            Self::RogueGroupIdxChangeRequestCmd => "RogueGroupIdxChangeRequestCmd",
            Self::RogueGroupStarUpgradeRequestCmd => "RogueGroupStarUpgradeRequestCmd",
            Self::RogueCollectionEnchantRequestCmd => "RogueCollectionEnchantRequestCmd",
            Self::BuyRogueGoodsRequestCmd => "BuyRogueGoodsRequestCmd",
            Self::RogueCollectionNewRequestCmd => "RogueCollectionNewRequestCmd",
            Self::RogueReadEndingRequestCmd => "RogueReadEndingRequestCmd",
            Self::RogueReturnRequestCmd => "RogueReturnRequestCmd",
            Self::RogueStatePushCmd => "RogueStatePushCmd",
            Self::RogueInfoPushCmd => "RogueInfoPushCmd",
            Self::RogueEventUpdatePushCmd => "RogueEventUpdatePushCmd",
            Self::RogueFightResultPushCmd => "RogueFightResultPushCmd",
            Self::RogueCollectionsPushCmd => "RogueCollectionsPushCmd",
            Self::RogueTeamInfoPushCmd => "RogueTeamInfoPushCmd",
            Self::RogueGoodsInfoPushCmd => "RogueGoodsInfoPushCmd",
            Self::RogueCoinPushCmd => "RogueCoinPushCmd",
            Self::RogueCurrencyPushCmd => "RogueCurrencyPushCmd",
            Self::RogueHeartPushCmd => "RogueHeartPushCmd",
            Self::RogueEndPushCmd => "RogueEndPushCmd",
            Self::RogueCollectionGetPushCmd => "RogueCollectionGetPushCmd",
            Self::RogueLifeChangePushCmd => "RogueLifeChangePushCmd",
            Self::RogueCollectionUnlockPushCmd => "RogueCollectionUnlockPushCmd",
            Self::GetRoomInfoRequestCmd => "GetRoomInfoRequestCmd",
            Self::UseBlockRequestCmd => "UseBlockRequestCmd",
            Self::ResetRoomRequestCmd => "ResetRoomRequestCmd",
            Self::UseBuildingRequestCmd => "UseBuildingRequestCmd",
            Self::UnUseBuildingRequestCmd => "UnUseBuildingRequestCmd",
            Self::BuildingGainPushCmd => "BuildingGainPushCmd",
            Self::GetRoomObInfoRequestCmd => "GetRoomObInfoRequestCmd",
            Self::RoomConfirmRequestCmd => "RoomConfirmRequestCmd",
            Self::RoomRevertRequestCmd => "RoomRevertRequestCmd",
            Self::StartProductionLineRequestCmd => "StartProductionLineRequestCmd",
            Self::GainProductionLineRequestCmd => "GainProductionLineRequestCmd",
            Self::FormulaGainPushCmd => "FormulaGainPushCmd",
            Self::ProductionLineLvUpRequestCmd => "ProductionLineLvUpRequestCmd",
            Self::ProductionLineAccelerateRequestCmd => {
                "ProductionLineAccelerateRequestCmd"
            }
            Self::GetOtherRoomObInfoRequestCmd => "GetOtherRoomObInfoRequestCmd",
            Self::RoomLevelUpRequestCmd => "RoomLevelUpRequestCmd",
            Self::ProductionLineInfoRequestCmd => "ProductionLineInfoRequestCmd",
            Self::BlockPackageGainPushCmd => "BlockPackageGainPushCmd",
            Self::GetBlockPackageInfoRequsetCmd => "GetBlockPackageInfoRequsetCmd",
            Self::GetBuildingInfoRequestCmd => "GetBuildingInfoRequestCmd",
            Self::UnUseBlockRequestCmd => "UnUseBlockRequestCmd",
            Self::UpdateRoomHeroDataRequestCmd => "UpdateRoomHeroDataRequestCmd",
            Self::HideBuildingReddotRequsetCmd => "HideBuildingReddotRequsetCmd",
            Self::HideBlockPackageReddotRequestCmd => "HideBlockPackageReddotRequestCmd",
            Self::GainSpecialBlockPushCmd => "GainSpecialBlockPushCmd",
            Self::GainRoomHeroFaithRequestCmd => "GainRoomHeroFaithRequestCmd",
            Self::GetCharacterInteractionBonusRequestCmd => {
                "GetCharacterInteractionBonusRequestCmd"
            }
            Self::GetCharacterInteractionInfoRequestCmd => {
                "GetCharacterInteractionInfoRequestCmd"
            }
            Self::StartCharacterInteractionRequestCmd => {
                "StartCharacterInteractionRequestCmd"
            }
            Self::GetRoomThemeCollectionBonusRequestCmd => {
                "GetRoomThemeCollectionBonusRequestCmd"
            }
            Self::GetRoomPlanInfoRequestCmd => "GetRoomPlanInfoRequestCmd",
            Self::GetRoomPlanDetailsRequestCmd => "GetRoomPlanDetailsRequestCmd",
            Self::SetRoomPlanRequestCmd => "SetRoomPlanRequestCmd",
            Self::SetRoomPlanNameRequestCmd => "SetRoomPlanNameRequestCmd",
            Self::SetRoomPlanCoverRequestCmd => "SetRoomPlanCoverRequestCmd",
            Self::UseRoomPlanRequestCmd => "UseRoomPlanRequestCmd",
            Self::SwitchRoomPlanRequestCmd => "SwitchRoomPlanRequestCmd",
            Self::DeleteRoomPlanRequestCmd => "DeleteRoomPlanRequestCmd",
            Self::CopyOtherRoomPlanRequestCmd => "CopyOtherRoomPlanRequestCmd",
            Self::GetRoomShareRequestCmd => "GetRoomShareRequestCmd",
            Self::UseRoomShareRequestCmd => "UseRoomShareRequestCmd",
            Self::ShareRoomPlanRequestCmd => "ShareRoomPlanRequestCmd",
            Self::DeleteRoomShareRequestCmd => "DeleteRoomShareRequestCmd",
            Self::ReportRoomRequestCmd => "ReportRoomRequestCmd",
            Self::BuildingLevelUpPushCmd => "BuildingLevelUpPushCmd",
            Self::SetWaterTypeRequestCmd => "SetWaterTypeRequestCmd",
            Self::SetRoomSkinRequestCmd => "SetRoomSkinRequestCmd",
            Self::ReadRoomSkinRequestCmd => "ReadRoomSkinRequestCmd",
            Self::GenerateRoadRequestCmd => "GenerateRoadRequestCmd",
            Self::DeleteRoadRequestCmd => "DeleteRoadRequestCmd",
            Self::AllotCritterRequestCmd => "AllotCritterRequestCmd",
            Self::AllotVehicleRequestCmd => "AllotVehicleRequestCmd",
            Self::GetManufactureInfoRequestCmd => "GetManufactureInfoRequestCmd",
            Self::GetFrozenItemInfoRequestCmd => "GetFrozenItemInfoRequestCmd",
            Self::BuyManufactureBuildingRequestCmd => "BuyManufactureBuildingRequestCmd",
            Self::DispatchCritterRequestCmd => "DispatchCritterRequestCmd",
            Self::ManuBuildingUpgradeRequestCmd => "ManuBuildingUpgradeRequestCmd",
            Self::SelectSlotProductionPlanRequestCmd => {
                "SelectSlotProductionPlanRequestCmd"
            }
            Self::ManufactureAccelerateRequestCmd => "ManufactureAccelerateRequestCmd",
            Self::ReapFinishSlotRequestCmd => "ReapFinishSlotRequestCmd",
            Self::BatchDispatchCrittersRequestCmd => "BatchDispatchCrittersRequestCmd",
            Self::RouseCrittersRequestCmd => "RouseCrittersRequestCmd",
            Self::BatchAddProctionsRequestCmd => "BatchAddProctionsRequestCmd",
            Self::GainGuideBuildingRequestCmd => "GainGuideBuildingRequestCmd",
            Self::AccelerateGuidePlanRequestCmd => "AccelerateGuidePlanRequestCmd",
            Self::ManuBuildingInfoPushCmd => "ManuBuildingInfoPushCmd",
            Self::BuyRestSlotRequestCmd => "BuyRestSlotRequestCmd",
            Self::ChangeRestCritterRequestCmd => "ChangeRestCritterRequestCmd",
            Self::UnloadRestBuildingCrittersRequestCmd => {
                "UnloadRestBuildingCrittersRequestCmd"
            }
            Self::ReplaceRestBuildingCrittersRequestCmd => {
                "ReplaceRestBuildingCrittersRequestCmd"
            }
            Self::FeedCritterRequestCmd => "FeedCritterRequestCmd",
            Self::RestBuildingInfoPushCmd => "RestBuildingInfoPushCmd",
            Self::GetOrderInfoRequestCmd => "GetOrderInfoRequestCmd",
            Self::FinishOrderRequestCmd => "FinishOrderRequestCmd",
            Self::LockOrderRequestCmd => "LockOrderRequestCmd",
            Self::RefreshPurchaseOrderRequestCmd => "RefreshPurchaseOrderRequestCmd",
            Self::ChangePurchaseOrderTraceStateRequestCmd => {
                "ChangePurchaseOrderTraceStateRequestCmd"
            }
            Self::GetTradeTaskInfoRequestCmd => "GetTradeTaskInfoRequestCmd",
            Self::ReadNewTradeTaskRequestCmd => "ReadNewTradeTaskRequestCmd",
            Self::GetTradeSupportBonusRequestCmd => "GetTradeSupportBonusRequestCmd",
            Self::TradeLevelUpRequestCmd => "TradeLevelUpRequestCmd",
            Self::TradeTaskPushCmd => "TradeTaskPushCmd",
            Self::GetTradeTaskExtraBonusRequestCmd => "GetTradeTaskExtraBonusRequestCmd",
            Self::GetRoomLogRequestCmd => "GetRoomLogRequestCmd",
            Self::ReadRoomLogNewRequestCmd => "ReadRoomLogNewRequestCmd",
            Self::GetRougeInfoRequestCmd => "GetRougeInfoRequestCmd",
            Self::EnterRougeSelectDifficultyRequestCmd => {
                "EnterRougeSelectDifficultyRequestCmd"
            }
            Self::EnterRougeSelectRewardRequestCmd => "EnterRougeSelectRewardRequestCmd",
            Self::EnterRougeSelectStyleRequestCmd => "EnterRougeSelectStyleRequestCmd",
            Self::EnterRougeSelectHeroesRequestCmd => "EnterRougeSelectHeroesRequestCmd",
            Self::RougeGroupChangeRequestCmd => "RougeGroupChangeRequestCmd",
            Self::RougeMonsterFixAttrRequestCmd => "RougeMonsterFixAttrRequestCmd",
            Self::RougeRoundMoveRequestCmd => "RougeRoundMoveRequestCmd",
            Self::RougeChoiceEventRequestCmd => "RougeChoiceEventRequestCmd",
            Self::RougeBuyGoodsRequestCmd => "RougeBuyGoodsRequestCmd",
            Self::RougeEndShopEventRequestCmd => "RougeEndShopEventRequestCmd",
            Self::RougeShopRefreshRequestCmd => "RougeShopRefreshRequestCmd",
            Self::RougeSelectDropRequestCmd => "RougeSelectDropRequestCmd",
            Self::RougeRandomDropRequestCmd => "RougeRandomDropRequestCmd",
            Self::RougeSelectHealRequestCmd => "RougeSelectHealRequestCmd",
            Self::RougeSelectReviveRequestCmd => "RougeSelectReviveRequestCmd",
            Self::RougeRecruitHeroRequestCmd => "RougeRecruitHeroRequestCmd",
            Self::RougeSelectLostCollectionRequestCmd => {
                "RougeSelectLostCollectionRequestCmd"
            }
            Self::RougeSelectCollectionLevelUpRequestCmd => {
                "RougeSelectCollectionLevelUpRequestCmd"
            }
            Self::RougePieceMoveRequestCmd => "RougePieceMoveRequestCmd",
            Self::RougePieceTalkSelectRequestCmd => "RougePieceTalkSelectRequestCmd",
            Self::RougeLeaveMiddleLayerRequestCmd => "RougeLeaveMiddleLayerRequestCmd",
            Self::RougeRepairShopBuyRequestCmd => "RougeRepairShopBuyRequestCmd",
            Self::RougeRepairShopRandomRequestCmd => "RougeRepairShopRandomRequestCmd",
            Self::RougeDisplaceRequestCmd => "RougeDisplaceRequestCmd",
            Self::RougeEndRequestCmd => "RougeEndRequestCmd",
            Self::RougeAbortRequestCmd => "RougeAbortRequestCmd",
            Self::ActiveTalentRequestCmd => "ActiveTalentRequestCmd",
            Self::RougeUseMapSkillRequestCmd => "RougeUseMapSkillRequestCmd",
            Self::RougeUnlockSkillRequestCmd => "RougeUnlockSkillRequestCmd",
            Self::RougeEventUpdatePushCmd => "RougeEventUpdatePushCmd",
            Self::RougeSelectDropPushCmd => "RougeSelectDropPushCmd",
            Self::RougeLayerMapInfoPushCmd => "RougeLayerMapInfoPushCmd",
            Self::RougeLayerSimpleMapInfoPushCmd => "RougeLayerSimpleMapInfoPushCmd",
            Self::RougeUpdateCoinPushCmd => "RougeUpdateCoinPushCmd",
            Self::RougeUpdatePowerPushCmd => "RougeUpdatePowerPushCmd",
            Self::RougeUpdateTalentPointPushCmd => "RougeUpdateTalentPointPushCmd",
            Self::RougeUpdateTeamExpAndLevelPushCmd => {
                "RougeUpdateTeamExpAndLevelPushCmd"
            }
            Self::RougeFightResultPushCmd => "RougeFightResultPushCmd",
            Self::RougeInMapItemUpdatePushCmd => "RougeInMapItemUpdatePushCmd",
            Self::RougeTeamHpUpdatePushCmd => "RougeTeamHpUpdatePushCmd",
            Self::RougeInteractiveTeamHpUpdatePushCmd => {
                "RougeInteractiveTeamHpUpdatePushCmd"
            }
            Self::RougeTeamInfoPushCmd => "RougeTeamInfoPushCmd",
            Self::RougeEntrustInfoPushCmd => "RougeEntrustInfoPushCmd",
            Self::RougeTriggerEffectPushCmd => "RougeTriggerEffectPushCmd",
            Self::RougeInfoPushCmd => "RougeInfoPushCmd",
            Self::RougeComposeRequestCmd => "RougeComposeRequestCmd",
            Self::RougeInlayRequestCmd => "RougeInlayRequestCmd",
            Self::RougeDemountRequestCmd => "RougeDemountRequestCmd",
            Self::RougeAddToBarRequestCmd => "RougeAddToBarRequestCmd",
            Self::RougeOneKeyAddToBarRequestCmd => "RougeOneKeyAddToBarRequestCmd",
            Self::RougeRemoveFromBarRequestCmd => "RougeRemoveFromBarRequestCmd",
            Self::RougeOneKeyRemoveFromBarRequestCmd => {
                "RougeOneKeyRemoveFromBarRequestCmd"
            }
            Self::RougeItemTrammelsRequestCmd => "RougeItemTrammelsRequestCmd",
            Self::RougeItemBagPushCmd => "RougeItemBagPushCmd",
            Self::RougeAddItemBagPushCmd => "RougeAddItemBagPushCmd",
            Self::RougeRemoveItemBagPushCmd => "RougeRemoveItemBagPushCmd",
            Self::RougeItemWarehousePushCmd => "RougeItemWarehousePushCmd",
            Self::RougeAddItemWarehousePushCmd => "RougeAddItemWarehousePushCmd",
            Self::RougeRemoveItemWarehousePushCmd => "RougeRemoveItemWarehousePushCmd",
            Self::RougeItemLayoutEffectUpdatePushCmd => {
                "RougeItemLayoutEffectUpdatePushCmd"
            }
            Self::RougeItemUpdatePushCmd => "RougeItemUpdatePushCmd",
            Self::RougeItemEffectChangeItemPushCmd => "RougeItemEffectChangeItemPushCmd",
            Self::GetRougeOutsideInfoRequestCmd => "GetRougeOutsideInfoRequestCmd",
            Self::RougeActiveGeniusRequestCmd => "RougeActiveGeniusRequestCmd",
            Self::RougeReceivePointBonusRequestCmd => "RougeReceivePointBonusRequestCmd",
            Self::RougeUpdateGeniusPointPushCmd => "RougeUpdateGeniusPointPushCmd",
            Self::RougeUpdatePointPushCmd => "RougeUpdatePointPushCmd",
            Self::RougeMarkGeniusNewStageRequestCmd => {
                "RougeMarkGeniusNewStageRequestCmd"
            }
            Self::RougeMarkBonusNewStageRequestCmd => "RougeMarkBonusNewStageRequestCmd",
            Self::RougeGetUnlockCollectionsRequestCmd => {
                "RougeGetUnlockCollectionsRequestCmd"
            }
            Self::RougeGetNewReddotInfoRequestCmd => "RougeGetNewReddotInfoRequestCmd",
            Self::RougeMarkNewReddotRequestCmd => "RougeMarkNewReddotRequestCmd",
            Self::RougeReddotUpdatePushCmd => "RougeReddotUpdatePushCmd",
            Self::RougeUnlockStoryRequestCmd => "RougeUnlockStoryRequestCmd",
            Self::RougeLimiterSettingSaveRequestCmd => {
                "RougeLimiterSettingSaveRequestCmd"
            }
            Self::RougeDlcSettingSaveRequestCmd => "RougeDLCSettingSaveRequestCmd",
            Self::RougeLimiterUnlockBuffRequestCmd => "RougeLimiterUnlockBuffRequestCmd",
            Self::RougeLimiterSpeedUpBuffCdRequestCmd => {
                "RougeLimiterSpeedUpBuffCdRequestCmd"
            }
            Self::GetSiegeBattleInfoRequestCmd => "GetSiegeBattleInfoRequestCmd",
            Self::StartSiegeBattleRequestCmd => "StartSiegeBattleRequestCmd",
            Self::AbandonSiegeBattleRequestCmd => "AbandonSiegeBattleRequestCmd",
            Self::GetSignInInfoRequestCmd => "GetSignInInfoRequestCmd",
            Self::SignInRequestCmd => "SignInRequestCmd",
            Self::SignInAddupRequestCmd => "SignInAddupRequestCmd",
            Self::SignInHistoryRequestCmd => "SignInHistoryRequestCmd",
            Self::GetHeroBirthdayRequestCmd => "GetHeroBirthdayRequestCmd",
            Self::SignInTotalRewardRequestCmd => "SignInTotalRewardRequestCmd",
            Self::SignInTotalRewardAllRequestCmd => "SignInTotalRewardAllRequestCmd",
            Self::ClientStatBaseInfoRequestCmd => "ClientStatBaseInfoRequestCmd",
            Self::StatInfoPushCmd => "StatInfoPushCmd",
            Self::UpdateClientStatBaseInfoRequestCmd => {
                "UpdateClientStatBaseInfoRequestCmd"
            }
            Self::GetStoreInfosRequestCmd => "GetStoreInfosRequestCmd",
            Self::BuyGoodsRequestCmd => "BuyGoodsRequestCmd",
            Self::ReadStoreNewRequestCmd => "ReadStoreNewRequestCmd",
            Self::GetStoryRequestCmd => "GetStoryRequestCmd",
            Self::UpdateStoryRequestCmd => "UpdateStoryRequestCmd",
            Self::GetStoryFinishRequestCmd => "GetStoryFinishRequestCmd",
            Self::StoryFinishPushCmd => "StoryFinishPushCmd",
            Self::SummonRequestCmd => "SummonRequestCmd",
            Self::GetSummonInfoRequestCmd => "GetSummonInfoRequestCmd",
            Self::SummonQueryTokenRequestCmd => "SummonQueryTokenRequestCmd",
            Self::OpenLuckyBagRequestCmd => "OpenLuckyBagRequestCmd",
            Self::ChooseMultiUpHeroRequestCmd => "ChooseMultiUpHeroRequestCmd",
            Self::ChooseEnhancedPoolHeroRequestCmd => "ChooseEnhancedPoolHeroRequestCmd",
            Self::GetTaskInfoRequestCmd => "GetTaskInfoRequestCmd",
            Self::FinishTaskRequestCmd => "FinishTaskRequestCmd",
            Self::UpdateTaskPushCmd => "UpdateTaskPushCmd",
            Self::DeleteTaskPushCmd => "DeleteTaskPushCmd",
            Self::GetTaskActivityBonusRequestCmd => "GetTaskActivityBonusRequestCmd",
            Self::FinishAllTaskRequestCmd => "FinishAllTaskRequestCmd",
            Self::FinishReadTaskRequestCmd => "FinishReadTaskRequestCmd",
            Self::GetTowerInfoRequestCmd => "GetTowerInfoRequestCmd",
            Self::TowerMopUpRequestCmd => "TowerMopUpRequestCmd",
            Self::TowerActiveTalentRequestCmd => "TowerActiveTalentRequestCmd",
            Self::TowerResetTalentRequestCmd => "TowerResetTalentRequestCmd",
            Self::TowerResetSubEpisodeRequestCmd => "TowerResetSubEpisodeRequestCmd",
            Self::StartTowerBattleRequestCmd => "StartTowerBattleRequestCmd",
            Self::TowerBattleFinishPushCmd => "TowerBattleFinishPushCmd",
            Self::TowerLayerUpdatePushCmd => "TowerLayerUpdatePushCmd",
            Self::GetTurnbackInfoRequestCmd => "GetTurnbackInfoRequestCmd",
            Self::TurnbackSignInRequestCmd => "TurnbackSignInRequestCmd",
            Self::TurnbackOnceBonusRequestCmd => "TurnbackOnceBonusRequestCmd",
            Self::TurnbackFirstShowRequestCmd => "TurnbackFirstShowRequestCmd",
            Self::TurnbackBonusPointRequestCmd => "TurnbackBonusPointRequestCmd",
            Self::TurnbackAdditionPushCmd => "TurnbackAdditionPushCmd",
            Self::BuyDoubleBonusRequestCmd => "BuyDoubleBonusRequestCmd",
            Self::RefreshOnlineTaskRequestCmd => "RefreshOnlineTaskRequestCmd",
            Self::LogoutRequestCmd => "LogoutRequestCmd",
            Self::DebugLogoutRequestCmd => "DebugLogoutRequestCmd",
            Self::GetSettingInfosRequestCmd => "GetSettingInfosRequestCmd",
            Self::UpdateSettingInfoRequestCmd => "UpdateSettingInfoRequestCmd",
            Self::WarChessRoundStartPushCmd => "WarChessRoundStartPushCmd",
            Self::WarChessMyRoundStartRequestCmd => "WarChessMyRoundStartRequestCmd",
            Self::WarChessCharacterSkillRequestCmd => "WarChessCharacterSkillRequestCmd",
            Self::WarChessPiecePlaceRequestCmd => "WarChessPiecePlaceRequestCmd",
            Self::WarChessRoundEndRequestCmd => "WarChessRoundEndRequestCmd",
            Self::WarChessFightResultPushCmd => "WarChessFightResultPushCmd",
            Self::WarChessDiamondBoxPushCmd => "WarChessDiamondBoxPushCmd",
            Self::WarChessPieceSellRequestCmd => "WarChessPieceSellRequestCmd",
            Self::GetWeekwalkInfoRequestCmd => "GetWeekwalkInfoRequestCmd",
            Self::BeforeStartWeekwalkBattleRequestCmd => {
                "BeforeStartWeekwalkBattleRequestCmd"
            }
            Self::WeekwalkGeneralRequestCmd => "WeekwalkGeneralRequestCmd",
            Self::WeekwalkInfoUpdatePushCmd => "WeekwalkInfoUpdatePushCmd",
            Self::WeekwalkDialogRequestCmd => "WeekwalkDialogRequestCmd",
            Self::WeekwalkHeroRecommendRequestCmd => "WeekwalkHeroRecommendRequestCmd",
            Self::WeekwalkDialogHistoryRequestCmd => "WeekwalkDialogHistoryRequestCmd",
            Self::ResetLayerRequestCmd => "ResetLayerRequestCmd",
            Self::MarkShowBuffRequestCmd => "MarkShowBuffRequestCmd",
            Self::MarkShowFinishedRequestCmd => "MarkShowFinishedRequestCmd",
            Self::SelectNotCdHeroRequestCmd => "SelectNotCdHeroRequestCmd",
            Self::MarkPopDeepRuleRequestCmd => "MarkPopDeepRuleRequestCmd",
            Self::MarkPopShallowSettleRequestCmd => "MarkPopShallowSettleRequestCmd",
            Self::MarkPopDeepSettleRequestCmd => "MarkPopDeepSettleRequestCmd",
            Self::ChangeWeekwalkHeroGroupSelectRequestCmd => {
                "ChangeWeekwalkHeroGroupSelectRequestCmd"
            }
            Self::GuestTimeOutPushCmd => "GuestTimeOutPushCmd",
            Self::MinorPlayTimeOutPushCmd => "MinorPlayTimeOutPushCmd",
            Self::MinorLimitLoginTimePushCmd => "MinorLimitLoginTimePushCmd",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LoginRequestCmd" => Some(Self::LoginRequestCmd),
            "ReconnectRequestCmd" => Some(Self::ReconnectRequestCmd),
            "ForceLogoutPushCmd" => Some(Self::ForceLogoutPushCmd),
            "GetReconnectStartTagRequestCmd" => {
                Some(Self::GetReconnectStartTagRequestCmd)
            }
            "GetAchievementInfoRequestCmd" => Some(Self::GetAchievementInfoRequestCmd),
            "UpdateAchievementPushCmd" => Some(Self::UpdateAchievementPushCmd),
            "ShowAchievementRequestCmd" => Some(Self::ShowAchievementRequestCmd),
            "ReadNewAchievementRequestCmd" => Some(Self::ReadNewAchievementRequestCmd),
            "Act1000GetInfoRequestCmd" => Some(Self::Act1000GetInfoRequestCmd),
            "Act1000AccountBindBonusRequestCmd" => {
                Some(Self::Act1000AccountBindBonusRequestCmd)
            }
            "Act1001GetInfoRequestCmd" => Some(Self::Act1001GetInfoRequestCmd),
            "Act1001UpdatePushCmd" => Some(Self::Act1001UpdatePushCmd),
            "Get101InfosRequestCmd" => Some(Self::Get101InfosRequestCmd),
            "Get101BonusRequestCmd" => Some(Self::Get101BonusRequestCmd),
            "Get101SpBonusRequestCmd" => Some(Self::Get101SpBonusRequestCmd),
            "Get101OnceBonusRequestCmd" => Some(Self::Get101OnceBonusRequestCmd),
            "GetAct186SpBonusInfoRequestCmd" => {
                Some(Self::GetAct186SpBonusInfoRequestCmd)
            }
            "AcceptAct186SpBonusRequestCmd" => Some(Self::AcceptAct186SpBonusRequestCmd),
            "Get104InfosRequestCmd" => Some(Self::Get104InfosRequestCmd),
            "BeforeStartAct104BattleRequestCmd" => {
                Some(Self::BeforeStartAct104BattleRequestCmd)
            }
            "StartAct104BattleRequestCmd" => Some(Self::StartAct104BattleRequestCmd),
            "Act104BattleFinishPushCmd" => Some(Self::Act104BattleFinishPushCmd),
            "Activity104ItemChangePushCmd" => Some(Self::Activity104ItemChangePushCmd),
            "RefreshRetailRequestCmd" => Some(Self::RefreshRetailRequestCmd),
            "OptionalActivity104EquipRequestCmd" => {
                Some(Self::OptionalActivity104EquipRequestCmd)
            }
            "ComposeActivity104EquipRequestCmd" => {
                Some(Self::ComposeActivity104EquipRequestCmd)
            }
            "ChangeFightGroupRequestCmd" => Some(Self::ChangeFightGroupRequestCmd),
            "MarkActivity104StoryRequestCmd" => {
                Some(Self::MarkActivity104StoryRequestCmd)
            }
            "MarkEpisodeAfterStoryRequestCmd" => {
                Some(Self::MarkEpisodeAfterStoryRequestCmd)
            }
            "GetUnlockActivity104EquipIdsRequestCmd" => {
                Some(Self::GetUnlockActivity104EquipIdsRequestCmd)
            }
            "MarkPopSummaryRequestCmd" => Some(Self::MarkPopSummaryRequestCmd),
            "Get106InfosRequestCmd" => Some(Self::Get106InfosRequestCmd),
            "Get106OrderBonusRequestCmd" => Some(Self::Get106OrderBonusRequestCmd),
            "Update106OrderPushCmd" => Some(Self::Update106OrderPushCmd),
            "Get107GoodsInfoRequestCmd" => Some(Self::Get107GoodsInfoRequestCmd),
            "Buy107GoodsRequestCmd" => Some(Self::Buy107GoodsRequestCmd),
            "Get108InfosRequestCmd" => Some(Self::Get108InfosRequestCmd),
            "ResetMapRequestCmd" => Some(Self::ResetMapRequestCmd),
            "DialogEventSelectRequestCmd" => Some(Self::DialogEventSelectRequestCmd),
            "EnterFightEventRequestCmd" => Some(Self::EnterFightEventRequestCmd),
            "EpisodeConfirmRequestCmd" => Some(Self::EpisodeConfirmRequestCmd),
            "Get108BonusRequestCmd" => Some(Self::Get108BonusRequestCmd),
            "EpisodeUpdatePushCmd" => Some(Self::EpisodeUpdatePushCmd),
            "InfoUpdatePushCmd" => Some(Self::InfoUpdatePushCmd),
            "GetAct109InfoRequestCmd" => Some(Self::GetAct109InfoRequestCmd),
            "Act109StartEpisodeRequestCmd" => Some(Self::Act109StartEpisodeRequestCmd),
            "Act109BeginRoundRequestCmd" => Some(Self::Act109BeginRoundRequestCmd),
            "Act109StepPushCmd" => Some(Self::Act109StepPushCmd),
            "Act109UseItemRequestCmd" => Some(Self::Act109UseItemRequestCmd),
            "Act109EventEndRequestCmd" => Some(Self::Act109EventEndRequestCmd),
            "Act109AbortRequestCmd" => Some(Self::Act109AbortRequestCmd),
            "Act109MarkNewEpisodeRedDotRequestCmd" => {
                Some(Self::Act109MarkNewEpisodeRedDotRequestCmd)
            }
            "Get111InfosRequestCmd" => Some(Self::Get111InfosRequestCmd),
            "FinishEpisodeRequestCmd" => Some(Self::FinishEpisodeRequestCmd),
            "Act111InfoPushCmd" => Some(Self::Act111InfoPushCmd),
            "PushBoxTaskPushCmd" => Some(Self::PushBoxTaskPushCmd),
            "ReceiveTaskRewardRequestCmd" => Some(Self::ReceiveTaskRewardRequestCmd),
            "MarkRedDot1039RequestCmd" => Some(Self::MarkRedDot1039RequestCmd),
            "Get112InfosRequestCmd" => Some(Self::Get112InfosRequestCmd),
            "Exchange112RequestCmd" => Some(Self::Exchange112RequestCmd),
            "Act112TaskPushCmd" => Some(Self::Act112TaskPushCmd),
            "ReceiveAct112TaskRewardRequestCmd" => {
                Some(Self::ReceiveAct112TaskRewardRequestCmd)
            }
            "GetAct113InfoRequestCmd" => Some(Self::GetAct113InfoRequestCmd),
            "Get114InfosRequestCmd" => Some(Self::Get114InfosRequestCmd),
            "Act114InfoPushCmd" => Some(Self::Act114InfoPushCmd),
            "Act114TaskPushCmd" => Some(Self::Act114TaskPushCmd),
            "ReceiveAct114TaskRewardRequestCmd" => {
                Some(Self::ReceiveAct114TaskRewardRequestCmd)
            }
            "Act114EducateRequestCmd" => Some(Self::Act114EducateRequestCmd),
            "Act114TravelRequestCmd" => Some(Self::Act114TravelRequestCmd),
            "Act114MeetingRequestCmd" => Some(Self::Act114MeetingRequestCmd),
            "CheckEventRequestCmd" => Some(Self::CheckEventRequestCmd),
            "Act114RestRequestCmd" => Some(Self::Act114RestRequestCmd),
            "Act114KeyDayRequestCmd" => Some(Self::Act114KeyDayRequestCmd),
            "Act114TestRequestCmd" => Some(Self::Act114TestRequestCmd),
            "Act114ResetRequestCmd" => Some(Self::Act114ResetRequestCmd),
            "BeforeAct114BattleRequestCmd" => Some(Self::BeforeAct114BattleRequestCmd),
            "EnterSchoolRequestCmd" => Some(Self::EnterSchoolRequestCmd),
            "MarkRoundStoryRequestCmd" => Some(Self::MarkRoundStoryRequestCmd),
            "MarkMeetingPlayUnlockRequestCmd" => {
                Some(Self::MarkMeetingPlayUnlockRequestCmd)
            }
            "MarkTravelPlayUnlockRequestCmd" => {
                Some(Self::MarkTravelPlayUnlockRequestCmd)
            }
            "MarkUnlockNewPhotoRedDotRequestCmd" => {
                Some(Self::MarkUnlockNewPhotoRedDotRequestCmd)
            }
            "GetAct115InfoRequestCmd" => Some(Self::GetAct115InfoRequestCmd),
            "Act115StartEpisodeRequestCmd" => Some(Self::Act115StartEpisodeRequestCmd),
            "Act115BeginRoundRequestCmd" => Some(Self::Act115BeginRoundRequestCmd),
            "Act115StepPushCmd" => Some(Self::Act115StepPushCmd),
            "Act115EventEndRequestCmd" => Some(Self::Act115EventEndRequestCmd),
            "Act115AbortRequestCmd" => Some(Self::Act115AbortRequestCmd),
            "Act115BonusRequestCmd" => Some(Self::Act115BonusRequestCmd),
            "Act115UseSkillRequestCmd" => Some(Self::Act115UseSkillRequestCmd),
            "Act115RevertRequestCmd" => Some(Self::Act115RevertRequestCmd),
            "Get116InfosRequestCmd" => Some(Self::Get116InfosRequestCmd),
            "UpgradeElementRequestCmd" => Some(Self::UpgradeElementRequestCmd),
            "BuildTrapRequestCmd" => Some(Self::BuildTrapRequestCmd),
            "PutTrapRequestCmd" => Some(Self::PutTrapRequestCmd),
            "Act116InfoUpdatePushCmd" => Some(Self::Act116InfoUpdatePushCmd),
            "Act117InfoRequestCmd" => Some(Self::Act117InfoRequestCmd),
            "Act117NegotiateRequestCmd" => Some(Self::Act117NegotiateRequestCmd),
            "Act117DealRequestCmd" => Some(Self::Act117DealRequestCmd),
            "Act117GetBonusRequestCmd" => Some(Self::Act117GetBonusRequestCmd),
            "Act117OrderPushCmd" => Some(Self::Act117OrderPushCmd),
            "GetAct120InfoRequestCmd" => Some(Self::GetAct120InfoRequestCmd),
            "Act120StartEpisodeRequestCmd" => Some(Self::Act120StartEpisodeRequestCmd),
            "Act120BeginRoundRequestCmd" => Some(Self::Act120BeginRoundRequestCmd),
            "Act120StepPushCmd" => Some(Self::Act120StepPushCmd),
            "Act120UseItemRequestCmd" => Some(Self::Act120UseItemRequestCmd),
            "Act120EventEndRequestCmd" => Some(Self::Act120EventEndRequestCmd),
            "Act120AbortRequestCmd" => Some(Self::Act120AbortRequestCmd),
            "Act120CheckPointRequestCmd" => Some(Self::Act120CheckPointRequestCmd),
            "Get121InfosRequestCmd" => Some(Self::Get121InfosRequestCmd),
            "Get121BonusRequestCmd" => Some(Self::Get121BonusRequestCmd),
            "Act121UpdatePushCmd" => Some(Self::Act121UpdatePushCmd),
            "GetAct122InfosRequestCmd" => Some(Self::GetAct122InfosRequestCmd),
            "Act122StartEpisodeRequestCmd" => Some(Self::Act122StartEpisodeRequestCmd),
            "Act122BeginRoundRequestCmd" => Some(Self::Act122BeginRoundRequestCmd),
            "Act122StepPushCmd" => Some(Self::Act122StepPushCmd),
            "Act122UseItemRequestCmd" => Some(Self::Act122UseItemRequestCmd),
            "Act122EventEndRequestCmd" => Some(Self::Act122EventEndRequestCmd),
            "Act122AbortRequestCmd" => Some(Self::Act122AbortRequestCmd),
            "Act122CheckPointRequestCmd" => Some(Self::Act122CheckPointRequestCmd),
            "Get123InfosRequestCmd" => Some(Self::Get123InfosRequestCmd),
            "Act123EnterStageRequestCmd" => Some(Self::Act123EnterStageRequestCmd),
            "Act123EndStageRequestCmd" => Some(Self::Act123EndStageRequestCmd),
            "StartAct123BattleRequestCmd" => Some(Self::StartAct123BattleRequestCmd),
            "Act123BattleFinishPushCmd" => Some(Self::Act123BattleFinishPushCmd),
            "Act123ChangeFightGroupRequestCmd" => {
                Some(Self::Act123ChangeFightGroupRequestCmd)
            }
            "Act123ItemChangePushCmd" => Some(Self::Act123ItemChangePushCmd),
            "ComposeAct123EquipRequestCmd" => Some(Self::ComposeAct123EquipRequestCmd),
            "DecomposeAct123EquipRequestCmd" => {
                Some(Self::DecomposeAct123EquipRequestCmd)
            }
            "Act123OpenCardBagRequestCmd" => Some(Self::Act123OpenCardBagRequestCmd),
            "GetUnlockAct123EquipIdsRequestCmd" => {
                Some(Self::GetUnlockAct123EquipIdsRequestCmd)
            }
            "Act123ResetOtherStageRequestCmd" => {
                Some(Self::Act123ResetOtherStageRequestCmd)
            }
            "Act123ResetHighLayerRequestCmd" => {
                Some(Self::Act123ResetHighLayerRequestCmd)
            }
            "GetAct123StageRecordRequestCmd" => {
                Some(Self::GetAct123StageRecordRequestCmd)
            }
            "GetAct124InfosRequestCmd" => Some(Self::GetAct124InfosRequestCmd),
            "FinishAct124EpisodeRequestCmd" => Some(Self::FinishAct124EpisodeRequestCmd),
            "ReceiveAct124RewardRequestCmd" => Some(Self::ReceiveAct124RewardRequestCmd),
            "GetAct125InfosRequestCmd" => Some(Self::GetAct125InfosRequestCmd),
            "FinishAct125EpisodeRequestCmd" => Some(Self::FinishAct125EpisodeRequestCmd),
            "Get126InfosRequestCmd" => Some(Self::Get126InfosRequestCmd),
            "UpdateProgressRequestCmd" => Some(Self::UpdateProgressRequestCmd),
            "ResetProgressRequestCmd" => Some(Self::ResetProgressRequestCmd),
            "HoroscopeRequestCmd" => Some(Self::HoroscopeRequestCmd),
            "GetHoroscopeRequestCmd" => Some(Self::GetHoroscopeRequestCmd),
            "UnlockBuffRequestCmd" => Some(Self::UnlockBuffRequestCmd),
            "ExchangeStarPushCmd" => Some(Self::ExchangeStarPushCmd),
            "Act126InfoUpdatePushCmd" => Some(Self::Act126InfoUpdatePushCmd),
            "EnterFightRequestCmd" => Some(Self::EnterFightRequestCmd),
            "Get128InfosRequestCmd" => Some(Self::Get128InfosRequestCmd),
            "Act128GetTotalRewardsRequestCmd" => {
                Some(Self::Act128GetTotalRewardsRequestCmd)
            }
            "Act128GetTotalSingleRewardRequestCmd" => {
                Some(Self::Act128GetTotalSingleRewardRequestCmd)
            }
            "Act128DoublePointRequestCmd" => Some(Self::Act128DoublePointRequestCmd),
            "Get129InfosRequestCmd" => Some(Self::Get129InfosRequestCmd),
            "Act129LotteryRequestCmd" => Some(Self::Act129LotteryRequestCmd),
            "Get130InfosRequestCmd" => Some(Self::Get130InfosRequestCmd),
            "Act130StoryRequestCmd" => Some(Self::Act130StoryRequestCmd),
            "Act130GeneralRequestCmd" => Some(Self::Act130GeneralRequestCmd),
            "Act130DialogRequestCmd" => Some(Self::Act130DialogRequestCmd),
            "Act130DialogHistoryRequestCmd" => Some(Self::Act130DialogHistoryRequestCmd),
            "Act130ElementsPushCmd" => Some(Self::Act130ElementsPushCmd),
            "Act130RestartEpisodeRequestCmd" => {
                Some(Self::Act130RestartEpisodeRequestCmd)
            }
            "Act130StartGameRequestCmd" => Some(Self::Act130StartGameRequestCmd),
            "Get131InfosRequestCmd" => Some(Self::Get131InfosRequestCmd),
            "Act131StoryRequestCmd" => Some(Self::Act131StoryRequestCmd),
            "Act131GeneralRequestCmd" => Some(Self::Act131GeneralRequestCmd),
            "Act131DialogRequestCmd" => Some(Self::Act131DialogRequestCmd),
            "Act131DialogHistoryRequestCmd" => Some(Self::Act131DialogHistoryRequestCmd),
            "Act131ElementsPushCmd" => Some(Self::Act131ElementsPushCmd),
            "Act131RestartEpisodeRequestCmd" => {
                Some(Self::Act131RestartEpisodeRequestCmd)
            }
            "BeforeAct131BattleRequestCmd" => Some(Self::BeforeAct131BattleRequestCmd),
            "Get132InfosRequestCmd" => Some(Self::Get132InfosRequestCmd),
            "Act132UnlockRequestCmd" => Some(Self::Act132UnlockRequestCmd),
            "Get133InfosRequestCmd" => Some(Self::Get133InfosRequestCmd),
            "Act133BonusRequestCmd" => Some(Self::Act133BonusRequestCmd),
            "Get134InfosRequestCmd" => Some(Self::Get134InfosRequestCmd),
            "Act134BonusRequestCmd" => Some(Self::Act134BonusRequestCmd),
            "Get136InfoRequestCmd" => Some(Self::Get136InfoRequestCmd),
            "Act136SelectRequestCmd" => Some(Self::Act136SelectRequestCmd),
            "Get139InfosRequestCmd" => Some(Self::Get139InfosRequestCmd),
            "Act139DispatchRequestCmd" => Some(Self::Act139DispatchRequestCmd),
            "Act139InterruptDispatchRequestCmd" => {
                Some(Self::Act139InterruptDispatchRequestCmd)
            }
            "Act139GainSubHeroTaskRewardRequestCmd" => {
                Some(Self::Act139GainSubHeroTaskRewardRequestCmd)
            }
            "Act139GainHeroTaskRewardRequestCmd" => {
                Some(Self::Act139GainHeroTaskRewardRequestCmd)
            }
            "Act139GainExploreRewardRequestCmd" => {
                Some(Self::Act139GainExploreRewardRequestCmd)
            }
            "Get140InfosRequestCmd" => Some(Self::Get140InfosRequestCmd),
            "Act140BuildRequestCmd" => Some(Self::Act140BuildRequestCmd),
            "Act140SelectBuildRequestCmd" => Some(Self::Act140SelectBuildRequestCmd),
            "Act140GainProgressRewardRequestCmd" => {
                Some(Self::Act140GainProgressRewardRequestCmd)
            }
            "GetAct142InfoRequestCmd" => Some(Self::GetAct142InfoRequestCmd),
            "Act142StartEpisodeRequestCmd" => Some(Self::Act142StartEpisodeRequestCmd),
            "Act142BeginRoundRequestCmd" => Some(Self::Act142BeginRoundRequestCmd),
            "Act142StepPushCmd" => Some(Self::Act142StepPushCmd),
            "Act142UseItemRequestCmd" => Some(Self::Act142UseItemRequestCmd),
            "Act142EventEndRequestCmd" => Some(Self::Act142EventEndRequestCmd),
            "Act142AbortRequestCmd" => Some(Self::Act142AbortRequestCmd),
            "Act142CheckPointRequestCmd" => Some(Self::Act142CheckPointRequestCmd),
            "GetAct142CollectionsRequestCmd" => {
                Some(Self::GetAct142CollectionsRequestCmd)
            }
            "Act142UseFireballRequestCmd" => Some(Self::Act142UseFireballRequestCmd),
            "Get144InfosRequestCmd" => Some(Self::Get144InfosRequestCmd),
            "Act144EnterEpisodeRequestCmd" => Some(Self::Act144EnterEpisodeRequestCmd),
            "Act144SelectOptionRequestCmd" => Some(Self::Act144SelectOptionRequestCmd),
            "Act144NextDayRequestCmd" => Some(Self::Act144NextDayRequestCmd),
            "Act144SettleEpisodeRequestCmd" => Some(Self::Act144SettleEpisodeRequestCmd),
            "Act144SettlePushCmd" => Some(Self::Act144SettlePushCmd),
            "Act144UpgradeEquipRequestCmd" => Some(Self::Act144UpgradeEquipRequestCmd),
            "Act144EpisodePushCmd" => Some(Self::Act144EpisodePushCmd),
            "Act144ItemChangePushCmd" => Some(Self::Act144ItemChangePushCmd),
            "Get145InfosRequestCmd" => Some(Self::Get145InfosRequestCmd),
            "Act145RemoveTaskRequestCmd" => Some(Self::Act145RemoveTaskRequestCmd),
            "Act145GameRequestCmd" => Some(Self::Act145GameRequestCmd),
            "Act145GetRewardsRequestCmd" => Some(Self::Act145GetRewardsRequestCmd),
            "Act145ClearGameRecordRequestCmd" => {
                Some(Self::Act145ClearGameRecordRequestCmd)
            }
            "Act145InfoUpdatePushCmd" => Some(Self::Act145InfoUpdatePushCmd),
            "GetAct146InfosRequestCmd" => Some(Self::GetAct146InfosRequestCmd),
            "FinishAct146EpisodeRequestCmd" => Some(Self::FinishAct146EpisodeRequestCmd),
            "Act146EpisodeBonusRequestCmd" => Some(Self::Act146EpisodeBonusRequestCmd),
            "GetAct147InfosRequestCmd" => Some(Self::GetAct147InfosRequestCmd),
            "BuyAct147GoodsRequestCmd" => Some(Self::BuyAct147GoodsRequestCmd),
            "Get148InfoRequestCmd" => Some(Self::Get148InfoRequestCmd),
            "Act148UpLevelRequestCmd" => Some(Self::Act148UpLevelRequestCmd),
            "Act148DownLevelRequestCmd" => Some(Self::Act148DownLevelRequestCmd),
            "Act148ResetRequestCmd" => Some(Self::Act148ResetRequestCmd),
            "Get149InfoRequestCmd" => Some(Self::Get149InfoRequestCmd),
            "Act149GetScoreRewardsRequestCmd" => {
                Some(Self::Act149GetScoreRewardsRequestCmd)
            }
            "Act149GainDailyBonusRequestCmd" => {
                Some(Self::Act149GainDailyBonusRequestCmd)
            }
            "Get152InfoRequestCmd" => Some(Self::Get152InfoRequestCmd),
            "Act152AcceptPresentRequestCmd" => Some(Self::Act152AcceptPresentRequestCmd),
            "Get153InfosRequestCmd" => Some(Self::Get153InfosRequestCmd),
            "Act153CountChangePushCmd" => Some(Self::Act153CountChangePushCmd),
            "Get154InfosRequestCmd" => Some(Self::Get154InfosRequestCmd),
            "Answer154PuzzleRequestCmd" => Some(Self::Answer154PuzzleRequestCmd),
            "Get157InfoRequestCmd" => Some(Self::Get157InfoRequestCmd),
            "Act157UnlockComponentRequestCmd" => {
                Some(Self::Act157UnlockComponentRequestCmd)
            }
            "Act157GainMilestoneRewardRequestCmd" => {
                Some(Self::Act157GainMilestoneRewardRequestCmd)
            }
            "Act157AcceptProductionRequestCmd" => {
                Some(Self::Act157AcceptProductionRequestCmd)
            }
            "Act157CompoundRequestCmd" => Some(Self::Act157CompoundRequestCmd),
            "ProductionInfoChangePushCmd" => Some(Self::ProductionInfoChangePushCmd),
            "Get158InfosRequestCmd" => Some(Self::Get158InfosRequestCmd),
            "Act158StartChallengeRequestCmd" => {
                Some(Self::Act158StartChallengeRequestCmd)
            }
            "Act158AbandonChallengeRequestCmd" => {
                Some(Self::Act158AbandonChallengeRequestCmd)
            }
            "Get159InfosRequestCmd" => Some(Self::Get159InfosRequestCmd),
            "Get159BonusRequestCmd" => Some(Self::Get159BonusRequestCmd),
            "Act160GetInfoRequestCmd" => Some(Self::Act160GetInfoRequestCmd),
            "Act160UpdatePushCmd" => Some(Self::Act160UpdatePushCmd),
            "Act160FinishMissionRequestCmd" => Some(Self::Act160FinishMissionRequestCmd),
            "Act161GetInfoRequestCmd" => Some(Self::Act161GetInfoRequestCmd),
            "Act161RefreshElementsRequestCmd" => {
                Some(Self::Act161RefreshElementsRequestCmd)
            }
            "Act161GainMilestoneRewardRequestCmd" => {
                Some(Self::Act161GainMilestoneRewardRequestCmd)
            }
            "Act161CdBeginPushCmd" => Some(Self::Act161CdBeginPushCmd),
            "Get163InfosRequestCmd" => Some(Self::Get163InfosRequestCmd),
            "Act163StartEvidenceRequestCmd" => Some(Self::Act163StartEvidenceRequestCmd),
            "Act163EvidenceOperationRequestCmd" => {
                Some(Self::Act163EvidenceOperationRequestCmd)
            }
            "Act163InfoPushCmd" => Some(Self::Act163InfoPushCmd),
            "Act163ReadClueRequestCmd" => Some(Self::Act163ReadClueRequestCmd),
            "GetAct164InfoRequestCmd" => Some(Self::GetAct164InfoRequestCmd),
            "Act164StartEpisodeRequestCmd" => Some(Self::Act164StartEpisodeRequestCmd),
            "Act164ReStartEpisodeRequestCmd" => {
                Some(Self::Act164ReStartEpisodeRequestCmd)
            }
            "Act164BeginRoundRequestCmd" => Some(Self::Act164BeginRoundRequestCmd),
            "Act164StepPushCmd" => Some(Self::Act164StepPushCmd),
            "Act164RollbackRequestCmd" => Some(Self::Act164RollbackRequestCmd),
            "Act164AbortRequestCmd" => Some(Self::Act164AbortRequestCmd),
            "Act165GetInfoRequestCmd" => Some(Self::Act165GetInfoRequestCmd),
            "Act165ModifyKeywordRequestCmd" => Some(Self::Act165ModifyKeywordRequestCmd),
            "Act165GenerateEndingRequestCmd" => {
                Some(Self::Act165GenerateEndingRequestCmd)
            }
            "Act165RestartRequestCmd" => Some(Self::Act165RestartRequestCmd),
            "Act165GainMilestoneRewardRequestCmd" => {
                Some(Self::Act165GainMilestoneRewardRequestCmd)
            }
            "Get166InfosRequestCmd" => Some(Self::Get166InfosRequestCmd),
            "Act166EnterBaseRequestCmd" => Some(Self::Act166EnterBaseRequestCmd),
            "Act166AnalyInfoRequestCmd" => Some(Self::Act166AnalyInfoRequestCmd),
            "Act166ReceiveInfoBonusRequestCmd" => {
                Some(Self::Act166ReceiveInfoBonusRequestCmd)
            }
            "Act166ReceiveInformationBonusRequestCmd" => {
                Some(Self::Act166ReceiveInformationBonusRequestCmd)
            }
            "Act166SetTalentSkillRequestCmd" => {
                Some(Self::Act166SetTalentSkillRequestCmd)
            }
            "StartAct166BattleRequestCmd" => Some(Self::StartAct166BattleRequestCmd),
            "Act166BattleFinishPushCmd" => Some(Self::Act166BattleFinishPushCmd),
            "Act166InfoPushCmd" => Some(Self::Act166InfoPushCmd),
            "Act166TalentPushCmd" => Some(Self::Act166TalentPushCmd),
            "GetAct167InfoRequestCmd" => Some(Self::GetAct167InfoRequestCmd),
            "Act167StartEpisodeRequestCmd" => Some(Self::Act167StartEpisodeRequestCmd),
            "Act167ReStartEpisodeRequestCmd" => {
                Some(Self::Act167ReStartEpisodeRequestCmd)
            }
            "Act167BeginRoundRequestCmd" => Some(Self::Act167BeginRoundRequestCmd),
            "Act167StepPushCmd" => Some(Self::Act167StepPushCmd),
            "Act167RollbackRequestCmd" => Some(Self::Act167RollbackRequestCmd),
            "Act167AbortRequestCmd" => Some(Self::Act167AbortRequestCmd),
            "Get168InfosRequestCmd" => Some(Self::Get168InfosRequestCmd),
            "Act168StoryRequestCmd" => Some(Self::Act168StoryRequestCmd),
            "Act168EnterEpisodeRequestCmd" => Some(Self::Act168EnterEpisodeRequestCmd),
            "StartAct168BattleRequestCmd" => Some(Self::StartAct168BattleRequestCmd),
            "Act168BattleFinishPushCmd" => Some(Self::Act168BattleFinishPushCmd),
            "Act168GameMoveRequestCmd" => Some(Self::Act168GameMoveRequestCmd),
            "Act168GameSelectOptionRequestCmd" => {
                Some(Self::Act168GameSelectOptionRequestCmd)
            }
            "Act168GameComposeItemRequestCmd" => {
                Some(Self::Act168GameComposeItemRequestCmd)
            }
            "Act168GameSettleRequestCmd" => Some(Self::Act168GameSettleRequestCmd),
            "Act168EpisodePushCmd" => Some(Self::Act168EpisodePushCmd),
            "Act168GameSettlePushCmd" => Some(Self::Act168GameSettlePushCmd),
            "Act168GameItemChangePushCmd" => Some(Self::Act168GameItemChangePushCmd),
            "Get169InfoRequestCmd" => Some(Self::Get169InfoRequestCmd),
            "Act169SummonRequestCmd" => Some(Self::Act169SummonRequestCmd),
            "Get170InfoRequestCmd" => Some(Self::Get170InfoRequestCmd),
            "Act170SummonRequestCmd" => Some(Self::Act170SummonRequestCmd),
            "Act170SaveRequestCmd" => Some(Self::Act170SaveRequestCmd),
            "Act170SelectRequestCmd" => Some(Self::Act170SelectRequestCmd),
            "Get171InfoRequestCmd" => Some(Self::Get171InfoRequestCmd),
            "GetAct172InfoRequestCmd" => Some(Self::GetAct172InfoRequestCmd),
            "Act172UseItemTaskIdsUpdatePushCmd" => {
                Some(Self::Act172UseItemTaskIdsUpdatePushCmd)
            }
            "GetAct174InfoRequestCmd" => Some(Self::GetAct174InfoRequestCmd),
            "Start174GameRequestCmd" => Some(Self::Start174GameRequestCmd),
            "Fresh174ShopRequestCmd" => Some(Self::Fresh174ShopRequestCmd),
            "BuyIn174ShopRequestCmd" => Some(Self::BuyIn174ShopRequestCmd),
            "ChangeAct174TeamRequestCmd" => Some(Self::ChangeAct174TeamRequestCmd),
            "SwitchAct174TeamRequestCmd" => Some(Self::SwitchAct174TeamRequestCmd),
            "SelectAct174ForceBagRequestCmd" => {
                Some(Self::SelectAct174ForceBagRequestCmd)
            }
            "StartAct174FightMatchRequestCmd" => {
                Some(Self::StartAct174FightMatchRequestCmd)
            }
            "BetHpBeforeAct174FightRequestCmd" => {
                Some(Self::BetHpBeforeAct174FightRequestCmd)
            }
            "EnterEndLessAct174FightRequestCmd" => {
                Some(Self::EnterEndLessAct174FightRequestCmd)
            }
            "EndAct174GameRequestCmd" => Some(Self::EndAct174GameRequestCmd),
            "StartAct174FightRequestCmd" => Some(Self::StartAct174FightRequestCmd),
            "EnterNextAct174FightRequestCmd" => {
                Some(Self::EnterNextAct174FightRequestCmd)
            }
            "ChangeSeasonEndAct174RequestCmd" => {
                Some(Self::ChangeSeasonEndAct174RequestCmd)
            }
            "ViewFightAct174RequestCmd" => Some(Self::ViewFightAct174RequestCmd),
            "TempAct174RequestCmd" => Some(Self::TempAct174RequestCmd),
            "Act174GameInfoUpdatePushCmd" => Some(Self::Act174GameInfoUpdatePushCmd),
            "Act174TriggerEffectPushCmd" => Some(Self::Act174TriggerEffectPushCmd),
            "GetAct178InfoRequestCmd" => Some(Self::GetAct178InfoRequestCmd),
            "Act178StartEpisodeRequestCmd" => Some(Self::Act178StartEpisodeRequestCmd),
            "Act178EndEpisodeRequestCmd" => Some(Self::Act178EndEpisodeRequestCmd),
            "Act178EndRoundRequestCmd" => Some(Self::Act178EndRoundRequestCmd),
            "Act178RestRequestCmd" => Some(Self::Act178RestRequestCmd),
            "Act178ResetRequestCmd" => Some(Self::Act178ResetRequestCmd),
            "Act178UnlockTalentRequestCmd" => Some(Self::Act178UnlockTalentRequestCmd),
            "Act178BuildRequestCmd" => Some(Self::Act178BuildRequestCmd),
            "Act178GetRewardRequestCmd" => Some(Self::Act178GetRewardRequestCmd),
            "Act178InteractRequestCmd" => Some(Self::Act178InteractRequestCmd),
            "Act178CurrencyChangePushCmd" => Some(Self::Act178CurrencyChangePushCmd),
            "Act178GuideAddGrainRequestCmd" => Some(Self::Act178GuideAddGrainRequestCmd),
            "Get179InfosRequestCmd" => Some(Self::Get179InfosRequestCmd),
            "Set179ScoreRequestCmd" => Some(Self::Set179ScoreRequestCmd),
            "Get180InfosRequestCmd" => Some(Self::Get180InfosRequestCmd),
            "Act180EnterEpisodeRequestCmd" => Some(Self::Act180EnterEpisodeRequestCmd),
            "Act180StoryRequestCmd" => Some(Self::Act180StoryRequestCmd),
            "Act180GameFinishRequestCmd" => Some(Self::Act180GameFinishRequestCmd),
            "Act180SaveGameRequestCmd" => Some(Self::Act180SaveGameRequestCmd),
            "Act180EpisodePushCmd" => Some(Self::Act180EpisodePushCmd),
            "Get181InfosRequestCmd" => Some(Self::Get181InfosRequestCmd),
            "Get181BonusRequestCmd" => Some(Self::Get181BonusRequestCmd),
            "Get181SpBonusRequestCmd" => Some(Self::Get181SpBonusRequestCmd),
            "GetAct182InfoRequestCmd" => Some(Self::GetAct182InfoRequestCmd),
            "GetAct182RandomMasterRequestCmd" => {
                Some(Self::GetAct182RandomMasterRequestCmd)
            }
            "Act182RefreshMasterRequestCmd" => Some(Self::Act182RefreshMasterRequestCmd),
            "Act182InfoPushCmd" => Some(Self::Act182InfoPushCmd),
            "Act182GetRankRewardRequestCmd" => Some(Self::Act182GetRankRewardRequestCmd),
            "Act183GetInfoRequestCmd" => Some(Self::Act183GetInfoRequestCmd),
            "Act183ResetGroupRequestCmd" => Some(Self::Act183ResetGroupRequestCmd),
            "Act183ResetEpisodeRequestCmd" => Some(Self::Act183ResetEpisodeRequestCmd),
            "Act183ChooseRepressRequestCmd" => Some(Self::Act183ChooseRepressRequestCmd),
            "Act183GetRecordRequestCmd" => Some(Self::Act183GetRecordRequestCmd),
            "Act183ReplaceResultRequestCmd" => Some(Self::Act183ReplaceResultRequestCmd),
            "Act183BadgeNumUpdatePushCmd" => Some(Self::Act183BadgeNumUpdatePushCmd),
            "Act183BattleFinishPushCmd" => Some(Self::Act183BattleFinishPushCmd),
            "GetAct184InfoRequestCmd" => Some(Self::GetAct184InfoRequestCmd),
            "Act184FinishEpisodeRequestCmd" => Some(Self::Act184FinishEpisodeRequestCmd),
            "Act184EpisodePushCmd" => Some(Self::Act184EpisodePushCmd),
            "GetAct185InfoRequestCmd" => Some(Self::GetAct185InfoRequestCmd),
            "Act185FinishEpisodeRequestCmd" => Some(Self::Act185FinishEpisodeRequestCmd),
            "Act185EpisodePushCmd" => Some(Self::Act185EpisodePushCmd),
            "GetAct186InfoRequestCmd" => Some(Self::GetAct186InfoRequestCmd),
            "FinishAct186TaskRequestCmd" => Some(Self::FinishAct186TaskRequestCmd),
            "GetAct186MilestoneRewardRequestCmd" => {
                Some(Self::GetAct186MilestoneRewardRequestCmd)
            }
            "GetAct186DailyCollectionRequestCmd" => {
                Some(Self::GetAct186DailyCollectionRequestCmd)
            }
            "Act186TaskPushCmd" => Some(Self::Act186TaskPushCmd),
            "Act186LikePushCmd" => Some(Self::Act186LikePushCmd),
            "FinishAct186ATypeGameRequestCmd" => {
                Some(Self::FinishAct186ATypeGameRequestCmd)
            }
            "Act186BTypeGamePlayRequestCmd" => Some(Self::Act186BTypeGamePlayRequestCmd),
            "FinishAct186BTypeGameRequestCmd" => {
                Some(Self::FinishAct186BTypeGameRequestCmd)
            }
            "GetAct186OnceBonusRequestCmd" => Some(Self::GetAct186OnceBonusRequestCmd),
            "Get187InfoRequestCmd" => Some(Self::Get187InfoRequestCmd),
            "Act187FinishGameRequestCmd" => Some(Self::Act187FinishGameRequestCmd),
            "Act187AcceptRewardRequestCmd" => Some(Self::Act187AcceptRewardRequestCmd),
            "GetAct189InfoRequestCmd" => Some(Self::GetAct189InfoRequestCmd),
            "GetAct189OnceBonusRequestCmd" => Some(Self::GetAct189OnceBonusRequestCmd),
            "GetActivityInfosRequestCmd" => Some(Self::GetActivityInfosRequestCmd),
            "GetActivityInfosWithParamRequestCmd" => {
                Some(Self::GetActivityInfosWithParamRequestCmd)
            }
            "UpdateActivityPushCmd" => Some(Self::UpdateActivityPushCmd),
            "EndActivityPushCmd" => Some(Self::EndActivityPushCmd),
            "ActivityNewStageReadRequestCmd" => {
                Some(Self::ActivityNewStageReadRequestCmd)
            }
            "UnlockPermanentRequestCmd" => Some(Self::UnlockPermanentRequestCmd),
            "GetAntiqueInfoRequestCmd" => Some(Self::GetAntiqueInfoRequestCmd),
            "AntiqueUpdatePushCmd" => Some(Self::AntiqueUpdatePushCmd),
            "AutoChessGetSceneRequestCmd" => Some(Self::AutoChessGetSceneRequestCmd),
            "AutoChessEnterSceneRequestCmd" => Some(Self::AutoChessEnterSceneRequestCmd),
            "AutoChessEnterFightRequestCmd" => Some(Self::AutoChessEnterFightRequestCmd),
            "AutoChessBuyChessRequestCmd" => Some(Self::AutoChessBuyChessRequestCmd),
            "AutoChessBuildRequestCmd" => Some(Self::AutoChessBuildRequestCmd),
            "AutoChessRefreshMallRequestCmd" => {
                Some(Self::AutoChessRefreshMallRequestCmd)
            }
            "AutoChessFreezeItemRequestCmd" => Some(Self::AutoChessFreezeItemRequestCmd),
            "AutoChessMallRegionSelectItemRequestCmd" => {
                Some(Self::AutoChessMallRegionSelectItemRequestCmd)
            }
            "AutoChessUseMasterSkillRequestCmd" => {
                Some(Self::AutoChessUseMasterSkillRequestCmd)
            }
            "AutoChessPreviewFightRequestCmd" => {
                Some(Self::AutoChessPreviewFightRequestCmd)
            }
            "AutoChessGiveUpRequestCmd" => Some(Self::AutoChessGiveUpRequestCmd),
            "AutoChessMallUpgradePushCmd" => Some(Self::AutoChessMallUpgradePushCmd),
            "AutoChessScenePushCmd" => Some(Self::AutoChessScenePushCmd),
            "AutoChessRoundSettlePushCmd" => Some(Self::AutoChessRoundSettlePushCmd),
            "AutoChessSettlePushCmd" => Some(Self::AutoChessSettlePushCmd),
            "GetBannerInfoRequestCmd" => Some(Self::GetBannerInfoRequestCmd),
            "SetBannerNotShowRequestCmd" => Some(Self::SetBannerNotShowRequestCmd),
            "SetUseBgmRequestCmd" => Some(Self::SetUseBgmRequestCmd),
            "SetFavoriteBgmRequestCmd" => Some(Self::SetFavoriteBgmRequestCmd),
            "GetBgmInfoRequestCmd" => Some(Self::GetBgmInfoRequestCmd),
            "UpdateBgmPushCmd" => Some(Self::UpdateBgmPushCmd),
            "ReadBgmRequestCmd" => Some(Self::ReadBgmRequestCmd),
            "GetBpInfoRequestCmd" => Some(Self::GetBpInfoRequestCmd),
            "GetBpBonusRequestCmd" => Some(Self::GetBpBonusRequestCmd),
            "BpScoreUpdatePushCmd" => Some(Self::BpScoreUpdatePushCmd),
            "BpPayPushCmd" => Some(Self::BpPayPushCmd),
            "BpBuyLevelRequsetCmd" => Some(Self::BpBuyLevelRequsetCmd),
            "BpMarkFirstShowRequestCmd" => Some(Self::BpMarkFirstShowRequestCmd),
            "BpOpenPushCmd" => Some(Self::BpOpenPushCmd),
            "GetSelfSelectBonusRequestCmd" => Some(Self::GetSelfSelectBonusRequestCmd),
            "GetChargeInfoRequestCmd" => Some(Self::GetChargeInfoRequestCmd),
            "NewOrderRequestCmd" => Some(Self::NewOrderRequestCmd),
            "OrderCompletePushCmd" => Some(Self::OrderCompletePushCmd),
            "GetMonthCardInfoRequestCmd" => Some(Self::GetMonthCardInfoRequestCmd),
            "GetMonthCardBonusRequestCmd" => Some(Self::GetMonthCardBonusRequestCmd),
            "SandboxChargeRequsetCmd" => Some(Self::SandboxChargeRequsetCmd),
            "ReadChargeNewRequestCmd" => Some(Self::ReadChargeNewRequestCmd),
            "SendMsgRequestCmd" => Some(Self::SendMsgRequestCmd),
            "DeleteOfflineMsgRequestCmd" => Some(Self::DeleteOfflineMsgRequestCmd),
            "ChatMsgPushCmd" => Some(Self::ChatMsgPushCmd),
            "GetReportTypeRequestCmd" => Some(Self::GetReportTypeRequestCmd),
            "ReportRequestCmd" => Some(Self::ReportRequestCmd),
            "WordTestRequestCmd" => Some(Self::WordTestRequestCmd),
            "GetServerTimeRequestCmd" => Some(Self::GetServerTimeRequestCmd),
            "CritterGetInfoRequestCmd" => Some(Self::CritterGetInfoRequestCmd),
            "StartTrainCritterRequestCmd" => Some(Self::StartTrainCritterRequestCmd),
            "SelectEventOptionRequestCmd" => Some(Self::SelectEventOptionRequestCmd),
            "SelectMultiEventOptionRequestCmd" => {
                Some(Self::SelectMultiEventOptionRequestCmd)
            }
            "FastForwardTrainRequestCmd" => Some(Self::FastForwardTrainRequestCmd),
            "FinishTrainCritterRequestCmd" => Some(Self::FinishTrainCritterRequestCmd),
            "BanishCritterRequestCmd" => Some(Self::BanishCritterRequestCmd),
            "SummonCritterInfoRequestCmd" => Some(Self::SummonCritterInfoRequestCmd),
            "SummonCritterRequestCmd" => Some(Self::SummonCritterRequestCmd),
            "LockCritterRequestCmd" => Some(Self::LockCritterRequestCmd),
            "ResetSummonCritterPoolRequestCmd" => {
                Some(Self::ResetSummonCritterPoolRequestCmd)
            }
            "GainGuideCritterRequestCmd" => Some(Self::GainGuideCritterRequestCmd),
            "IncubateCritterRequestCmd" => Some(Self::IncubateCritterRequestCmd),
            "CritterInfoPushCmd" => Some(Self::CritterInfoPushCmd),
            "IncubateCritterPreviewRequestCmd" => {
                Some(Self::IncubateCritterPreviewRequestCmd)
            }
            "GetCritterBookInfoRequestCmd" => Some(Self::GetCritterBookInfoRequestCmd),
            "SetCritterBookBackgroundRequestCmd" => {
                Some(Self::SetCritterBookBackgroundRequestCmd)
            }
            "SetCritterBookUseSpecialSkinRequestCmd" => {
                Some(Self::SetCritterBookUseSpecialSkinRequestCmd)
            }
            "CancelTrainRequestCmd" => Some(Self::CancelTrainRequestCmd),
            "MarkCritterBookNewReadRequestCmd" => {
                Some(Self::MarkCritterBookNewReadRequestCmd)
            }
            "RefreshCritterMoodRequestCmd" => Some(Self::RefreshCritterMoodRequestCmd),
            "GetRealCritterAttributeRequestCmd" => {
                Some(Self::GetRealCritterAttributeRequestCmd)
            }
            "RefreshBuildingCritterAttibutesRequestCmd" => {
                Some(Self::RefreshBuildingCritterAttibutesRequestCmd)
            }
            "RealCritterAttributePushCmd" => Some(Self::RealCritterAttributePushCmd),
            "StartTrainCritterPreviewRequestCmd" => {
                Some(Self::StartTrainCritterPreviewRequestCmd)
            }
            "CritterRenameRequestCmd" => Some(Self::CritterRenameRequestCmd),
            "GetCurrencyListRequestCmd" => Some(Self::GetCurrencyListRequestCmd),
            "CurrencyChangePushCmd" => Some(Self::CurrencyChangePushCmd),
            "GetBuyPowerInfoRequestCmd" => Some(Self::GetBuyPowerInfoRequestCmd),
            "BuyPowerRequestCmd" => Some(Self::BuyPowerRequestCmd),
            "ExchangeDiamondRequestCmd" => Some(Self::ExchangeDiamondRequestCmd),
            "GetDialogInfoRequestCmd" => Some(Self::GetDialogInfoRequestCmd),
            "RecordDialogInfoRequestCmd" => Some(Self::RecordDialogInfoRequestCmd),
            "GetDispatchInfoRequestCmd" => Some(Self::GetDispatchInfoRequestCmd),
            "DispatchRequestCmd" => Some(Self::DispatchRequestCmd),
            "InterruptDispatchRequestCmd" => Some(Self::InterruptDispatchRequestCmd),
            "GetDungeonRequestCmd" => Some(Self::GetDungeonRequestCmd),
            "DungeonUpdatePushCmd" => Some(Self::DungeonUpdatePushCmd),
            "DungeonInfosPushCmd" => Some(Self::DungeonInfosPushCmd),
            "StartDungeonRequestCmd" => Some(Self::StartDungeonRequestCmd),
            "EndDungeonRequestCmd" => Some(Self::EndDungeonRequestCmd),
            "EndDungeonPushCmd" => Some(Self::EndDungeonPushCmd),
            "MapElementRequestCmd" => Some(Self::MapElementRequestCmd),
            "ChapterMapUpdatePushCmd" => Some(Self::ChapterMapUpdatePushCmd),
            "ChapterMapElementUpdatePushCmd" => {
                Some(Self::ChapterMapElementUpdatePushCmd)
            }
            "GetPointRewardRequestCmd" => Some(Self::GetPointRewardRequestCmd),
            "GetEpisodeHeroRecommendRequestCmd" => {
                Some(Self::GetEpisodeHeroRecommendRequestCmd)
            }
            "EquipSpDungeonUpdatePushCmd" => Some(Self::EquipSpDungeonUpdatePushCmd),
            "RewardPointUpdatePushCmd" => Some(Self::RewardPointUpdatePushCmd),
            "InstructionDungeonRewardRequestCmd" => {
                Some(Self::InstructionDungeonRewardRequestCmd)
            }
            "InstructionDungeonFinalRewardRequestCmd" => {
                Some(Self::InstructionDungeonFinalRewardRequestCmd)
            }
            "InstructionDungeonInfoRequestCmd" => {
                Some(Self::InstructionDungeonInfoRequestCmd)
            }
            "InstructionDungeonInfoPushCmd" => Some(Self::InstructionDungeonInfoPushCmd),
            "InstructionDungeonOpenRequestCmd" => {
                Some(Self::InstructionDungeonOpenRequestCmd)
            }
            "CoverDungeonRecordRequestCmd" => Some(Self::CoverDungeonRecordRequestCmd),
            "PuzzleFinishRequestCmd" => Some(Self::PuzzleFinishRequestCmd),
            "SavePuzzleProgressRequestCmd" => Some(Self::SavePuzzleProgressRequestCmd),
            "GetPuzzleProgressRequestCmd" => Some(Self::GetPuzzleProgressRequestCmd),
            "RefreshAssistRequestCmd" => Some(Self::RefreshAssistRequestCmd),
            "GetMainDramaRewardRequestCmd" => Some(Self::GetMainDramaRewardRequestCmd),
            "GetEquipInfoRequestCmd" => Some(Self::GetEquipInfoRequestCmd),
            "EquipUpdatePushCmd" => Some(Self::EquipUpdatePushCmd),
            "EquipDeletePushCmd" => Some(Self::EquipDeletePushCmd),
            "EquipStrengthenRequestCmd" => Some(Self::EquipStrengthenRequestCmd),
            "EquipBreakRequestCmd" => Some(Self::EquipBreakRequestCmd),
            "EquipLockRequestCmd" => Some(Self::EquipLockRequestCmd),
            "EquipComposeRequestCmd" => Some(Self::EquipComposeRequestCmd),
            "EquipDecomposeRequestCmd" => Some(Self::EquipDecomposeRequestCmd),
            "EquipRefineRequestCmd" => Some(Self::EquipRefineRequestCmd),
            "GetExploreInfoRequestCmd" => Some(Self::GetExploreInfoRequestCmd),
            "GetExploreSimpleInfoRequestCmd" => {
                Some(Self::GetExploreSimpleInfoRequestCmd)
            }
            "ChangeMapRequestCmd" => Some(Self::ChangeMapRequestCmd),
            "ExploreMoveRequestCmd" => Some(Self::ExploreMoveRequestCmd),
            "ExploreUseItemRequestCmd" => Some(Self::ExploreUseItemRequestCmd),
            "ExploreItemChangePushCmd" => Some(Self::ExploreItemChangePushCmd),
            "ExploreInteractRequestCmd" => Some(Self::ExploreInteractRequestCmd),
            "ExploreItemInteractRequestCmd" => Some(Self::ExploreItemInteractRequestCmd),
            "ExploreStepPushCmd" => Some(Self::ExploreStepPushCmd),
            "ResetExploreRequestCmd" => Some(Self::ResetExploreRequestCmd),
            "GetFairylandInfoRequestCmd" => Some(Self::GetFairylandInfoRequestCmd),
            "ResolvePuzzleRequestCmd" => Some(Self::ResolvePuzzleRequestCmd),
            "RecordDialogRequestCmd" => Some(Self::RecordDialogRequestCmd),
            "RecordElementRequestCmd" => Some(Self::RecordElementRequestCmd),
            "BeginFightRequestCmd" => Some(Self::BeginFightRequestCmd),
            "TestFightRequestCmd" => Some(Self::TestFightRequestCmd),
            "TestFightIdRequestCmd" => Some(Self::TestFightIdRequestCmd),
            "MoveCardRequestCmd" => Some(Self::MoveCardRequestCmd),
            "ResetRoundRequestCmd" => Some(Self::ResetRoundRequestCmd),
            "BeginRoundRequestCmd" => Some(Self::BeginRoundRequestCmd),
            "EndRoundRequestCmd" => Some(Self::EndRoundRequestCmd),
            "ChangeSubHeroRequestCmd" => Some(Self::ChangeSubHeroRequestCmd),
            "ChangeSubHeroExSkillRequestCmd" => {
                Some(Self::ChangeSubHeroExSkillRequestCmd)
            }
            "ReconnectFightRequestCmd" => Some(Self::ReconnectFightRequestCmd),
            "CardInfoPushCmd" => Some(Self::CardInfoPushCmd),
            "TeamInfoPushCmd" => Some(Self::TeamInfoPushCmd),
            "EndFightRequestCmd" => Some(Self::EndFightRequestCmd),
            "EndFightPushCmd" => Some(Self::EndFightPushCmd),
            "FightWavePushCmd" => Some(Self::FightWavePushCmd),
            "UseClothSkillRequestCmd" => Some(Self::UseClothSkillRequestCmd),
            "RedealCardInfoPushCmd" => Some(Self::RedealCardInfoPushCmd),
            "AutoRoundRequestCmd" => Some(Self::AutoRoundRequestCmd),
            "GetFightOperRequestCmd" => Some(Self::GetFightOperRequestCmd),
            "GetFightRecordGroupRequestCmd" => Some(Self::GetFightRecordGroupRequestCmd),
            "EntityInfoRequestCmd" => Some(Self::EntityInfoRequestCmd),
            "GetFightCardDeckInfoRequestCmd" => {
                Some(Self::GetFightCardDeckInfoRequestCmd)
            }
            "GetEntityDetailInfosRequestCmd" => {
                Some(Self::GetEntityDetailInfosRequestCmd)
            }
            "GetFightRecordAllRequestCmd" => Some(Self::GetFightRecordAllRequestCmd),
            "FightWithRecordAllRequestCmd" => Some(Self::FightWithRecordAllRequestCmd),
            "GetFightCardDeckDetailInfoRequestCmd" => {
                Some(Self::GetFightCardDeckDetailInfoRequestCmd)
            }
            "GetApplyListRequestCmd" => Some(Self::GetApplyListRequestCmd),
            "ApplyRequestCmd" => Some(Self::ApplyRequestCmd),
            "HandleApplyRequestCmd" => Some(Self::HandleApplyRequestCmd),
            "RejectAllRequestCmd" => Some(Self::RejectAllRequestCmd),
            "GetFriendInfoListRequestCmd" => Some(Self::GetFriendInfoListRequestCmd),
            "AddBlacklistRequestCmd" => Some(Self::AddBlacklistRequestCmd),
            "RemoveBlacklistRequestCmd" => Some(Self::RemoveBlacklistRequestCmd),
            "RemoveFriendRequestCmd" => Some(Self::RemoveFriendRequestCmd),
            "SearchRequestCmd" => Some(Self::SearchRequestCmd),
            "GetBlacklistRequestCmd" => Some(Self::GetBlacklistRequestCmd),
            "BlacklistChangePushCmd" => Some(Self::BlacklistChangePushCmd),
            "AgreeAllRequestCmd" => Some(Self::AgreeAllRequestCmd),
            "LoadFriendInfosRequestCmd" => Some(Self::LoadFriendInfosRequestCmd),
            "FriendChangePushCmd" => Some(Self::FriendChangePushCmd),
            "FriendDescChangeRequestCmd" => Some(Self::FriendDescChangeRequestCmd),
            "GetRecommendedFriendsRequestCmd" => {
                Some(Self::GetRecommendedFriendsRequestCmd)
            }
            "GMRequestCmd" => Some(Self::GmRequestCmd),
            "GpuCpuLogRequestCmd" => Some(Self::GpuCpuLogRequestCmd),
            "GMSummonResultPushCmd" => Some(Self::GmSummonResultPushCmd),
            "FightTipsMessagePushCmd" => Some(Self::FightTipsMessagePushCmd),
            "FinishGuideRequestCmd" => Some(Self::FinishGuideRequestCmd),
            "UpdateGuidePushCmd" => Some(Self::UpdateGuidePushCmd),
            "GetGuideInfoRequestCmd" => Some(Self::GetGuideInfoRequestCmd),
            "GetHandbookInfoRequestCmd" => Some(Self::GetHandbookInfoRequestCmd),
            "HandbookReadRequestCmd" => Some(Self::HandbookReadRequestCmd),
            "GetHeroGroupListRequestCmd" => Some(Self::GetHeroGroupListRequestCmd),
            "UpdateHeroGroupRequestCmd" => Some(Self::UpdateHeroGroupRequestCmd),
            "SetHeroGroupEquipRequestCmd" => Some(Self::SetHeroGroupEquipRequestCmd),
            "SetHeroGroupSnapshotRequestCmd" => {
                Some(Self::SetHeroGroupSnapshotRequestCmd)
            }
            "UpdateHeroGroupPushCmd" => Some(Self::UpdateHeroGroupPushCmd),
            "GetHeroGroupCommonListRequestCmd" => {
                Some(Self::GetHeroGroupCommonListRequestCmd)
            }
            "ChangeHeroGroupSelectRequestCmd" => {
                Some(Self::ChangeHeroGroupSelectRequestCmd)
            }
            "UpdateHeroGroupNameRequestCmd" => Some(Self::UpdateHeroGroupNameRequestCmd),
            "GetHeroGroupSnapshotListRequestCmd" => {
                Some(Self::GetHeroGroupSnapshotListRequestCmd)
            }
            "GetHeroInvitationInfoRequestCmd" => {
                Some(Self::GetHeroInvitationInfoRequestCmd)
            }
            "GainInviteRewardRequestCmd" => Some(Self::GainInviteRewardRequestCmd),
            "GainFinalInviteRewardRequestCmd" => {
                Some(Self::GainFinalInviteRewardRequestCmd)
            }
            "HeroInfoListRequestCmd" => Some(Self::HeroInfoListRequestCmd),
            "HeroUpdatePushCmd" => Some(Self::HeroUpdatePushCmd),
            "HeroUpgradeSkillRequestCmd" => Some(Self::HeroUpgradeSkillRequestCmd),
            "HeroLevelUpRequestCmd" => Some(Self::HeroLevelUpRequestCmd),
            "HeroRankUpRequestCmd" => Some(Self::HeroRankUpRequestCmd),
            "UseSkinRequestCmd" => Some(Self::UseSkinRequestCmd),
            "HeroSkinGainPushCmd" => Some(Self::HeroSkinGainPushCmd),
            "UnMarkIsNewRequestCmd" => Some(Self::UnMarkIsNewRequestCmd),
            "UnlockVoiceRequestCmd" => Some(Self::UnlockVoiceRequestCmd),
            "ItemUnlockRequestCmd" => Some(Self::ItemUnlockRequestCmd),
            "HeroGainPushCmd" => Some(Self::HeroGainPushCmd),
            "HeroTouchRequestCmd" => Some(Self::HeroTouchRequestCmd),
            "HeroTalentUpRequestCmd" => Some(Self::HeroTalentUpRequestCmd),
            "PutTalentCubeRequestCmd" => Some(Self::PutTalentCubeRequestCmd),
            "TakeoffAllTalentCubeRequestCmd" => {
                Some(Self::TakeoffAllTalentCubeRequestCmd)
            }
            "PutTalentSchemeRequestCmd" => Some(Self::PutTalentSchemeRequestCmd),
            "HeroDefaultEquipRequestCmd" => Some(Self::HeroDefaultEquipRequestCmd),
            "RenameTalentTemplateRequestCmd" => {
                Some(Self::RenameTalentTemplateRequestCmd)
            }
            "UseTalentTemplateRequestCmd" => Some(Self::UseTalentTemplateRequestCmd),
            "UnlockTalentStyleRequestCmd" => Some(Self::UnlockTalentStyleRequestCmd),
            "UseTalentStyleRequestCmd" => Some(Self::UseTalentStyleRequestCmd),
            "TalentStyleReadRequestCmd" => Some(Self::TalentStyleReadRequestCmd),
            "MarkHeroFavorRequestCmd" => Some(Self::MarkHeroFavorRequestCmd),
            "HeroLevelUpUpdatePushCmd" => Some(Self::HeroLevelUpUpdatePushCmd),
            "HeroTalentStyleStatRequestCmd" => Some(Self::HeroTalentStyleStatRequestCmd),
            "DestinyLevelUpRequestCmd" => Some(Self::DestinyLevelUpRequestCmd),
            "DestinyRankUpRequestCmd" => Some(Self::DestinyRankUpRequestCmd),
            "DestinyStoneUnlockRequestCmd" => Some(Self::DestinyStoneUnlockRequestCmd),
            "DestinyStoneUseRequestCmd" => Some(Self::DestinyStoneUseRequestCmd),
            "HeroRedDotReadRequestCmd" => Some(Self::HeroRedDotReadRequestCmd),
            "PutTalentCubeBatchRequestCmd" => Some(Self::PutTalentCubeBatchRequestCmd),
            "GetHeroStoryRequestCmd" => Some(Self::GetHeroStoryRequestCmd),
            "UnlocHeroStoryRequestCmd" => Some(Self::UnlocHeroStoryRequestCmd),
            "GetHeroStoryBonusRequestCmd" => Some(Self::GetHeroStoryBonusRequestCmd),
            "HeroStoryUpdatePushCmd" => Some(Self::HeroStoryUpdatePushCmd),
            "UpdateHeroStoryStatusRequestCmd" => {
                Some(Self::UpdateHeroStoryStatusRequestCmd)
            }
            "ExchangeTicketRequestCmd" => Some(Self::ExchangeTicketRequestCmd),
            "GetScoreBonusRequestCmd" => Some(Self::GetScoreBonusRequestCmd),
            "GetChallengeBonusRequestCmd" => Some(Self::GetChallengeBonusRequestCmd),
            "HeroStoryScorePushCmd" => Some(Self::HeroStoryScorePushCmd),
            "HeroStoryTicketPushCmd" => Some(Self::HeroStoryTicketPushCmd),
            "HeroStoryWeekTaskPushCmd" => Some(Self::HeroStoryWeekTaskPushCmd),
            "HeroStoryWeekTaskGetRequestCmd" => {
                Some(Self::HeroStoryWeekTaskGetRequestCmd)
            }
            "HeroStoryDispatchRequestCmd" => Some(Self::HeroStoryDispatchRequestCmd),
            "HeroStoryDispatchCompleteRequestCmd" => {
                Some(Self::HeroStoryDispatchCompleteRequestCmd)
            }
            "HeroStoryDispatchResetRequestCmd" => {
                Some(Self::HeroStoryDispatchResetRequestCmd)
            }
            "GetInvestigateRequestCmd" => Some(Self::GetInvestigateRequestCmd),
            "PutClueRequestCmd" => Some(Self::PutClueRequestCmd),
            "InvestigateInfoPushCmd" => Some(Self::InvestigateInfoPushCmd),
            "GetItemListRequestCmd" => Some(Self::GetItemListRequestCmd),
            "ItemChangePushCmd" => Some(Self::ItemChangePushCmd),
            "UseItemRequestCmd" => Some(Self::UseItemRequestCmd),
            "UsePowerItemRequestCmd" => Some(Self::UsePowerItemRequestCmd),
            "UsePowerItemListRequestCmd" => Some(Self::UsePowerItemListRequestCmd),
            "AutoUseExpirePowerItemRequestCmd" => {
                Some(Self::AutoUseExpirePowerItemRequestCmd)
            }
            "MarkReadSubType21RequestCmd" => Some(Self::MarkReadSubType21RequestCmd),
            "UseInsightItemRequestCmd" => Some(Self::UseInsightItemRequestCmd),
            "GetAllMailsRequestCmd" => Some(Self::GetAllMailsRequestCmd),
            "ReadMailRequestCmd" => Some(Self::ReadMailRequestCmd),
            "ReadMailBatchRequestCmd" => Some(Self::ReadMailBatchRequestCmd),
            "NewMailPushCmd" => Some(Self::NewMailPushCmd),
            "DeleteMailsPushCmd" => Some(Self::DeleteMailsPushCmd),
            "DeleteMailBatchRequestCmd" => Some(Self::DeleteMailBatchRequestCmd),
            "MarkMailJumpRequestCmd" => Some(Self::MarkMailJumpRequestCmd),
            "AutoReadMailPushCmd" => Some(Self::AutoReadMailPushCmd),
            "GetMatch3WarChessFacadeInfoRequestCmd" => {
                Some(Self::GetMatch3WarChessFacadeInfoRequestCmd)
            }
            "StartMatch3WarChessInfoRequestCmd" => {
                Some(Self::StartMatch3WarChessInfoRequestCmd)
            }
            "Match3ChessBoardSwapRequestCmd" => {
                Some(Self::Match3ChessBoardSwapRequestCmd)
            }
            "GetMatch3WarChessTaskRewardRequestCmd" => {
                Some(Self::GetMatch3WarChessTaskRewardRequestCmd)
            }
            "GetMatch3WarChessInfoRequestCmd" => {
                Some(Self::GetMatch3WarChessInfoRequestCmd)
            }
            "RefreshMatch3WarChessInfoRequestCmd" => {
                Some(Self::RefreshMatch3WarChessInfoRequestCmd)
            }
            "MaterialChangePushCmd" => Some(Self::MaterialChangePushCmd),
            "UpdateOpenPushCmd" => Some(Self::UpdateOpenPushCmd),
            "GetPlayerCardInfoRequestCmd" => Some(Self::GetPlayerCardInfoRequestCmd),
            "GetOtherPlayerCardInfoRequestCmd" => {
                Some(Self::GetOtherPlayerCardInfoRequestCmd)
            }
            "PlayerCardInfoPushCmd" => Some(Self::PlayerCardInfoPushCmd),
            "SetPlayerCardShowSettingRequestCmd" => {
                Some(Self::SetPlayerCardShowSettingRequestCmd)
            }
            "SetPlayerCardProgressSettingRequestCmd" => {
                Some(Self::SetPlayerCardProgressSettingRequestCmd)
            }
            "SetPlayerCardBaseSettingRequestCmd" => {
                Some(Self::SetPlayerCardBaseSettingRequestCmd)
            }
            "SetPlayerCardHeroCoverRequestCmd" => {
                Some(Self::SetPlayerCardHeroCoverRequestCmd)
            }
            "SetPlayerCardThemeRequestCmd" => Some(Self::SetPlayerCardThemeRequestCmd),
            "SetPlayerCardShowAchievementRequestCmd" => {
                Some(Self::SetPlayerCardShowAchievementRequestCmd)
            }
            "SetPlayerCardCritterRequestCmd" => {
                Some(Self::SetPlayerCardCritterRequestCmd)
            }
            "GetPlayerInfoRequestCmd" => Some(Self::GetPlayerInfoRequestCmd),
            "CreatePlayerRequestCmd" => Some(Self::CreatePlayerRequestCmd),
            "PlayerInfoPushCmd" => Some(Self::PlayerInfoPushCmd),
            "RenameRequestCmd" => Some(Self::RenameRequestCmd),
            "SetSignatureRequestCmd" => Some(Self::SetSignatureRequestCmd),
            "SetBirthdayRequestCmd" => Some(Self::SetBirthdayRequestCmd),
            "SetPortraitRequestCmd" => Some(Self::SetPortraitRequestCmd),
            "SetShowHeroUniqueIdsRequestCmd" => {
                Some(Self::SetShowHeroUniqueIdsRequestCmd)
            }
            "GetSimplePropertyRequestCmd" => Some(Self::GetSimplePropertyRequestCmd),
            "SetSimplePropertyRequestCmd" => Some(Self::SetSimplePropertyRequestCmd),
            "SimplePropertyPushCmd" => Some(Self::SimplePropertyPushCmd),
            "GetClothInfoRequestCmd" => Some(Self::GetClothInfoRequestCmd),
            "ClothUpdatePushCmd" => Some(Self::ClothUpdatePushCmd),
            "ServerResultCodePushCmd" => Some(Self::ServerResultCodePushCmd),
            "GetOtherPlayerInfoRequestCmd" => Some(Self::GetOtherPlayerInfoRequestCmd),
            "SetCharacterAgeRequestCmd" => Some(Self::SetCharacterAgeRequestCmd),
            "UseCdKeyRequsetCmd" => Some(Self::UseCdKeyRequsetCmd),
            "MarkMainThumbnailRequestCmd" => Some(Self::MarkMainThumbnailRequestCmd),
            "SetPlayerBgRequestCmd" => Some(Self::SetPlayerBgRequestCmd),
            "GetAssistBonusRequestCmd" => Some(Self::GetAssistBonusRequestCmd),
            "ReceiveAssistBonusRequestCmd" => Some(Self::ReceiveAssistBonusRequestCmd),
            "SetMainSceneSkinRequestCmd" => Some(Self::SetMainSceneSkinRequestCmd),
            "GetRedDotInfosRequestCmd" => Some(Self::GetRedDotInfosRequestCmd),
            "UpdateRedDotPushCmd" => Some(Self::UpdateRedDotPushCmd),
            "ShowRedDotRequestCmd" => Some(Self::ShowRedDotRequestCmd),
            "GetRogueStateRequestCmd" => Some(Self::GetRogueStateRequestCmd),
            "GetRogueInfoRequestCmd" => Some(Self::GetRogueInfoRequestCmd),
            "GetRogueScoreRewardRequestCmd" => Some(Self::GetRogueScoreRewardRequestCmd),
            "AbortRogueRequestCmd" => Some(Self::AbortRogueRequestCmd),
            "EnterRogueRequestCmd" => Some(Self::EnterRogueRequestCmd),
            "RogueEventStartRequestCmd" => Some(Self::RogueEventStartRequestCmd),
            "RogueEventSelectRequestCmd" => Some(Self::RogueEventSelectRequestCmd),
            "RogueEventEndRequestCmd" => Some(Self::RogueEventEndRequestCmd),
            "RogueEventFightRewardRequestCmd" => {
                Some(Self::RogueEventFightRewardRequestCmd)
            }
            "RogueEventCollectionRequestCmd" => {
                Some(Self::RogueEventCollectionRequestCmd)
            }
            "RogueGroupChangeRequestCmd" => Some(Self::RogueGroupChangeRequestCmd),
            "RogueGroupIdxChangeRequestCmd" => Some(Self::RogueGroupIdxChangeRequestCmd),
            "RogueGroupStarUpgradeRequestCmd" => {
                Some(Self::RogueGroupStarUpgradeRequestCmd)
            }
            "RogueCollectionEnchantRequestCmd" => {
                Some(Self::RogueCollectionEnchantRequestCmd)
            }
            "BuyRogueGoodsRequestCmd" => Some(Self::BuyRogueGoodsRequestCmd),
            "RogueCollectionNewRequestCmd" => Some(Self::RogueCollectionNewRequestCmd),
            "RogueReadEndingRequestCmd" => Some(Self::RogueReadEndingRequestCmd),
            "RogueReturnRequestCmd" => Some(Self::RogueReturnRequestCmd),
            "RogueStatePushCmd" => Some(Self::RogueStatePushCmd),
            "RogueInfoPushCmd" => Some(Self::RogueInfoPushCmd),
            "RogueEventUpdatePushCmd" => Some(Self::RogueEventUpdatePushCmd),
            "RogueFightResultPushCmd" => Some(Self::RogueFightResultPushCmd),
            "RogueCollectionsPushCmd" => Some(Self::RogueCollectionsPushCmd),
            "RogueTeamInfoPushCmd" => Some(Self::RogueTeamInfoPushCmd),
            "RogueGoodsInfoPushCmd" => Some(Self::RogueGoodsInfoPushCmd),
            "RogueCoinPushCmd" => Some(Self::RogueCoinPushCmd),
            "RogueCurrencyPushCmd" => Some(Self::RogueCurrencyPushCmd),
            "RogueHeartPushCmd" => Some(Self::RogueHeartPushCmd),
            "RogueEndPushCmd" => Some(Self::RogueEndPushCmd),
            "RogueCollectionGetPushCmd" => Some(Self::RogueCollectionGetPushCmd),
            "RogueLifeChangePushCmd" => Some(Self::RogueLifeChangePushCmd),
            "RogueCollectionUnlockPushCmd" => Some(Self::RogueCollectionUnlockPushCmd),
            "GetRoomInfoRequestCmd" => Some(Self::GetRoomInfoRequestCmd),
            "UseBlockRequestCmd" => Some(Self::UseBlockRequestCmd),
            "ResetRoomRequestCmd" => Some(Self::ResetRoomRequestCmd),
            "UseBuildingRequestCmd" => Some(Self::UseBuildingRequestCmd),
            "UnUseBuildingRequestCmd" => Some(Self::UnUseBuildingRequestCmd),
            "BuildingGainPushCmd" => Some(Self::BuildingGainPushCmd),
            "GetRoomObInfoRequestCmd" => Some(Self::GetRoomObInfoRequestCmd),
            "RoomConfirmRequestCmd" => Some(Self::RoomConfirmRequestCmd),
            "RoomRevertRequestCmd" => Some(Self::RoomRevertRequestCmd),
            "StartProductionLineRequestCmd" => Some(Self::StartProductionLineRequestCmd),
            "GainProductionLineRequestCmd" => Some(Self::GainProductionLineRequestCmd),
            "FormulaGainPushCmd" => Some(Self::FormulaGainPushCmd),
            "ProductionLineLvUpRequestCmd" => Some(Self::ProductionLineLvUpRequestCmd),
            "ProductionLineAccelerateRequestCmd" => {
                Some(Self::ProductionLineAccelerateRequestCmd)
            }
            "GetOtherRoomObInfoRequestCmd" => Some(Self::GetOtherRoomObInfoRequestCmd),
            "RoomLevelUpRequestCmd" => Some(Self::RoomLevelUpRequestCmd),
            "ProductionLineInfoRequestCmd" => Some(Self::ProductionLineInfoRequestCmd),
            "BlockPackageGainPushCmd" => Some(Self::BlockPackageGainPushCmd),
            "GetBlockPackageInfoRequsetCmd" => Some(Self::GetBlockPackageInfoRequsetCmd),
            "GetBuildingInfoRequestCmd" => Some(Self::GetBuildingInfoRequestCmd),
            "UnUseBlockRequestCmd" => Some(Self::UnUseBlockRequestCmd),
            "UpdateRoomHeroDataRequestCmd" => Some(Self::UpdateRoomHeroDataRequestCmd),
            "HideBuildingReddotRequsetCmd" => Some(Self::HideBuildingReddotRequsetCmd),
            "HideBlockPackageReddotRequestCmd" => {
                Some(Self::HideBlockPackageReddotRequestCmd)
            }
            "GainSpecialBlockPushCmd" => Some(Self::GainSpecialBlockPushCmd),
            "GainRoomHeroFaithRequestCmd" => Some(Self::GainRoomHeroFaithRequestCmd),
            "GetCharacterInteractionBonusRequestCmd" => {
                Some(Self::GetCharacterInteractionBonusRequestCmd)
            }
            "GetCharacterInteractionInfoRequestCmd" => {
                Some(Self::GetCharacterInteractionInfoRequestCmd)
            }
            "StartCharacterInteractionRequestCmd" => {
                Some(Self::StartCharacterInteractionRequestCmd)
            }
            "GetRoomThemeCollectionBonusRequestCmd" => {
                Some(Self::GetRoomThemeCollectionBonusRequestCmd)
            }
            "GetRoomPlanInfoRequestCmd" => Some(Self::GetRoomPlanInfoRequestCmd),
            "GetRoomPlanDetailsRequestCmd" => Some(Self::GetRoomPlanDetailsRequestCmd),
            "SetRoomPlanRequestCmd" => Some(Self::SetRoomPlanRequestCmd),
            "SetRoomPlanNameRequestCmd" => Some(Self::SetRoomPlanNameRequestCmd),
            "SetRoomPlanCoverRequestCmd" => Some(Self::SetRoomPlanCoverRequestCmd),
            "UseRoomPlanRequestCmd" => Some(Self::UseRoomPlanRequestCmd),
            "SwitchRoomPlanRequestCmd" => Some(Self::SwitchRoomPlanRequestCmd),
            "DeleteRoomPlanRequestCmd" => Some(Self::DeleteRoomPlanRequestCmd),
            "CopyOtherRoomPlanRequestCmd" => Some(Self::CopyOtherRoomPlanRequestCmd),
            "GetRoomShareRequestCmd" => Some(Self::GetRoomShareRequestCmd),
            "UseRoomShareRequestCmd" => Some(Self::UseRoomShareRequestCmd),
            "ShareRoomPlanRequestCmd" => Some(Self::ShareRoomPlanRequestCmd),
            "DeleteRoomShareRequestCmd" => Some(Self::DeleteRoomShareRequestCmd),
            "ReportRoomRequestCmd" => Some(Self::ReportRoomRequestCmd),
            "BuildingLevelUpPushCmd" => Some(Self::BuildingLevelUpPushCmd),
            "SetWaterTypeRequestCmd" => Some(Self::SetWaterTypeRequestCmd),
            "SetRoomSkinRequestCmd" => Some(Self::SetRoomSkinRequestCmd),
            "ReadRoomSkinRequestCmd" => Some(Self::ReadRoomSkinRequestCmd),
            "GenerateRoadRequestCmd" => Some(Self::GenerateRoadRequestCmd),
            "DeleteRoadRequestCmd" => Some(Self::DeleteRoadRequestCmd),
            "AllotCritterRequestCmd" => Some(Self::AllotCritterRequestCmd),
            "AllotVehicleRequestCmd" => Some(Self::AllotVehicleRequestCmd),
            "GetManufactureInfoRequestCmd" => Some(Self::GetManufactureInfoRequestCmd),
            "GetFrozenItemInfoRequestCmd" => Some(Self::GetFrozenItemInfoRequestCmd),
            "BuyManufactureBuildingRequestCmd" => {
                Some(Self::BuyManufactureBuildingRequestCmd)
            }
            "DispatchCritterRequestCmd" => Some(Self::DispatchCritterRequestCmd),
            "ManuBuildingUpgradeRequestCmd" => Some(Self::ManuBuildingUpgradeRequestCmd),
            "SelectSlotProductionPlanRequestCmd" => {
                Some(Self::SelectSlotProductionPlanRequestCmd)
            }
            "ManufactureAccelerateRequestCmd" => {
                Some(Self::ManufactureAccelerateRequestCmd)
            }
            "ReapFinishSlotRequestCmd" => Some(Self::ReapFinishSlotRequestCmd),
            "BatchDispatchCrittersRequestCmd" => {
                Some(Self::BatchDispatchCrittersRequestCmd)
            }
            "RouseCrittersRequestCmd" => Some(Self::RouseCrittersRequestCmd),
            "BatchAddProctionsRequestCmd" => Some(Self::BatchAddProctionsRequestCmd),
            "GainGuideBuildingRequestCmd" => Some(Self::GainGuideBuildingRequestCmd),
            "AccelerateGuidePlanRequestCmd" => Some(Self::AccelerateGuidePlanRequestCmd),
            "ManuBuildingInfoPushCmd" => Some(Self::ManuBuildingInfoPushCmd),
            "BuyRestSlotRequestCmd" => Some(Self::BuyRestSlotRequestCmd),
            "ChangeRestCritterRequestCmd" => Some(Self::ChangeRestCritterRequestCmd),
            "UnloadRestBuildingCrittersRequestCmd" => {
                Some(Self::UnloadRestBuildingCrittersRequestCmd)
            }
            "ReplaceRestBuildingCrittersRequestCmd" => {
                Some(Self::ReplaceRestBuildingCrittersRequestCmd)
            }
            "FeedCritterRequestCmd" => Some(Self::FeedCritterRequestCmd),
            "RestBuildingInfoPushCmd" => Some(Self::RestBuildingInfoPushCmd),
            "GetOrderInfoRequestCmd" => Some(Self::GetOrderInfoRequestCmd),
            "FinishOrderRequestCmd" => Some(Self::FinishOrderRequestCmd),
            "LockOrderRequestCmd" => Some(Self::LockOrderRequestCmd),
            "RefreshPurchaseOrderRequestCmd" => {
                Some(Self::RefreshPurchaseOrderRequestCmd)
            }
            "ChangePurchaseOrderTraceStateRequestCmd" => {
                Some(Self::ChangePurchaseOrderTraceStateRequestCmd)
            }
            "GetTradeTaskInfoRequestCmd" => Some(Self::GetTradeTaskInfoRequestCmd),
            "ReadNewTradeTaskRequestCmd" => Some(Self::ReadNewTradeTaskRequestCmd),
            "GetTradeSupportBonusRequestCmd" => {
                Some(Self::GetTradeSupportBonusRequestCmd)
            }
            "TradeLevelUpRequestCmd" => Some(Self::TradeLevelUpRequestCmd),
            "TradeTaskPushCmd" => Some(Self::TradeTaskPushCmd),
            "GetTradeTaskExtraBonusRequestCmd" => {
                Some(Self::GetTradeTaskExtraBonusRequestCmd)
            }
            "GetRoomLogRequestCmd" => Some(Self::GetRoomLogRequestCmd),
            "ReadRoomLogNewRequestCmd" => Some(Self::ReadRoomLogNewRequestCmd),
            "GetRougeInfoRequestCmd" => Some(Self::GetRougeInfoRequestCmd),
            "EnterRougeSelectDifficultyRequestCmd" => {
                Some(Self::EnterRougeSelectDifficultyRequestCmd)
            }
            "EnterRougeSelectRewardRequestCmd" => {
                Some(Self::EnterRougeSelectRewardRequestCmd)
            }
            "EnterRougeSelectStyleRequestCmd" => {
                Some(Self::EnterRougeSelectStyleRequestCmd)
            }
            "EnterRougeSelectHeroesRequestCmd" => {
                Some(Self::EnterRougeSelectHeroesRequestCmd)
            }
            "RougeGroupChangeRequestCmd" => Some(Self::RougeGroupChangeRequestCmd),
            "RougeMonsterFixAttrRequestCmd" => Some(Self::RougeMonsterFixAttrRequestCmd),
            "RougeRoundMoveRequestCmd" => Some(Self::RougeRoundMoveRequestCmd),
            "RougeChoiceEventRequestCmd" => Some(Self::RougeChoiceEventRequestCmd),
            "RougeBuyGoodsRequestCmd" => Some(Self::RougeBuyGoodsRequestCmd),
            "RougeEndShopEventRequestCmd" => Some(Self::RougeEndShopEventRequestCmd),
            "RougeShopRefreshRequestCmd" => Some(Self::RougeShopRefreshRequestCmd),
            "RougeSelectDropRequestCmd" => Some(Self::RougeSelectDropRequestCmd),
            "RougeRandomDropRequestCmd" => Some(Self::RougeRandomDropRequestCmd),
            "RougeSelectHealRequestCmd" => Some(Self::RougeSelectHealRequestCmd),
            "RougeSelectReviveRequestCmd" => Some(Self::RougeSelectReviveRequestCmd),
            "RougeRecruitHeroRequestCmd" => Some(Self::RougeRecruitHeroRequestCmd),
            "RougeSelectLostCollectionRequestCmd" => {
                Some(Self::RougeSelectLostCollectionRequestCmd)
            }
            "RougeSelectCollectionLevelUpRequestCmd" => {
                Some(Self::RougeSelectCollectionLevelUpRequestCmd)
            }
            "RougePieceMoveRequestCmd" => Some(Self::RougePieceMoveRequestCmd),
            "RougePieceTalkSelectRequestCmd" => {
                Some(Self::RougePieceTalkSelectRequestCmd)
            }
            "RougeLeaveMiddleLayerRequestCmd" => {
                Some(Self::RougeLeaveMiddleLayerRequestCmd)
            }
            "RougeRepairShopBuyRequestCmd" => Some(Self::RougeRepairShopBuyRequestCmd),
            "RougeRepairShopRandomRequestCmd" => {
                Some(Self::RougeRepairShopRandomRequestCmd)
            }
            "RougeDisplaceRequestCmd" => Some(Self::RougeDisplaceRequestCmd),
            "RougeEndRequestCmd" => Some(Self::RougeEndRequestCmd),
            "RougeAbortRequestCmd" => Some(Self::RougeAbortRequestCmd),
            "ActiveTalentRequestCmd" => Some(Self::ActiveTalentRequestCmd),
            "RougeUseMapSkillRequestCmd" => Some(Self::RougeUseMapSkillRequestCmd),
            "RougeUnlockSkillRequestCmd" => Some(Self::RougeUnlockSkillRequestCmd),
            "RougeEventUpdatePushCmd" => Some(Self::RougeEventUpdatePushCmd),
            "RougeSelectDropPushCmd" => Some(Self::RougeSelectDropPushCmd),
            "RougeLayerMapInfoPushCmd" => Some(Self::RougeLayerMapInfoPushCmd),
            "RougeLayerSimpleMapInfoPushCmd" => {
                Some(Self::RougeLayerSimpleMapInfoPushCmd)
            }
            "RougeUpdateCoinPushCmd" => Some(Self::RougeUpdateCoinPushCmd),
            "RougeUpdatePowerPushCmd" => Some(Self::RougeUpdatePowerPushCmd),
            "RougeUpdateTalentPointPushCmd" => Some(Self::RougeUpdateTalentPointPushCmd),
            "RougeUpdateTeamExpAndLevelPushCmd" => {
                Some(Self::RougeUpdateTeamExpAndLevelPushCmd)
            }
            "RougeFightResultPushCmd" => Some(Self::RougeFightResultPushCmd),
            "RougeInMapItemUpdatePushCmd" => Some(Self::RougeInMapItemUpdatePushCmd),
            "RougeTeamHpUpdatePushCmd" => Some(Self::RougeTeamHpUpdatePushCmd),
            "RougeInteractiveTeamHpUpdatePushCmd" => {
                Some(Self::RougeInteractiveTeamHpUpdatePushCmd)
            }
            "RougeTeamInfoPushCmd" => Some(Self::RougeTeamInfoPushCmd),
            "RougeEntrustInfoPushCmd" => Some(Self::RougeEntrustInfoPushCmd),
            "RougeTriggerEffectPushCmd" => Some(Self::RougeTriggerEffectPushCmd),
            "RougeInfoPushCmd" => Some(Self::RougeInfoPushCmd),
            "RougeComposeRequestCmd" => Some(Self::RougeComposeRequestCmd),
            "RougeInlayRequestCmd" => Some(Self::RougeInlayRequestCmd),
            "RougeDemountRequestCmd" => Some(Self::RougeDemountRequestCmd),
            "RougeAddToBarRequestCmd" => Some(Self::RougeAddToBarRequestCmd),
            "RougeOneKeyAddToBarRequestCmd" => Some(Self::RougeOneKeyAddToBarRequestCmd),
            "RougeRemoveFromBarRequestCmd" => Some(Self::RougeRemoveFromBarRequestCmd),
            "RougeOneKeyRemoveFromBarRequestCmd" => {
                Some(Self::RougeOneKeyRemoveFromBarRequestCmd)
            }
            "RougeItemTrammelsRequestCmd" => Some(Self::RougeItemTrammelsRequestCmd),
            "RougeItemBagPushCmd" => Some(Self::RougeItemBagPushCmd),
            "RougeAddItemBagPushCmd" => Some(Self::RougeAddItemBagPushCmd),
            "RougeRemoveItemBagPushCmd" => Some(Self::RougeRemoveItemBagPushCmd),
            "RougeItemWarehousePushCmd" => Some(Self::RougeItemWarehousePushCmd),
            "RougeAddItemWarehousePushCmd" => Some(Self::RougeAddItemWarehousePushCmd),
            "RougeRemoveItemWarehousePushCmd" => {
                Some(Self::RougeRemoveItemWarehousePushCmd)
            }
            "RougeItemLayoutEffectUpdatePushCmd" => {
                Some(Self::RougeItemLayoutEffectUpdatePushCmd)
            }
            "RougeItemUpdatePushCmd" => Some(Self::RougeItemUpdatePushCmd),
            "RougeItemEffectChangeItemPushCmd" => {
                Some(Self::RougeItemEffectChangeItemPushCmd)
            }
            "GetRougeOutsideInfoRequestCmd" => Some(Self::GetRougeOutsideInfoRequestCmd),
            "RougeActiveGeniusRequestCmd" => Some(Self::RougeActiveGeniusRequestCmd),
            "RougeReceivePointBonusRequestCmd" => {
                Some(Self::RougeReceivePointBonusRequestCmd)
            }
            "RougeUpdateGeniusPointPushCmd" => Some(Self::RougeUpdateGeniusPointPushCmd),
            "RougeUpdatePointPushCmd" => Some(Self::RougeUpdatePointPushCmd),
            "RougeMarkGeniusNewStageRequestCmd" => {
                Some(Self::RougeMarkGeniusNewStageRequestCmd)
            }
            "RougeMarkBonusNewStageRequestCmd" => {
                Some(Self::RougeMarkBonusNewStageRequestCmd)
            }
            "RougeGetUnlockCollectionsRequestCmd" => {
                Some(Self::RougeGetUnlockCollectionsRequestCmd)
            }
            "RougeGetNewReddotInfoRequestCmd" => {
                Some(Self::RougeGetNewReddotInfoRequestCmd)
            }
            "RougeMarkNewReddotRequestCmd" => Some(Self::RougeMarkNewReddotRequestCmd),
            "RougeReddotUpdatePushCmd" => Some(Self::RougeReddotUpdatePushCmd),
            "RougeUnlockStoryRequestCmd" => Some(Self::RougeUnlockStoryRequestCmd),
            "RougeLimiterSettingSaveRequestCmd" => {
                Some(Self::RougeLimiterSettingSaveRequestCmd)
            }
            "RougeDLCSettingSaveRequestCmd" => Some(Self::RougeDlcSettingSaveRequestCmd),
            "RougeLimiterUnlockBuffRequestCmd" => {
                Some(Self::RougeLimiterUnlockBuffRequestCmd)
            }
            "RougeLimiterSpeedUpBuffCdRequestCmd" => {
                Some(Self::RougeLimiterSpeedUpBuffCdRequestCmd)
            }
            "GetSiegeBattleInfoRequestCmd" => Some(Self::GetSiegeBattleInfoRequestCmd),
            "StartSiegeBattleRequestCmd" => Some(Self::StartSiegeBattleRequestCmd),
            "AbandonSiegeBattleRequestCmd" => Some(Self::AbandonSiegeBattleRequestCmd),
            "GetSignInInfoRequestCmd" => Some(Self::GetSignInInfoRequestCmd),
            "SignInRequestCmd" => Some(Self::SignInRequestCmd),
            "SignInAddupRequestCmd" => Some(Self::SignInAddupRequestCmd),
            "SignInHistoryRequestCmd" => Some(Self::SignInHistoryRequestCmd),
            "GetHeroBirthdayRequestCmd" => Some(Self::GetHeroBirthdayRequestCmd),
            "SignInTotalRewardRequestCmd" => Some(Self::SignInTotalRewardRequestCmd),
            "SignInTotalRewardAllRequestCmd" => {
                Some(Self::SignInTotalRewardAllRequestCmd)
            }
            "ClientStatBaseInfoRequestCmd" => Some(Self::ClientStatBaseInfoRequestCmd),
            "StatInfoPushCmd" => Some(Self::StatInfoPushCmd),
            "UpdateClientStatBaseInfoRequestCmd" => {
                Some(Self::UpdateClientStatBaseInfoRequestCmd)
            }
            "GetStoreInfosRequestCmd" => Some(Self::GetStoreInfosRequestCmd),
            "BuyGoodsRequestCmd" => Some(Self::BuyGoodsRequestCmd),
            "ReadStoreNewRequestCmd" => Some(Self::ReadStoreNewRequestCmd),
            "GetStoryRequestCmd" => Some(Self::GetStoryRequestCmd),
            "UpdateStoryRequestCmd" => Some(Self::UpdateStoryRequestCmd),
            "GetStoryFinishRequestCmd" => Some(Self::GetStoryFinishRequestCmd),
            "StoryFinishPushCmd" => Some(Self::StoryFinishPushCmd),
            "SummonRequestCmd" => Some(Self::SummonRequestCmd),
            "GetSummonInfoRequestCmd" => Some(Self::GetSummonInfoRequestCmd),
            "SummonQueryTokenRequestCmd" => Some(Self::SummonQueryTokenRequestCmd),
            "OpenLuckyBagRequestCmd" => Some(Self::OpenLuckyBagRequestCmd),
            "ChooseMultiUpHeroRequestCmd" => Some(Self::ChooseMultiUpHeroRequestCmd),
            "ChooseEnhancedPoolHeroRequestCmd" => {
                Some(Self::ChooseEnhancedPoolHeroRequestCmd)
            }
            "GetTaskInfoRequestCmd" => Some(Self::GetTaskInfoRequestCmd),
            "FinishTaskRequestCmd" => Some(Self::FinishTaskRequestCmd),
            "UpdateTaskPushCmd" => Some(Self::UpdateTaskPushCmd),
            "DeleteTaskPushCmd" => Some(Self::DeleteTaskPushCmd),
            "GetTaskActivityBonusRequestCmd" => {
                Some(Self::GetTaskActivityBonusRequestCmd)
            }
            "FinishAllTaskRequestCmd" => Some(Self::FinishAllTaskRequestCmd),
            "FinishReadTaskRequestCmd" => Some(Self::FinishReadTaskRequestCmd),
            "GetTowerInfoRequestCmd" => Some(Self::GetTowerInfoRequestCmd),
            "TowerMopUpRequestCmd" => Some(Self::TowerMopUpRequestCmd),
            "TowerActiveTalentRequestCmd" => Some(Self::TowerActiveTalentRequestCmd),
            "TowerResetTalentRequestCmd" => Some(Self::TowerResetTalentRequestCmd),
            "TowerResetSubEpisodeRequestCmd" => {
                Some(Self::TowerResetSubEpisodeRequestCmd)
            }
            "StartTowerBattleRequestCmd" => Some(Self::StartTowerBattleRequestCmd),
            "TowerBattleFinishPushCmd" => Some(Self::TowerBattleFinishPushCmd),
            "TowerLayerUpdatePushCmd" => Some(Self::TowerLayerUpdatePushCmd),
            "GetTurnbackInfoRequestCmd" => Some(Self::GetTurnbackInfoRequestCmd),
            "TurnbackSignInRequestCmd" => Some(Self::TurnbackSignInRequestCmd),
            "TurnbackOnceBonusRequestCmd" => Some(Self::TurnbackOnceBonusRequestCmd),
            "TurnbackFirstShowRequestCmd" => Some(Self::TurnbackFirstShowRequestCmd),
            "TurnbackBonusPointRequestCmd" => Some(Self::TurnbackBonusPointRequestCmd),
            "TurnbackAdditionPushCmd" => Some(Self::TurnbackAdditionPushCmd),
            "BuyDoubleBonusRequestCmd" => Some(Self::BuyDoubleBonusRequestCmd),
            "RefreshOnlineTaskRequestCmd" => Some(Self::RefreshOnlineTaskRequestCmd),
            "LogoutRequestCmd" => Some(Self::LogoutRequestCmd),
            "DebugLogoutRequestCmd" => Some(Self::DebugLogoutRequestCmd),
            "GetSettingInfosRequestCmd" => Some(Self::GetSettingInfosRequestCmd),
            "UpdateSettingInfoRequestCmd" => Some(Self::UpdateSettingInfoRequestCmd),
            "WarChessRoundStartPushCmd" => Some(Self::WarChessRoundStartPushCmd),
            "WarChessMyRoundStartRequestCmd" => {
                Some(Self::WarChessMyRoundStartRequestCmd)
            }
            "WarChessCharacterSkillRequestCmd" => {
                Some(Self::WarChessCharacterSkillRequestCmd)
            }
            "WarChessPiecePlaceRequestCmd" => Some(Self::WarChessPiecePlaceRequestCmd),
            "WarChessRoundEndRequestCmd" => Some(Self::WarChessRoundEndRequestCmd),
            "WarChessFightResultPushCmd" => Some(Self::WarChessFightResultPushCmd),
            "WarChessDiamondBoxPushCmd" => Some(Self::WarChessDiamondBoxPushCmd),
            "WarChessPieceSellRequestCmd" => Some(Self::WarChessPieceSellRequestCmd),
            "GetWeekwalkInfoRequestCmd" => Some(Self::GetWeekwalkInfoRequestCmd),
            "BeforeStartWeekwalkBattleRequestCmd" => {
                Some(Self::BeforeStartWeekwalkBattleRequestCmd)
            }
            "WeekwalkGeneralRequestCmd" => Some(Self::WeekwalkGeneralRequestCmd),
            "WeekwalkInfoUpdatePushCmd" => Some(Self::WeekwalkInfoUpdatePushCmd),
            "WeekwalkDialogRequestCmd" => Some(Self::WeekwalkDialogRequestCmd),
            "WeekwalkHeroRecommendRequestCmd" => {
                Some(Self::WeekwalkHeroRecommendRequestCmd)
            }
            "WeekwalkDialogHistoryRequestCmd" => {
                Some(Self::WeekwalkDialogHistoryRequestCmd)
            }
            "ResetLayerRequestCmd" => Some(Self::ResetLayerRequestCmd),
            "MarkShowBuffRequestCmd" => Some(Self::MarkShowBuffRequestCmd),
            "MarkShowFinishedRequestCmd" => Some(Self::MarkShowFinishedRequestCmd),
            "SelectNotCdHeroRequestCmd" => Some(Self::SelectNotCdHeroRequestCmd),
            "MarkPopDeepRuleRequestCmd" => Some(Self::MarkPopDeepRuleRequestCmd),
            "MarkPopShallowSettleRequestCmd" => {
                Some(Self::MarkPopShallowSettleRequestCmd)
            }
            "MarkPopDeepSettleRequestCmd" => Some(Self::MarkPopDeepSettleRequestCmd),
            "ChangeWeekwalkHeroGroupSelectRequestCmd" => {
                Some(Self::ChangeWeekwalkHeroGroupSelectRequestCmd)
            }
            "GuestTimeOutPushCmd" => Some(Self::GuestTimeOutPushCmd),
            "MinorPlayTimeOutPushCmd" => Some(Self::MinorPlayTimeOutPushCmd),
            "MinorLimitLoginTimePushCmd" => Some(Self::MinorLimitLoginTimePushCmd),
            _ => None,
        }
    }
}
